//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EveryGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="EveryGrammarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface IEveryGrammarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.startRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStartRule([NotNull] EveryGrammarParser.StartRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.startRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStartRule([NotNull] EveryGrammarParser.StartRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] EveryGrammarParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] EveryGrammarParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.if_else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_else([NotNull] EveryGrammarParser.If_elseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.if_else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_else([NotNull] EveryGrammarParser.If_elseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.inner_if_else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInner_if_else([NotNull] EveryGrammarParser.Inner_if_elseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.inner_if_else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInner_if_else([NotNull] EveryGrammarParser.Inner_if_elseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bool_or_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool_or_term([NotNull] EveryGrammarParser.Bool_or_termContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bool_or_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool_or_term([NotNull] EveryGrammarParser.Bool_or_termContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bool_and_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool_and_term([NotNull] EveryGrammarParser.Bool_and_termContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bool_and_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool_and_term([NotNull] EveryGrammarParser.Bool_and_termContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.equality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality([NotNull] EveryGrammarParser.EqualityContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.equality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality([NotNull] EveryGrammarParser.EqualityContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.check"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCheck([NotNull] EveryGrammarParser.CheckContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.check"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCheck([NotNull] EveryGrammarParser.CheckContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bit_or_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBit_or_term([NotNull] EveryGrammarParser.Bit_or_termContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bit_or_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBit_or_term([NotNull] EveryGrammarParser.Bit_or_termContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bit_and_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBit_and_term([NotNull] EveryGrammarParser.Bit_and_termContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bit_and_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBit_and_term([NotNull] EveryGrammarParser.Bit_and_termContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.line_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLine_term([NotNull] EveryGrammarParser.Line_termContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.line_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLine_term([NotNull] EveryGrammarParser.Line_termContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.point_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPoint_term([NotNull] EveryGrammarParser.Point_termContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.point_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPoint_term([NotNull] EveryGrammarParser.Point_termContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] EveryGrammarParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] EveryGrammarParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.expr_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_args([NotNull] EveryGrammarParser.Expr_argsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.expr_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_args([NotNull] EveryGrammarParser.Expr_argsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.array_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArray_expr([NotNull] EveryGrammarParser.Array_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.array_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArray_expr([NotNull] EveryGrammarParser.Array_exprContext context);
}
