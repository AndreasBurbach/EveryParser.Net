//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EveryGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class EveryGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, INT=2, ADD=3, SUBTRACT=4, MULITPLY=5, DIVIDE=6, MODULO=7, EQUAL=8, 
		NOT=9, KOMMA=10, NOTEQUAL=11, CONTAINS=12, BOOLOR=13, BOOLAND=14, BITOR=15, 
		BITAND=16, MAX=17, MIN=18, TRUE=19, FALSE=20, GREATER=21, GREATEREQUAL=22, 
		LOWER=23, LOWEREQUAL=24, ROUNDBRACKETOPEN=25, ROUNDBRACKETCLOSED=26, EDGEBRACKETOPEN=27, 
		EDGEBRACKETCLOSED=28, TILDE=29, COLON=30, QUESTIONMARK=31, CONCAT=32, 
		UPPERCASE=33, LOWERCASE=34, INTEGERDIVISION=35, DOUBLE=36, STRING=37, 
		VARIABLE=38, DIGIT=39, ALPHA=40;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NEWLINE", "INT", "ADD", "SUBTRACT", "MULITPLY", "DIVIDE", "MODULO", "EQUAL", 
		"NOT", "KOMMA", "NOTEQUAL", "CONTAINS", "BOOLOR", "BOOLAND", "BITOR", 
		"BITAND", "MAX", "MIN", "TRUE", "FALSE", "GREATER", "GREATEREQUAL", "LOWER", 
		"LOWEREQUAL", "ROUNDBRACKETOPEN", "ROUNDBRACKETCLOSED", "EDGEBRACKETOPEN", 
		"EDGEBRACKETCLOSED", "TILDE", "COLON", "QUESTIONMARK", "CONCAT", "UPPERCASE", 
		"LOWERCASE", "INTEGERDIVISION", "DOUBLE", "STRING", "VARIABLE", "DIGIT", 
		"ALPHA"
	};


	public EveryGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public EveryGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'not'", 
		"','", "'!='", "'in'", "'||'", "'&&'", "'|'", "'&'", "'max'", "'min'", 
		"'true'", "'false'", "'>'", "'>='", "'<'", "'<='", "'('", "')'", "'['", 
		"']'", "'~'", "':'", "'?'", "'concat('", "'upper('", "'lower('", "'//'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "INT", "ADD", "SUBTRACT", "MULITPLY", "DIVIDE", "MODULO", 
		"EQUAL", "NOT", "KOMMA", "NOTEQUAL", "CONTAINS", "BOOLOR", "BOOLAND", 
		"BITOR", "BITAND", "MAX", "MIN", "TRUE", "FALSE", "GREATER", "GREATEREQUAL", 
		"LOWER", "LOWEREQUAL", "ROUNDBRACKETOPEN", "ROUNDBRACKETCLOSED", "EDGEBRACKETOPEN", 
		"EDGEBRACKETCLOSED", "TILDE", "COLON", "QUESTIONMARK", "CONCAT", "UPPERCASE", 
		"LOWERCASE", "INTEGERDIVISION", "DOUBLE", "STRING", "VARIABLE", "DIGIT", 
		"ALPHA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EveryGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EveryGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '*', '\xE6', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x3', '\x2', '\x6', '\x2', 'U', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', 'V', '\x3', '\x3', '\x6', '\x3', 'Z', '\n', '\x3', '\r', 
		'\x3', '\xE', '\x3', '[', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x6', '%', 
		'\xC6', '\n', '%', '\r', '%', '\xE', '%', '\xC7', '\x3', '%', '\x3', '%', 
		'\x6', '%', '\xCC', '\n', '%', '\r', '%', '\xE', '%', '\xCD', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', '\xD4', '\n', '&', '\f', 
		'&', '\xE', '&', '\xD7', '\v', '&', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\a', '\'', '\xDE', '\n', '\'', '\f', '\'', 
		'\xE', '\'', '\xE1', '\v', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', 
		')', '\x3', '\xD5', '\x2', '*', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', 
		'\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', 
		'\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', 
		'\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', '%', '\x14', '\'', '\x15', 
		')', '\x16', '+', '\x17', '-', '\x18', '/', '\x19', '\x31', '\x1A', '\x33', 
		'\x1B', '\x35', '\x1C', '\x37', '\x1D', '\x39', '\x1E', ';', '\x1F', '=', 
		' ', '?', '!', '\x41', '\"', '\x43', '#', '\x45', '$', 'G', '%', 'I', 
		'&', 'K', '\'', 'M', '(', 'O', ')', 'Q', '*', '\x3', '\x2', '\x5', '\x4', 
		'\x2', '\f', '\f', '\xF', '\xF', '\x3', '\x2', '\x32', ';', '\x5', '\x2', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x2', '\xED', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', '\x2', '\x2', '\x2', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '/', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x2', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x35', '\x3', '\x2', '\x2', '\x2', '\x2', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x39', '\x3', '\x2', '\x2', '\x2', '\x2', 
		';', '\x3', '\x2', '\x2', '\x2', '\x2', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '?', '\x3', '\x2', '\x2', '\x2', '\x2', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x43', '\x3', '\x2', '\x2', '\x2', '\x2', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x2', 'G', '\x3', '\x2', '\x2', '\x2', '\x2', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x2', 'K', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x2', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x2', 'Q', '\x3', '\x2', '\x2', '\x2', '\x3', 'T', '\x3', '\x2', '\x2', 
		'\x2', '\x5', 'Y', '\x3', '\x2', '\x2', '\x2', '\a', ']', '\x3', '\x2', 
		'\x2', '\x2', '\t', '_', '\x3', '\x2', '\x2', '\x2', '\v', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\x63', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x11', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x13', 'j', '\x3', '\x2', '\x2', '\x2', '\x15', 'n', '\x3', '\x2', 
		'\x2', '\x2', '\x17', 'p', '\x3', '\x2', '\x2', '\x2', '\x19', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', 'v', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x1F', '|', '\x3', '\x2', '\x2', '\x2', 
		'!', '~', '\x3', '\x2', '\x2', '\x2', '#', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '%', '\x84', '\x3', '\x2', '\x2', '\x2', '\'', '\x88', '\x3', '\x2', 
		'\x2', '\x2', ')', '\x8D', '\x3', '\x2', '\x2', '\x2', '+', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '-', '\x95', '\x3', '\x2', '\x2', '\x2', '/', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x35', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x39', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', ';', '\xA5', '\x3', '\x2', '\x2', '\x2', '=', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '?', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x43', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\xBA', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', 'I', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', 'K', '\xCF', '\x3', '\x2', '\x2', '\x2', 'M', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', 'O', '\xE2', '\x3', '\x2', '\x2', '\x2', 'Q', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'U', '\t', '\x2', '\x2', '\x2', 'T', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\x4', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\t', '\x3', '\x2', '\x2', 'Y', 
		'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', 
		'[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\\', '\x6', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '-', '\x2', 
		'\x2', '^', '\b', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '/', '\x2', 
		'\x2', '`', '\n', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', ',', 
		'\x2', '\x2', '\x62', '\f', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\a', '\x31', '\x2', '\x2', '\x64', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\a', '\'', '\x2', '\x2', '\x66', '\x10', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\a', '?', '\x2', '\x2', 'h', 'i', '\a', '?', 
		'\x2', '\x2', 'i', '\x12', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', 
		'p', '\x2', '\x2', 'k', 'l', '\a', 'q', '\x2', '\x2', 'l', 'm', '\a', 
		'v', '\x2', '\x2', 'm', '\x14', '\x3', '\x2', '\x2', '\x2', 'n', 'o', 
		'\a', '.', '\x2', '\x2', 'o', '\x16', '\x3', '\x2', '\x2', '\x2', 'p', 
		'q', '\a', '#', '\x2', '\x2', 'q', 'r', '\a', '?', '\x2', '\x2', 'r', 
		'\x18', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', 'k', '\x2', '\x2', 
		't', 'u', '\a', 'p', '\x2', '\x2', 'u', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', '~', '\x2', '\x2', 'w', 'x', '\a', '~', '\x2', '\x2', 
		'x', '\x1C', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '(', '\x2', '\x2', 
		'z', '{', '\a', '(', '\x2', '\x2', '{', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\a', '~', '\x2', '\x2', '}', ' ', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x7F', '\a', '(', '\x2', '\x2', '\x7F', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\a', 'o', '\x2', '\x2', '\x81', '\x82', '\a', 
		'\x63', '\x2', '\x2', '\x82', '\x83', '\a', 'z', '\x2', '\x2', '\x83', 
		'$', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', 'o', '\x2', '\x2', 
		'\x85', '\x86', '\a', 'k', '\x2', '\x2', '\x86', '\x87', '\a', 'p', '\x2', 
		'\x2', '\x87', '&', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', 
		'v', '\x2', '\x2', '\x89', '\x8A', '\a', 't', '\x2', '\x2', '\x8A', '\x8B', 
		'\a', 'w', '\x2', '\x2', '\x8B', '\x8C', '\a', 'g', '\x2', '\x2', '\x8C', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', 'h', '\x2', '\x2', 
		'\x8E', '\x8F', '\a', '\x63', '\x2', '\x2', '\x8F', '\x90', '\a', 'n', 
		'\x2', '\x2', '\x90', '\x91', '\a', 'u', '\x2', '\x2', '\x91', '\x92', 
		'\a', 'g', '\x2', '\x2', '\x92', '*', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\a', '@', '\x2', '\x2', '\x94', ',', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x96', '\a', '@', '\x2', '\x2', '\x96', '\x97', '\a', '?', '\x2', 
		'\x2', '\x97', '.', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', 
		'>', '\x2', '\x2', '\x99', '\x30', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9B', '\a', '>', '\x2', '\x2', '\x9B', '\x9C', '\a', '?', '\x2', '\x2', 
		'\x9C', '\x32', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '*', 
		'\x2', '\x2', '\x9E', '\x34', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\a', '+', '\x2', '\x2', '\xA0', '\x36', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA2', '\a', ']', '\x2', '\x2', '\xA2', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\a', '_', '\x2', '\x2', '\xA4', ':', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA6', '\a', '\x80', '\x2', '\x2', '\xA6', '<', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '<', '\x2', '\x2', '\xA8', 
		'>', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x41', '\x2', 
		'\x2', '\xAA', '@', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', 
		'\x65', '\x2', '\x2', '\xAC', '\xAD', '\a', 'q', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', 'p', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x65', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\x63', '\x2', '\x2', '\xB0', '\xB1', '\a', 
		'v', '\x2', '\x2', '\xB1', '\xB2', '\a', '*', '\x2', '\x2', '\xB2', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', 'w', '\x2', '\x2', '\xB4', 
		'\xB5', '\a', 'r', '\x2', '\x2', '\xB5', '\xB6', '\a', 'r', '\x2', '\x2', 
		'\xB6', '\xB7', '\a', 'g', '\x2', '\x2', '\xB7', '\xB8', '\a', 't', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '*', '\x2', '\x2', '\xB9', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', 'n', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', 'q', '\x2', '\x2', '\xBC', '\xBD', '\a', 'y', '\x2', '\x2', 
		'\xBD', '\xBE', '\a', 'g', '\x2', '\x2', '\xBE', '\xBF', '\a', 't', '\x2', 
		'\x2', '\xBF', '\xC0', '\a', '*', '\x2', '\x2', '\xC0', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x31', '\x2', '\x2', '\xC2', 
		'\xC3', '\a', '\x31', '\x2', '\x2', '\xC3', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC6', '\t', '\x3', '\x2', '\x2', '\xC5', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCB', '\a', 
		'\x30', '\x2', '\x2', '\xCA', '\xCC', '\t', '\x3', '\x2', '\x2', '\xCB', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', 'J', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD5', '\a', '$', '\x2', '\x2', '\xD0', '\xD1', '\a', '^', '\x2', '\x2', 
		'\xD1', '\xD4', '\a', '$', '\x2', '\x2', '\xD2', '\xD4', '\v', '\x2', 
		'\x2', '\x2', '\xD3', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '$', '\x2', '\x2', '\xD9', 
		'L', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDF', '\x5', 'Q', ')', '\x2', 
		'\xDB', '\xDE', '\x5', 'Q', ')', '\x2', '\xDC', '\xDE', '\x5', 'O', '(', 
		'\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', 'N', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\t', '\x3', '\x2', '\x2', '\xE3', 
		'P', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\t', '\x4', '\x2', '\x2', 
		'\xE5', 'R', '\x3', '\x2', '\x2', '\x2', '\v', '\x2', 'V', '[', '\xC7', 
		'\xCD', '\xD3', '\xD5', '\xDD', '\xDF', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
