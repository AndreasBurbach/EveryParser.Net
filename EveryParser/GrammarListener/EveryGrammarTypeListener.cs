//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EveryGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IEveryGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class EveryGrammarTypeListener : IEveryGrammarListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.startRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStartRule([NotNull] EveryGrammarParser.StartRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.startRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStartRule([NotNull] EveryGrammarParser.StartRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] EveryGrammarParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] EveryGrammarParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.if_else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf_else([NotNull] EveryGrammarParser.If_elseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.if_else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf_else([NotNull] EveryGrammarParser.If_elseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.inner_if_else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInner_if_else([NotNull] EveryGrammarParser.Inner_if_elseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.inner_if_else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInner_if_else([NotNull] EveryGrammarParser.Inner_if_elseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bool_or_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBool_or_term([NotNull] EveryGrammarParser.Bool_or_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bool_or_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBool_or_term([NotNull] EveryGrammarParser.Bool_or_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bool_and_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBool_and_term([NotNull] EveryGrammarParser.Bool_and_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bool_and_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBool_and_term([NotNull] EveryGrammarParser.Bool_and_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.equality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquality([NotNull] EveryGrammarParser.EqualityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.equality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquality([NotNull] EveryGrammarParser.EqualityContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.check"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCheck([NotNull] EveryGrammarParser.CheckContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.check"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCheck([NotNull] EveryGrammarParser.CheckContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bit_or_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBit_or_term([NotNull] EveryGrammarParser.Bit_or_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bit_or_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBit_or_term([NotNull] EveryGrammarParser.Bit_or_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bit_and_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBit_and_term([NotNull] EveryGrammarParser.Bit_and_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bit_and_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBit_and_term([NotNull] EveryGrammarParser.Bit_and_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.line_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine_term([NotNull] EveryGrammarParser.Line_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.line_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine_term([NotNull] EveryGrammarParser.Line_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.point_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPoint_term([NotNull] EveryGrammarParser.Point_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.point_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPoint_term([NotNull] EveryGrammarParser.Point_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] EveryGrammarParser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] EveryGrammarParser.FactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.expr_args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr_args([NotNull] EveryGrammarParser.Expr_argsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.expr_args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr_args([NotNull] EveryGrammarParser.Expr_argsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.array_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray_expr([NotNull] EveryGrammarParser.Array_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.array_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray_expr([NotNull] EveryGrammarParser.Array_exprContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
