//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EveryGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IEveryGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class EveryGrammarCalculatorListener : IEveryGrammarListener
{
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.startRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStartRule([NotNull] EveryGrammarParser.StartRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.startRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStartRule([NotNull] EveryGrammarParser.StartRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] EveryGrammarParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] EveryGrammarParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.if_else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf_else([NotNull] EveryGrammarParser.If_elseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.if_else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf_else([NotNull] EveryGrammarParser.If_elseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.inner_if_else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInner_if_else([NotNull] EveryGrammarParser.Inner_if_elseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.inner_if_else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInner_if_else([NotNull] EveryGrammarParser.Inner_if_elseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bool_or_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBool_or_term([NotNull] EveryGrammarParser.Bool_or_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bool_or_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBool_or_term([NotNull] EveryGrammarParser.Bool_or_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bool_and_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBool_and_term([NotNull] EveryGrammarParser.Bool_and_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bool_and_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBool_and_term([NotNull] EveryGrammarParser.Bool_and_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.equality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquality([NotNull] EveryGrammarParser.EqualityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.equality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquality([NotNull] EveryGrammarParser.EqualityContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.check"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCheck([NotNull] EveryGrammarParser.CheckContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.check"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCheck([NotNull] EveryGrammarParser.CheckContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bit_or_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBit_or_term([NotNull] EveryGrammarParser.Bit_or_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bit_or_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBit_or_term([NotNull] EveryGrammarParser.Bit_or_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.bit_and_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBit_and_term([NotNull] EveryGrammarParser.Bit_and_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.bit_and_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBit_and_term([NotNull] EveryGrammarParser.Bit_and_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.line_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine_term([NotNull] EveryGrammarParser.Line_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.line_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine_term([NotNull] EveryGrammarParser.Line_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.point_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPoint_term([NotNull] EveryGrammarParser.Point_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.point_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPoint_term([NotNull] EveryGrammarParser.Point_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] EveryGrammarParser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] EveryGrammarParser.FactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Function_Concat</c>
	/// labeled alternative in <see cref="EveryGrammarParser.default_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_Concat([NotNull] EveryGrammarParser.Function_ConcatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Function_Concat</c>
	/// labeled alternative in <see cref="EveryGrammarParser.default_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_Concat([NotNull] EveryGrammarParser.Function_ConcatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Function_Upper</c>
	/// labeled alternative in <see cref="EveryGrammarParser.default_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_Upper([NotNull] EveryGrammarParser.Function_UpperContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Function_Upper</c>
	/// labeled alternative in <see cref="EveryGrammarParser.default_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_Upper([NotNull] EveryGrammarParser.Function_UpperContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Function_Lower</c>
	/// labeled alternative in <see cref="EveryGrammarParser.default_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_Lower([NotNull] EveryGrammarParser.Function_LowerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Function_Lower</c>
	/// labeled alternative in <see cref="EveryGrammarParser.default_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_Lower([NotNull] EveryGrammarParser.Function_LowerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Function_Distinc</c>
	/// labeled alternative in <see cref="EveryGrammarParser.default_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_Distinc([NotNull] EveryGrammarParser.Function_DistincContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Function_Distinc</c>
	/// labeled alternative in <see cref="EveryGrammarParser.default_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_Distinc([NotNull] EveryGrammarParser.Function_DistincContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Abs</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Abs([NotNull] EveryGrammarParser.Math_AbsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Abs</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Abs([NotNull] EveryGrammarParser.Math_AbsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_ACos</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_ACos([NotNull] EveryGrammarParser.Math_ACosContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_ACos</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_ACos([NotNull] EveryGrammarParser.Math_ACosContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_ACosH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_ACosH([NotNull] EveryGrammarParser.Math_ACosHContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_ACosH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_ACosH([NotNull] EveryGrammarParser.Math_ACosHContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_ASin</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_ASin([NotNull] EveryGrammarParser.Math_ASinContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_ASin</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_ASin([NotNull] EveryGrammarParser.Math_ASinContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_ASinH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_ASinH([NotNull] EveryGrammarParser.Math_ASinHContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_ASinH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_ASinH([NotNull] EveryGrammarParser.Math_ASinHContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_ATan</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_ATan([NotNull] EveryGrammarParser.Math_ATanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_ATan</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_ATan([NotNull] EveryGrammarParser.Math_ATanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_ATan2</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_ATan2([NotNull] EveryGrammarParser.Math_ATan2Context context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_ATan2</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_ATan2([NotNull] EveryGrammarParser.Math_ATan2Context context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_ATanH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_ATanH([NotNull] EveryGrammarParser.Math_ATanHContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_ATanH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_ATanH([NotNull] EveryGrammarParser.Math_ATanHContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Cbrt</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Cbrt([NotNull] EveryGrammarParser.Math_CbrtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Cbrt</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Cbrt([NotNull] EveryGrammarParser.Math_CbrtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Cos</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Cos([NotNull] EveryGrammarParser.Math_CosContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Cos</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Cos([NotNull] EveryGrammarParser.Math_CosContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_CosH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_CosH([NotNull] EveryGrammarParser.Math_CosHContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_CosH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_CosH([NotNull] EveryGrammarParser.Math_CosHContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Ceilling</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Ceilling([NotNull] EveryGrammarParser.Math_CeillingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Ceilling</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Ceilling([NotNull] EveryGrammarParser.Math_CeillingContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Clamp</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Clamp([NotNull] EveryGrammarParser.Math_ClampContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Clamp</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Clamp([NotNull] EveryGrammarParser.Math_ClampContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Exp</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Exp([NotNull] EveryGrammarParser.Math_ExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Exp</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Exp([NotNull] EveryGrammarParser.Math_ExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Floor</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Floor([NotNull] EveryGrammarParser.Math_FloorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Floor</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Floor([NotNull] EveryGrammarParser.Math_FloorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Log</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Log([NotNull] EveryGrammarParser.Math_LogContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Log</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Log([NotNull] EveryGrammarParser.Math_LogContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Log2</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Log2([NotNull] EveryGrammarParser.Math_Log2Context context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Log2</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Log2([NotNull] EveryGrammarParser.Math_Log2Context context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Log10</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Log10([NotNull] EveryGrammarParser.Math_Log10Context context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Log10</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Log10([NotNull] EveryGrammarParser.Math_Log10Context context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Max_Array</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Max_Array([NotNull] EveryGrammarParser.Math_Max_ArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Max_Array</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Max_Array([NotNull] EveryGrammarParser.Math_Max_ArrayContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Max_Two</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Max_Two([NotNull] EveryGrammarParser.Math_Max_TwoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Max_Two</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Max_Two([NotNull] EveryGrammarParser.Math_Max_TwoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Min_Array</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Min_Array([NotNull] EveryGrammarParser.Math_Min_ArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Min_Array</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Min_Array([NotNull] EveryGrammarParser.Math_Min_ArrayContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Min_Two</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Min_Two([NotNull] EveryGrammarParser.Math_Min_TwoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Min_Two</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Min_Two([NotNull] EveryGrammarParser.Math_Min_TwoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Power</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Power([NotNull] EveryGrammarParser.Math_PowerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Power</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Power([NotNull] EveryGrammarParser.Math_PowerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Round_Not_Decimal</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Round_Not_Decimal([NotNull] EveryGrammarParser.Math_Round_Not_DecimalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Round_Not_Decimal</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Round_Not_Decimal([NotNull] EveryGrammarParser.Math_Round_Not_DecimalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Round_Decimal</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Round_Decimal([NotNull] EveryGrammarParser.Math_Round_DecimalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Round_Decimal</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Round_Decimal([NotNull] EveryGrammarParser.Math_Round_DecimalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Root</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Root([NotNull] EveryGrammarParser.Math_RootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Root</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Root([NotNull] EveryGrammarParser.Math_RootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Sin</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Sin([NotNull] EveryGrammarParser.Math_SinContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Sin</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Sin([NotNull] EveryGrammarParser.Math_SinContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_SinH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_SinH([NotNull] EveryGrammarParser.Math_SinHContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_SinH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_SinH([NotNull] EveryGrammarParser.Math_SinHContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Sqrt</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Sqrt([NotNull] EveryGrammarParser.Math_SqrtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Sqrt</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Sqrt([NotNull] EveryGrammarParser.Math_SqrtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Tan</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Tan([NotNull] EveryGrammarParser.Math_TanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Tan</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Tan([NotNull] EveryGrammarParser.Math_TanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_TanH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_TanH([NotNull] EveryGrammarParser.Math_TanHContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_TanH</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_TanH([NotNull] EveryGrammarParser.Math_TanHContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Math_Truncate</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMath_Truncate([NotNull] EveryGrammarParser.Math_TruncateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Math_Truncate</c>
	/// labeled alternative in <see cref="EveryGrammarParser.math_function_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMath_Truncate([NotNull] EveryGrammarParser.Math_TruncateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.expr_args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr_args([NotNull] EveryGrammarParser.Expr_argsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.expr_args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr_args([NotNull] EveryGrammarParser.Expr_argsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="EveryGrammarParser.array_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray_expr([NotNull] EveryGrammarParser.Array_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="EveryGrammarParser.array_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray_expr([NotNull] EveryGrammarParser.Array_exprContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
