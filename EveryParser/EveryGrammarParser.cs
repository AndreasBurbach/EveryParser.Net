//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EveryGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EveryParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class EveryGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, SUBTRACT=2, MULTIPLY=3, DIVIDE=4, MODULO=5, POWEROPERATOR=6, BOOLXOR=7, 
		EQUAL=8, EQUAL_IGNORECASE=9, NOT=10, NOTEQUAL=11, NOTEQUAL_IGNORECASE=12, 
		BOOLOR=13, BOOLAND=14, BITOR=15, BITAND=16, GREATER=17, GREATEREQUAL=18, 
		LOWER=19, LOWEREQUAL=20, TILDE=21, COLON=22, QUESTIONMARK=23, INTEGERDIVISION=24, 
		BITSHIFTLEFT=25, BITSHIFTRIGHT=26, CONTAINS=27, FACTORIAL=28, NEWLINE=29, 
		KOMMA=30, TRUE=31, FALSE=32, ROUNDBRACKETOPEN=33, ROUNDBRACKETCLOSED=34, 
		EDGEBRACKETOPEN=35, EDGEBRACKETCLOSED=36, DOUBLE=37, STRING=38, VARIABLE=39, 
		OBJECTSVARIABLE=40, INT=41, ALPHA=42, E=43, PI=44, ABS=45, ACOS=46, ACOSH=47, 
		ASIN=48, ASINH=49, ATAN=50, ATAN2=51, ATANH=52, CBRT=53, COS=54, COSH=55, 
		CEILLING=56, CLAMP=57, CROSSSUM=58, DERIVATIVE=59, EXP=60, FLOOR=61, INTEGRATION=62, 
		LOG=63, LOG2=64, LOG10=65, MAX=66, MIN=67, POWER=68, ROUND=69, ROOT=70, 
		SIN=71, SINH=72, SLOPE=73, SQRT=74, TAN=75, TANH=76, TRUNCATE=77, DISTANCE=78, 
		Norm=79, EulerNorm=80, MaxNorm=81, GreatestCommonDivisor=82, LeastCommonMultiple=83, 
		DotProduct=84, Binomial=85, ACOT=86, ACOTH=87, ACSC=88, ACSCH=89, ASEC=90, 
		ASECH=91, COT=92, COTH=93, CSC=94, CSCH=95, SEC=96, SECH=97, COVARIANCE=98, 
		MEAN=99, MEDIAN=100, PEARSON=101, QUANTIL=102, SPEARMAN=103, STD=104, 
		VARIANCE=105, CONCAT=106, COUNT=107, DISTINCT=108, DIFFERENCE=109, DUPLICATES=110, 
		DATETIME=111, Except=112, INDEXOF=113, LOWERCASE=114, REVERSE=115, UNION=116, 
		UPPERCASE=117, ANY=118, SORT=119, ToNumber=120, ToString=121, ToBoolean=122, 
		ToArray=123, DegreeToGrad=124, DegreeToRadian=125, GradToDegree=126, GradToRadian=127, 
		RadianToDegree=128, RadianToGrad=129, RndDecimal=130, RndInteger=131, 
		RndSeed=132;
	public const int
		RULE_startRule = 0, RULE_expression = 1, RULE_if_else = 2, RULE_inner_if_else = 3, 
		RULE_bool_or_term = 4, RULE_bool_xor_term = 5, RULE_bool_and_term = 6, 
		RULE_equality = 7, RULE_check = 8, RULE_bit_or_term = 9, RULE_bit_and_term = 10, 
		RULE_line_term = 11, RULE_point_term = 12, RULE_factor = 13, RULE_random_function_term = 14, 
		RULE_convert_function_term = 15, RULE_datetime_term = 16, RULE_array_slicing_term = 17, 
		RULE_default_function_term = 18, RULE_math_function_term = 19, RULE_statistic_math_function_term = 20, 
		RULE_expr_args = 21, RULE_array_expr = 22;
	public static readonly string[] ruleNames = {
		"startRule", "expression", "if_else", "inner_if_else", "bool_or_term", 
		"bool_xor_term", "bool_and_term", "equality", "check", "bit_or_term", 
		"bit_and_term", "line_term", "point_term", "factor", "random_function_term", 
		"convert_function_term", "datetime_term", "array_slicing_term", "default_function_term", 
		"math_function_term", "statistic_math_function_term", "expr_args", "array_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'^'", "'=='", "'=i'", 
		"'not'", "'!='", "'!=i'", "'||'", "'&&'", "'|'", "'&'", "'>'", "'>='", 
		"'<'", "'<='", "'~'", "':'", "'?'", "'//'", "'<<'", "'>>'", "'in'", "'!'", 
		null, "','", "'true'", "'false'", "'('", "')'", "'['", "']'", null, null, 
		null, null, null, null, "'e'", "'pi'", "'abs('", "'acos('", "'acosh('", 
		"'asin('", "'asinh('", "'atan('", "'atan2('", "'atanh('", "'cbrt('", "'cos('", 
		"'cosh('", "'ceilling('", "'clamp('", "'crosssum('", "'derivative('", 
		"'exp('", "'floor('", "'integration('", "'log('", "'log2('", "'log10('", 
		"'max('", "'min('", "'pow('", "'round('", "'root('", "'sin('", "'sinh('", 
		"'slope('", "'sqrt('", "'tan('", "'tanh('", "'truncate('", "'distance('", 
		"'norm('", "'eulernorm('", "'maxnorm('", "'gcd('", "'lcm('", "'dotproduct('", 
		"'binomial('", "'acot('", "'acoth('", "'acsc('", "'acsch('", "'asec('", 
		"'asech('", "'cot('", "'coth('", "'csc('", "'csch('", "'sec('", "'sech('", 
		"'covariance('", "'mean('", "'median('", "'pearson('", "'quantil('", "'spearman'", 
		"'std('", "'variance('", "'concat('", "'count('", "'distinct('", "'difference('", 
		"'duplicates('", "'date('", "'except('", "'indexOf('", "'lower('", "'reverse('", 
		"'union('", "'upper('", "'any('", "'sort('", "'tonumber('", "'tostring('", 
		"'toboolean('", "'toarray('", "'degreetograd('", "'degreetoradian('", 
		"'gradtodegree('", "'gradtoradian('", "'radiantodegree('", "'radiantograd('", 
		"'rnddecimal('", "'rndinteger('", "'rndseed('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULO", "POWEROPERATOR", 
		"BOOLXOR", "EQUAL", "EQUAL_IGNORECASE", "NOT", "NOTEQUAL", "NOTEQUAL_IGNORECASE", 
		"BOOLOR", "BOOLAND", "BITOR", "BITAND", "GREATER", "GREATEREQUAL", "LOWER", 
		"LOWEREQUAL", "TILDE", "COLON", "QUESTIONMARK", "INTEGERDIVISION", "BITSHIFTLEFT", 
		"BITSHIFTRIGHT", "CONTAINS", "FACTORIAL", "NEWLINE", "KOMMA", "TRUE", 
		"FALSE", "ROUNDBRACKETOPEN", "ROUNDBRACKETCLOSED", "EDGEBRACKETOPEN", 
		"EDGEBRACKETCLOSED", "DOUBLE", "STRING", "VARIABLE", "OBJECTSVARIABLE", 
		"INT", "ALPHA", "E", "PI", "ABS", "ACOS", "ACOSH", "ASIN", "ASINH", "ATAN", 
		"ATAN2", "ATANH", "CBRT", "COS", "COSH", "CEILLING", "CLAMP", "CROSSSUM", 
		"DERIVATIVE", "EXP", "FLOOR", "INTEGRATION", "LOG", "LOG2", "LOG10", "MAX", 
		"MIN", "POWER", "ROUND", "ROOT", "SIN", "SINH", "SLOPE", "SQRT", "TAN", 
		"TANH", "TRUNCATE", "DISTANCE", "Norm", "EulerNorm", "MaxNorm", "GreatestCommonDivisor", 
		"LeastCommonMultiple", "DotProduct", "Binomial", "ACOT", "ACOTH", "ACSC", 
		"ACSCH", "ASEC", "ASECH", "COT", "COTH", "CSC", "CSCH", "SEC", "SECH", 
		"COVARIANCE", "MEAN", "MEDIAN", "PEARSON", "QUANTIL", "SPEARMAN", "STD", 
		"VARIANCE", "CONCAT", "COUNT", "DISTINCT", "DIFFERENCE", "DUPLICATES", 
		"DATETIME", "Except", "INDEXOF", "LOWERCASE", "REVERSE", "UNION", "UPPERCASE", 
		"ANY", "SORT", "ToNumber", "ToString", "ToBoolean", "ToArray", "DegreeToGrad", 
		"DegreeToRadian", "GradToDegree", "GradToRadian", "RadianToDegree", "RadianToGrad", 
		"RndDecimal", "RndInteger", "RndSeed"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EveryGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EveryGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EveryGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EveryGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(EveryGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(EveryGrammarParser.NEWLINE, i);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUBTRACT) | (1L << NOT) | (1L << TILDE) | (1L << FACTORIAL) | (1L << TRUE) | (1L << FALSE) | (1L << ROUNDBRACKETOPEN) | (1L << EDGEBRACKETOPEN) | (1L << DOUBLE) | (1L << STRING) | (1L << VARIABLE) | (1L << OBJECTSVARIABLE) | (1L << INT) | (1L << ABS) | (1L << ACOS) | (1L << ACOSH) | (1L << ASIN) | (1L << ASINH) | (1L << ATAN) | (1L << ATAN2) | (1L << ATANH) | (1L << CBRT) | (1L << COS) | (1L << COSH) | (1L << CEILLING) | (1L << CLAMP) | (1L << CROSSSUM) | (1L << DERIVATIVE) | (1L << EXP) | (1L << FLOOR) | (1L << INTEGRATION) | (1L << LOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LOG2 - 64)) | (1L << (LOG10 - 64)) | (1L << (MAX - 64)) | (1L << (MIN - 64)) | (1L << (POWER - 64)) | (1L << (ROUND - 64)) | (1L << (ROOT - 64)) | (1L << (SIN - 64)) | (1L << (SINH - 64)) | (1L << (SLOPE - 64)) | (1L << (SQRT - 64)) | (1L << (TAN - 64)) | (1L << (TANH - 64)) | (1L << (TRUNCATE - 64)) | (1L << (DISTANCE - 64)) | (1L << (Norm - 64)) | (1L << (EulerNorm - 64)) | (1L << (MaxNorm - 64)) | (1L << (GreatestCommonDivisor - 64)) | (1L << (LeastCommonMultiple - 64)) | (1L << (DotProduct - 64)) | (1L << (Binomial - 64)) | (1L << (ACOT - 64)) | (1L << (ACOTH - 64)) | (1L << (ACSC - 64)) | (1L << (ACSCH - 64)) | (1L << (ASEC - 64)) | (1L << (ASECH - 64)) | (1L << (COT - 64)) | (1L << (COTH - 64)) | (1L << (CSC - 64)) | (1L << (CSCH - 64)) | (1L << (SEC - 64)) | (1L << (SECH - 64)) | (1L << (COVARIANCE - 64)) | (1L << (MEAN - 64)) | (1L << (MEDIAN - 64)) | (1L << (PEARSON - 64)) | (1L << (QUANTIL - 64)) | (1L << (SPEARMAN - 64)) | (1L << (STD - 64)) | (1L << (VARIANCE - 64)) | (1L << (CONCAT - 64)) | (1L << (COUNT - 64)) | (1L << (DISTINCT - 64)) | (1L << (DIFFERENCE - 64)) | (1L << (DUPLICATES - 64)) | (1L << (DATETIME - 64)) | (1L << (Except - 64)) | (1L << (INDEXOF - 64)) | (1L << (LOWERCASE - 64)) | (1L << (REVERSE - 64)) | (1L << (UNION - 64)) | (1L << (UPPERCASE - 64)) | (1L << (ANY - 64)) | (1L << (SORT - 64)) | (1L << (ToNumber - 64)) | (1L << (ToString - 64)) | (1L << (ToBoolean - 64)) | (1L << (ToArray - 64)) | (1L << (DegreeToGrad - 64)) | (1L << (DegreeToRadian - 64)) | (1L << (GradToDegree - 64)) | (1L << (GradToRadian - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RadianToDegree - 128)) | (1L << (RadianToGrad - 128)) | (1L << (RndDecimal - 128)) | (1L << (RndInteger - 128)) | (1L << (RndSeed - 128)))) != 0)) {
				{
				{
				State = 46;
				expression();
				State = 47;
				Match(NEWLINE);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_elseContext if_else() {
			return GetRuleContext<If_elseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			if_else();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_elseContext : ParserRuleContext {
		public If_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else; } }
	 
		public If_elseContext() { }
		public virtual void CopyFrom(If_elseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfElseContext : If_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext[] inner_if_else() {
			return GetRuleContexts<Inner_if_elseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext inner_if_else(int i) {
			return GetRuleContext<Inner_if_elseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(EveryGrammarParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EveryGrammarParser.COLON, 0); }
		public IfElseContext(If_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
	}
	public partial class IfElse_NextContext : If_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext inner_if_else() {
			return GetRuleContext<Inner_if_elseContext>(0);
		}
		public IfElse_NextContext(If_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterIfElse_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitIfElse_Next(this);
		}
	}
	public partial class ArraySlicingContext : If_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext inner_if_else() {
			return GetRuleContext<Inner_if_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_slicing_termContext array_slicing_term() {
			return GetRuleContext<Array_slicing_termContext>(0);
		}
		public ArraySlicingContext(If_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing(this);
		}
	}

	[RuleVersion(0)]
	public If_elseContext if_else() {
		If_elseContext _localctx = new If_elseContext(Context, State);
		EnterRule(_localctx, 4, RULE_if_else);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new IfElse_NextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				inner_if_else();
				}
				break;
			case 2:
				_localctx = new ArraySlicingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				inner_if_else();
				State = 58;
				array_slicing_term();
				}
				break;
			case 3:
				_localctx = new IfElseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 60;
				inner_if_else();
				State = 61;
				Match(QUESTIONMARK);
				State = 62;
				inner_if_else();
				State = 63;
				Match(COLON);
				State = 64;
				inner_if_else();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inner_if_elseContext : ParserRuleContext {
		public Inner_if_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inner_if_else; } }
	 
		public Inner_if_elseContext() { }
		public virtual void CopyFrom(Inner_if_elseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InnerIfElseContext : Inner_if_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETOPEN() { return GetToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_elseContext if_else() {
			return GetRuleContext<If_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public InnerIfElseContext(Inner_if_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterInnerIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitInnerIfElse(this);
		}
	}
	public partial class InnerIfElse_NextContext : Inner_if_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_or_termContext bool_or_term() {
			return GetRuleContext<Bool_or_termContext>(0);
		}
		public InnerIfElse_NextContext(Inner_if_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterInnerIfElse_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitInnerIfElse_Next(this);
		}
	}

	[RuleVersion(0)]
	public Inner_if_elseContext inner_if_else() {
		Inner_if_elseContext _localctx = new Inner_if_elseContext(Context, State);
		EnterRule(_localctx, 6, RULE_inner_if_else);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new InnerIfElse_NextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 68;
				bool_or_term();
				}
				break;
			case 2:
				_localctx = new InnerIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				Match(ROUNDBRACKETOPEN);
				State = 70;
				if_else();
				State = 71;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_or_termContext : ParserRuleContext {
		public Bool_or_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_or_term; } }
	 
		public Bool_or_termContext() { }
		public virtual void CopyFrom(Bool_or_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolOr_NextContext : Bool_or_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_xor_termContext bool_xor_term() {
			return GetRuleContext<Bool_xor_termContext>(0);
		}
		public BoolOr_NextContext(Bool_or_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolOr_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolOr_Next(this);
		}
	}
	public partial class BoolOrContext : Bool_or_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_xor_termContext[] bool_xor_term() {
			return GetRuleContexts<Bool_xor_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_xor_termContext bool_xor_term(int i) {
			return GetRuleContext<Bool_xor_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLOR() { return GetToken(EveryGrammarParser.BOOLOR, 0); }
		public BoolOrContext(Bool_or_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolOr(this);
		}
	}

	[RuleVersion(0)]
	public Bool_or_termContext bool_or_term() {
		Bool_or_termContext _localctx = new Bool_or_termContext(Context, State);
		EnterRule(_localctx, 8, RULE_bool_or_term);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new BoolOr_NextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				bool_xor_term();
				}
				break;
			case 2:
				_localctx = new BoolOrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				bool_xor_term();
				State = 77;
				Match(BOOLOR);
				State = 78;
				bool_xor_term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_xor_termContext : ParserRuleContext {
		public Bool_xor_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_xor_term; } }
	 
		public Bool_xor_termContext() { }
		public virtual void CopyFrom(Bool_xor_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolXOrContext : Bool_xor_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext[] bool_and_term() {
			return GetRuleContexts<Bool_and_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term(int i) {
			return GetRuleContext<Bool_and_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLXOR() { return GetToken(EveryGrammarParser.BOOLXOR, 0); }
		public BoolXOrContext(Bool_xor_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolXOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolXOr(this);
		}
	}
	public partial class BoolXOr_NextContext : Bool_xor_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term() {
			return GetRuleContext<Bool_and_termContext>(0);
		}
		public BoolXOr_NextContext(Bool_xor_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolXOr_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolXOr_Next(this);
		}
	}

	[RuleVersion(0)]
	public Bool_xor_termContext bool_xor_term() {
		Bool_xor_termContext _localctx = new Bool_xor_termContext(Context, State);
		EnterRule(_localctx, 10, RULE_bool_xor_term);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new BoolXOr_NextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				bool_and_term(0);
				}
				break;
			case 2:
				_localctx = new BoolXOrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				bool_and_term(0);
				State = 84;
				Match(BOOLXOR);
				State = 85;
				bool_and_term(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_and_termContext : ParserRuleContext {
		public Bool_and_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_and_term; } }
	 
		public Bool_and_termContext() { }
		public virtual void CopyFrom(Bool_and_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolAnd_NextContext : Bool_and_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public BoolAnd_NextContext(Bool_and_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolAnd_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolAnd_Next(this);
		}
	}
	public partial class BoolAndContext : Bool_and_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term() {
			return GetRuleContext<Bool_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLAND() { return GetToken(EveryGrammarParser.BOOLAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public BoolAndContext(Bool_and_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolAnd(this);
		}
	}

	[RuleVersion(0)]
	public Bool_and_termContext bool_and_term() {
		return bool_and_term(0);
	}

	private Bool_and_termContext bool_and_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bool_and_termContext _localctx = new Bool_and_termContext(Context, _parentState);
		Bool_and_termContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_bool_and_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BoolAnd_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 90;
			equality(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolAndContext(new Bool_and_termContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bool_and_term);
					State = 92;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 93;
					Match(BOOLAND);
					State = 94;
					equality(0);
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
	 
		public EqualityContext() { }
		public virtual void CopyFrom(EqualityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Equality_ContainsContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(EveryGrammarParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_ContainsContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_Contains(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_Contains(this);
		}
	}
	public partial class Equality_NextContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_NextContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_Next(this);
		}
	}
	public partial class Equality_EqualContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(EveryGrammarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_EqualContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_Equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_Equal(this);
		}
	}
	public partial class Equality_NotEqualIgnoreCaseContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL_IGNORECASE() { return GetToken(EveryGrammarParser.NOTEQUAL_IGNORECASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_NotEqualIgnoreCaseContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_NotEqualIgnoreCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_NotEqualIgnoreCase(this);
		}
	}
	public partial class Equality_NotEqualContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(EveryGrammarParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_NotEqualContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_NotEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_NotEqual(this);
		}
	}
	public partial class Equality_NotContainsContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EveryGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(EveryGrammarParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_NotContainsContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_NotContains(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_NotContains(this);
		}
	}
	public partial class Equality_EqualIgnoreCaseContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_IGNORECASE() { return GetToken(EveryGrammarParser.EQUAL_IGNORECASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_EqualIgnoreCaseContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_EqualIgnoreCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_EqualIgnoreCase(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		return equality(0);
	}

	private EqualityContext equality(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityContext _localctx = new EqualityContext(Context, _parentState);
		EqualityContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_equality, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Equality_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 101;
			check(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 124;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 122;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new Equality_EqualContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 103;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 104;
						Match(EQUAL);
						State = 105;
						check(0);
						}
						break;
					case 2:
						{
						_localctx = new Equality_NotEqualContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 106;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 107;
						Match(NOTEQUAL);
						State = 108;
						check(0);
						}
						break;
					case 3:
						{
						_localctx = new Equality_EqualIgnoreCaseContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 109;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 110;
						Match(EQUAL_IGNORECASE);
						State = 111;
						check(0);
						}
						break;
					case 4:
						{
						_localctx = new Equality_NotEqualIgnoreCaseContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 112;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 113;
						Match(NOTEQUAL_IGNORECASE);
						State = 114;
						check(0);
						}
						break;
					case 5:
						{
						_localctx = new Equality_ContainsContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 115;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 116;
						Match(CONTAINS);
						State = 117;
						check(0);
						}
						break;
					case 6:
						{
						_localctx = new Equality_NotContainsContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 118;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 119;
						Match(NOT);
						State = 120;
						Match(CONTAINS);
						State = 121;
						check(0);
						}
						break;
					}
					} 
				}
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
	 
		public CheckContext() { }
		public virtual void CopyFrom(CheckContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Check_NextContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_NextContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_Next(this);
		}
	}
	public partial class Check_GreaterContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(EveryGrammarParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_GreaterContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_Greater(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_Greater(this);
		}
	}
	public partial class Check_GreaterEqualContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(EveryGrammarParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_GreaterEqualContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_GreaterEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_GreaterEqual(this);
		}
	}
	public partial class Check_LowerContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(EveryGrammarParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_LowerContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_Lower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_Lower(this);
		}
	}
	public partial class Check_LowerEqualContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWEREQUAL() { return GetToken(EveryGrammarParser.LOWEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_LowerEqualContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_LowerEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_LowerEqual(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(Context, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Check_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 128;
			bit_or_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 142;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new Check_LowerContext(new CheckContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 130;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 131;
						Match(LOWER);
						State = 132;
						bit_or_term(0);
						}
						break;
					case 2:
						{
						_localctx = new Check_GreaterContext(new CheckContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 133;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 134;
						Match(GREATER);
						State = 135;
						bit_or_term(0);
						}
						break;
					case 3:
						{
						_localctx = new Check_LowerEqualContext(new CheckContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 136;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 137;
						Match(LOWEREQUAL);
						State = 138;
						bit_or_term(0);
						}
						break;
					case 4:
						{
						_localctx = new Check_GreaterEqualContext(new CheckContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 139;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 140;
						Match(GREATEREQUAL);
						State = 141;
						bit_or_term(0);
						}
						break;
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_or_termContext : ParserRuleContext {
		public Bit_or_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_or_term; } }
	 
		public Bit_or_termContext() { }
		public virtual void CopyFrom(Bit_or_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitORContext : Bit_or_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR() { return GetToken(EveryGrammarParser.BITOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		public BitORContext(Bit_or_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBitOR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBitOR(this);
		}
	}
	public partial class BitOr_NextContext : Bit_or_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		public BitOr_NextContext(Bit_or_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBitOr_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBitOr_Next(this);
		}
	}

	[RuleVersion(0)]
	public Bit_or_termContext bit_or_term() {
		return bit_or_term(0);
	}

	private Bit_or_termContext bit_or_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_or_termContext _localctx = new Bit_or_termContext(Context, _parentState);
		Bit_or_termContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_bit_or_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BitOr_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 148;
			bit_and_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitORContext(new Bit_or_termContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bit_or_term);
					State = 150;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 151;
					Match(BITOR);
					State = 152;
					bit_and_term(0);
					}
					} 
				}
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_and_termContext : ParserRuleContext {
		public Bit_and_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_and_term; } }
	 
		public Bit_and_termContext() { }
		public virtual void CopyFrom(Bit_and_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitAndContext : Bit_and_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND() { return GetToken(EveryGrammarParser.BITAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		public BitAndContext(Bit_and_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBitAnd(this);
		}
	}
	public partial class BitAnd_NextContext : Bit_and_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		public BitAnd_NextContext(Bit_and_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBitAnd_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBitAnd_Next(this);
		}
	}

	[RuleVersion(0)]
	public Bit_and_termContext bit_and_term() {
		return bit_and_term(0);
	}

	private Bit_and_termContext bit_and_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_and_termContext _localctx = new Bit_and_termContext(Context, _parentState);
		Bit_and_termContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_bit_and_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BitAnd_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 159;
			line_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitAndContext(new Bit_and_termContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bit_and_term);
					State = 161;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 162;
					Match(BITAND);
					State = 163;
					line_term(0);
					}
					} 
				}
				State = 168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Line_termContext : ParserRuleContext {
		public Line_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_term; } }
	 
		public Line_termContext() { }
		public virtual void CopyFrom(Line_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Line_AdditionContext : Line_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(EveryGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		public Line_AdditionContext(Line_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterLine_Addition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitLine_Addition(this);
		}
	}
	public partial class Line_SubtractionContext : Line_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(EveryGrammarParser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		public Line_SubtractionContext(Line_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterLine_Subtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitLine_Subtraction(this);
		}
	}
	public partial class Line_NextContext : Line_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		public Line_NextContext(Line_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterLine_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitLine_Next(this);
		}
	}

	[RuleVersion(0)]
	public Line_termContext line_term() {
		return line_term(0);
	}

	private Line_termContext line_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Line_termContext _localctx = new Line_termContext(Context, _parentState);
		Line_termContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_line_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Line_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 170;
			point_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 178;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new Line_AdditionContext(new Line_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_line_term);
						State = 172;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 173;
						Match(ADD);
						State = 174;
						point_term(0);
						}
						break;
					case 2:
						{
						_localctx = new Line_SubtractionContext(new Line_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_line_term);
						State = 175;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 176;
						Match(SUBTRACT);
						State = 177;
						point_term(0);
						}
						break;
					}
					} 
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Point_termContext : ParserRuleContext {
		public Point_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point_term; } }
	 
		public Point_termContext() { }
		public virtual void CopyFrom(Point_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PointTerm_PowerOperatorContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWEROPERATOR() { return GetToken(EveryGrammarParser.POWEROPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_PowerOperatorContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_PowerOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_PowerOperator(this);
		}
	}
	public partial class PointTerm_ModuloContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(EveryGrammarParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_ModuloContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_Modulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_Modulo(this);
		}
	}
	public partial class PointTerm_MultiplyContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(EveryGrammarParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_MultiplyContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_Multiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_Multiply(this);
		}
	}
	public partial class PointTerm_BitShiftLeftContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTLEFT() { return GetToken(EveryGrammarParser.BITSHIFTLEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_BitShiftLeftContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_BitShiftLeft(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_BitShiftLeft(this);
		}
	}
	public partial class PointTerm_IntegerDivisionContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERDIVISION() { return GetToken(EveryGrammarParser.INTEGERDIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_IntegerDivisionContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_IntegerDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_IntegerDivision(this);
		}
	}
	public partial class PointTerm_BitShiftRightContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTRIGHT() { return GetToken(EveryGrammarParser.BITSHIFTRIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_BitShiftRightContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_BitShiftRight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_BitShiftRight(this);
		}
	}
	public partial class PointTerm_DivideContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(EveryGrammarParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_DivideContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_Divide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_Divide(this);
		}
	}
	public partial class PointTerm_NextContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_NextContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_Next(this);
		}
	}

	[RuleVersion(0)]
	public Point_termContext point_term() {
		return point_term(0);
	}

	private Point_termContext point_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Point_termContext _localctx = new Point_termContext(Context, _parentState);
		Point_termContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_point_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PointTerm_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 184;
			factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 209;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 207;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new PointTerm_MultiplyContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 186;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 187;
						Match(MULTIPLY);
						State = 188;
						factor();
						}
						break;
					case 2:
						{
						_localctx = new PointTerm_PowerOperatorContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 189;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 190;
						Match(POWEROPERATOR);
						State = 191;
						factor();
						}
						break;
					case 3:
						{
						_localctx = new PointTerm_ModuloContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 192;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 193;
						Match(MODULO);
						State = 194;
						factor();
						}
						break;
					case 4:
						{
						_localctx = new PointTerm_BitShiftLeftContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 195;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 196;
						Match(BITSHIFTLEFT);
						State = 197;
						factor();
						}
						break;
					case 5:
						{
						_localctx = new PointTerm_BitShiftRightContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 198;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 199;
						Match(BITSHIFTRIGHT);
						State = 200;
						factor();
						}
						break;
					case 6:
						{
						_localctx = new PointTerm_DivideContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 201;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 202;
						Match(DIVIDE);
						State = 203;
						factor();
						}
						break;
					case 7:
						{
						_localctx = new PointTerm_IntegerDivisionContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 204;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 205;
						Match(INTEGERDIVISION);
						State = 206;
						factor();
						}
						break;
					}
					} 
				}
				State = 211;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Factor_FalseContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(EveryGrammarParser.FALSE, 0); }
		public Factor_FalseContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_False(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_False(this);
		}
	}
	public partial class Factor_IntegerContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(EveryGrammarParser.INT, 0); }
		public Factor_IntegerContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Integer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Integer(this);
		}
	}
	public partial class Factor_ObjectVariablesContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECTSVARIABLE() { return GetToken(EveryGrammarParser.OBJECTSVARIABLE, 0); }
		public Factor_ObjectVariablesContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_ObjectVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_ObjectVariables(this);
		}
	}
	public partial class Factor_DateTimeTermContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_termContext datetime_term() {
			return GetRuleContext<Datetime_termContext>(0);
		}
		public Factor_DateTimeTermContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_DateTimeTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_DateTimeTerm(this);
		}
	}
	public partial class Factor_ConvertFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Convert_function_termContext convert_function_term() {
			return GetRuleContext<Convert_function_termContext>(0);
		}
		public Factor_ConvertFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_ConvertFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_ConvertFunction(this);
		}
	}
	public partial class Factor_TrueContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(EveryGrammarParser.TRUE, 0); }
		public Factor_TrueContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_True(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_True(this);
		}
	}
	public partial class Factor_NotContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EveryGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_NotContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Not(this);
		}
	}
	public partial class Factor_RandomFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Random_function_termContext random_function_term() {
			return GetRuleContext<Random_function_termContext>(0);
		}
		public Factor_RandomFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_RandomFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_RandomFunction(this);
		}
	}
	public partial class Factor_FactorialContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACTORIAL() { return GetToken(EveryGrammarParser.FACTORIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_FactorialContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Factorial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Factorial(this);
		}
	}
	public partial class Factor_BracketsContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETOPEN() { return GetToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Factor_BracketsContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Brackets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Brackets(this);
		}
	}
	public partial class Factor_MathFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_function_termContext math_function_term() {
			return GetRuleContext<Math_function_termContext>(0);
		}
		public Factor_MathFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_MathFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_MathFunction(this);
		}
	}
	public partial class Factor_PlusContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(EveryGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_PlusContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Plus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Plus(this);
		}
	}
	public partial class Factor_TildeContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(EveryGrammarParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_TildeContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Tilde(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Tilde(this);
		}
	}
	public partial class Factor_MinusContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(EveryGrammarParser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_MinusContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Minus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Minus(this);
		}
	}
	public partial class Factor_VariableContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EveryGrammarParser.VARIABLE, 0); }
		public Factor_VariableContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Variable(this);
		}
	}
	public partial class Factor_StringContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(EveryGrammarParser.STRING, 0); }
		public Factor_StringContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_String(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_String(this);
		}
	}
	public partial class Factor_DoubleContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(EveryGrammarParser.DOUBLE, 0); }
		public Factor_DoubleContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Double(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Double(this);
		}
	}
	public partial class Factor_ArrayContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		public Factor_ArrayContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Array(this);
		}
	}
	public partial class Factor_DefaultFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Default_function_termContext default_function_term() {
			return GetRuleContext<Default_function_termContext>(0);
		}
		public Factor_DefaultFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_DefaultFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_DefaultFunction(this);
		}
	}
	public partial class Factor_StatisticMathFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statistic_math_function_termContext statistic_math_function_term() {
			return GetRuleContext<Statistic_math_function_termContext>(0);
		}
		public Factor_StatisticMathFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_StatisticMathFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_StatisticMathFunction(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 26, RULE_factor);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				_localctx = new Factor_NotContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				Match(NOT);
				State = 213;
				factor();
				}
				break;
			case SUBTRACT:
				_localctx = new Factor_MinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				Match(SUBTRACT);
				State = 215;
				factor();
				}
				break;
			case ADD:
				_localctx = new Factor_PlusContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 216;
				Match(ADD);
				State = 217;
				factor();
				}
				break;
			case TILDE:
				_localctx = new Factor_TildeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 218;
				Match(TILDE);
				State = 219;
				factor();
				}
				break;
			case FACTORIAL:
				_localctx = new Factor_FactorialContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 220;
				Match(FACTORIAL);
				State = 221;
				factor();
				}
				break;
			case ROUNDBRACKETOPEN:
				_localctx = new Factor_BracketsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 222;
				Match(ROUNDBRACKETOPEN);
				State = 223;
				expression();
				State = 224;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case TRUE:
				_localctx = new Factor_TrueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 226;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Factor_FalseContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 227;
				Match(FALSE);
				}
				break;
			case INT:
				_localctx = new Factor_IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 228;
				Match(INT);
				}
				break;
			case DOUBLE:
				_localctx = new Factor_DoubleContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 229;
				Match(DOUBLE);
				}
				break;
			case VARIABLE:
				_localctx = new Factor_VariableContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 230;
				Match(VARIABLE);
				}
				break;
			case OBJECTSVARIABLE:
				_localctx = new Factor_ObjectVariablesContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 231;
				Match(OBJECTSVARIABLE);
				}
				break;
			case STRING:
				_localctx = new Factor_StringContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 232;
				Match(STRING);
				}
				break;
			case DATETIME:
				_localctx = new Factor_DateTimeTermContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 233;
				datetime_term();
				}
				break;
			case EDGEBRACKETOPEN:
				_localctx = new Factor_ArrayContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 234;
				array_expr();
				}
				break;
			case CONCAT:
			case COUNT:
			case DISTINCT:
			case DIFFERENCE:
			case DUPLICATES:
			case Except:
			case INDEXOF:
			case LOWERCASE:
			case REVERSE:
			case UNION:
			case UPPERCASE:
			case ANY:
			case SORT:
				_localctx = new Factor_DefaultFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 235;
				default_function_term();
				}
				break;
			case ToNumber:
			case ToString:
			case ToBoolean:
			case ToArray:
			case DegreeToGrad:
			case DegreeToRadian:
			case GradToDegree:
			case GradToRadian:
			case RadianToDegree:
			case RadianToGrad:
				_localctx = new Factor_ConvertFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 236;
				convert_function_term();
				}
				break;
			case ABS:
			case ACOS:
			case ACOSH:
			case ASIN:
			case ASINH:
			case ATAN:
			case ATAN2:
			case ATANH:
			case CBRT:
			case COS:
			case COSH:
			case CEILLING:
			case CLAMP:
			case CROSSSUM:
			case DERIVATIVE:
			case EXP:
			case FLOOR:
			case INTEGRATION:
			case LOG:
			case LOG2:
			case LOG10:
			case MAX:
			case MIN:
			case POWER:
			case ROUND:
			case ROOT:
			case SIN:
			case SINH:
			case SLOPE:
			case SQRT:
			case TAN:
			case TANH:
			case TRUNCATE:
			case DISTANCE:
			case Norm:
			case EulerNorm:
			case MaxNorm:
			case GreatestCommonDivisor:
			case LeastCommonMultiple:
			case DotProduct:
			case Binomial:
			case ACOT:
			case ACOTH:
			case ACSC:
			case ACSCH:
			case ASEC:
			case ASECH:
			case COT:
			case COTH:
			case CSC:
			case CSCH:
			case SEC:
			case SECH:
				_localctx = new Factor_MathFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 237;
				math_function_term();
				}
				break;
			case RndDecimal:
			case RndInteger:
			case RndSeed:
				_localctx = new Factor_RandomFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 238;
				random_function_term();
				}
				break;
			case COVARIANCE:
			case MEAN:
			case MEDIAN:
			case PEARSON:
			case QUANTIL:
			case SPEARMAN:
			case STD:
			case VARIANCE:
				_localctx = new Factor_StatisticMathFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 239;
				statistic_math_function_term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Random_function_termContext : ParserRuleContext {
		public Random_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_random_function_term; } }
	 
		public Random_function_termContext() { }
		public virtual void CopyFrom(Random_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Random_IntegerArrayContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndInteger() { return GetToken(EveryGrammarParser.RndInteger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_IntegerArrayContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_IntegerArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_IntegerArray(this);
		}
	}
	public partial class Random_IntegerContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndInteger() { return GetToken(EveryGrammarParser.RndInteger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_IntegerContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_Integer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_Integer(this);
		}
	}
	public partial class Random_DecimalArrayContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndDecimal() { return GetToken(EveryGrammarParser.RndDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_DecimalArrayContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_DecimalArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_DecimalArray(this);
		}
	}
	public partial class Random_SeedContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndSeed() { return GetToken(EveryGrammarParser.RndSeed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_SeedContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_Seed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_Seed(this);
		}
	}
	public partial class Random_DecimalContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndDecimal() { return GetToken(EveryGrammarParser.RndDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_DecimalContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_Decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_Decimal(this);
		}
	}

	[RuleVersion(0)]
	public Random_function_termContext random_function_term() {
		Random_function_termContext _localctx = new Random_function_termContext(Context, State);
		EnterRule(_localctx, 28, RULE_random_function_term);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new Random_DecimalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				Match(RndDecimal);
				State = 243;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new Random_DecimalArrayContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				Match(RndDecimal);
				State = 245;
				expression();
				State = 246;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new Random_IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 248;
				Match(RndInteger);
				State = 249;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				_localctx = new Random_IntegerArrayContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 250;
				Match(RndInteger);
				State = 251;
				expression();
				State = 252;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 5:
				_localctx = new Random_SeedContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 254;
				Match(RndSeed);
				State = 255;
				expression();
				State = 256;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Convert_function_termContext : ParserRuleContext {
		public Convert_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convert_function_term; } }
	 
		public Convert_function_termContext() { }
		public virtual void CopyFrom(Convert_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Convert_ToNumberContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ToNumber() { return GetToken(EveryGrammarParser.ToNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_ToNumberContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_ToNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_ToNumber(this);
		}
	}
	public partial class Convert_ToBooleanContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ToBoolean() { return GetToken(EveryGrammarParser.ToBoolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_ToBooleanContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_ToBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_ToBoolean(this);
		}
	}
	public partial class Convert_GradToDegreeContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GradToDegree() { return GetToken(EveryGrammarParser.GradToDegree, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_GradToDegreeContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_GradToDegree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_GradToDegree(this);
		}
	}
	public partial class Convert_ToStringContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ToString() { return GetToken(EveryGrammarParser.ToString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_ToStringContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_ToString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_ToString(this);
		}
	}
	public partial class Convert_ToArrayContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ToArray() { return GetToken(EveryGrammarParser.ToArray, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_ToArrayContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_ToArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_ToArray(this);
		}
	}
	public partial class Convert_DegreeToRadianContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DegreeToRadian() { return GetToken(EveryGrammarParser.DegreeToRadian, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_DegreeToRadianContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_DegreeToRadian(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_DegreeToRadian(this);
		}
	}
	public partial class Convert_RadianToGradContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RadianToGrad() { return GetToken(EveryGrammarParser.RadianToGrad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_RadianToGradContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_RadianToGrad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_RadianToGrad(this);
		}
	}
	public partial class Convert_DegreeToGreadContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DegreeToGrad() { return GetToken(EveryGrammarParser.DegreeToGrad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_DegreeToGreadContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_DegreeToGread(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_DegreeToGread(this);
		}
	}
	public partial class Convert_GradToRadianContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GradToRadian() { return GetToken(EveryGrammarParser.GradToRadian, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_GradToRadianContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_GradToRadian(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_GradToRadian(this);
		}
	}
	public partial class Convert_RadianToDegreeContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RadianToDegree() { return GetToken(EveryGrammarParser.RadianToDegree, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_RadianToDegreeContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_RadianToDegree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_RadianToDegree(this);
		}
	}

	[RuleVersion(0)]
	public Convert_function_termContext convert_function_term() {
		Convert_function_termContext _localctx = new Convert_function_termContext(Context, State);
		EnterRule(_localctx, 30, RULE_convert_function_term);
		try {
			State = 300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ToArray:
				_localctx = new Convert_ToArrayContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				Match(ToArray);
				State = 261;
				expr_args();
				State = 262;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case ToBoolean:
				_localctx = new Convert_ToBooleanContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				Match(ToBoolean);
				State = 265;
				expression();
				State = 266;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case ToNumber:
				_localctx = new Convert_ToNumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 268;
				Match(ToNumber);
				State = 269;
				expression();
				State = 270;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case ToString:
				_localctx = new Convert_ToStringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 272;
				Match(ToString);
				State = 273;
				expression();
				State = 274;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case DegreeToGrad:
				_localctx = new Convert_DegreeToGreadContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 276;
				Match(DegreeToGrad);
				State = 277;
				expression();
				State = 278;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case DegreeToRadian:
				_localctx = new Convert_DegreeToRadianContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 280;
				Match(DegreeToRadian);
				State = 281;
				expression();
				State = 282;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case GradToDegree:
				_localctx = new Convert_GradToDegreeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 284;
				Match(GradToDegree);
				State = 285;
				expression();
				State = 286;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case GradToRadian:
				_localctx = new Convert_GradToRadianContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 288;
				Match(GradToRadian);
				State = 289;
				expression();
				State = 290;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case RadianToDegree:
				_localctx = new Convert_RadianToDegreeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 292;
				Match(RadianToDegree);
				State = 293;
				expression();
				State = 294;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case RadianToGrad:
				_localctx = new Convert_RadianToGradContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 296;
				Match(RadianToGrad);
				State = 297;
				expression();
				State = 298;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_termContext : ParserRuleContext {
		public Datetime_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_term; } }
	 
		public Datetime_termContext() { }
		public virtual void CopyFrom(Datetime_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DateTime_DateHourMinuteContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(EveryGrammarParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_DateHourMinuteContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_DateHourMinute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_DateHourMinute(this);
		}
	}
	public partial class DateTime_DateHourMinuteSecondsContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(EveryGrammarParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_DateHourMinuteSecondsContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_DateHourMinuteSeconds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_DateHourMinuteSeconds(this);
		}
	}
	public partial class DateTime_DateEntryContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(EveryGrammarParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_DateEntryContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_DateEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_DateEntry(this);
		}
	}
	public partial class DateTime_FullContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(EveryGrammarParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_FullContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_Full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_Full(this);
		}
	}
	public partial class DateTime_ExpressionContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(EveryGrammarParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_ExpressionContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_Expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_Expression(this);
		}
	}
	public partial class DateTime_DateHourContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(EveryGrammarParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_DateHourContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_DateHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_DateHour(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_termContext datetime_term() {
		Datetime_termContext _localctx = new Datetime_termContext(Context, State);
		EnterRule(_localctx, 32, RULE_datetime_term);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new DateTime_ExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 302;
				Match(DATETIME);
				State = 303;
				expression();
				State = 304;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new DateTime_DateEntryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				Match(DATETIME);
				State = 307;
				expression();
				State = 308;
				Match(KOMMA);
				State = 309;
				expression();
				State = 310;
				Match(KOMMA);
				State = 311;
				expression();
				State = 312;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new DateTime_DateHourContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 314;
				Match(DATETIME);
				State = 315;
				expression();
				State = 316;
				Match(KOMMA);
				State = 317;
				expression();
				State = 318;
				Match(KOMMA);
				State = 319;
				expression();
				State = 320;
				Match(KOMMA);
				State = 321;
				expression();
				State = 322;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				_localctx = new DateTime_DateHourMinuteContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 324;
				Match(DATETIME);
				State = 325;
				expression();
				State = 326;
				Match(KOMMA);
				State = 327;
				expression();
				State = 328;
				Match(KOMMA);
				State = 329;
				expression();
				State = 330;
				Match(KOMMA);
				State = 331;
				expression();
				State = 332;
				Match(KOMMA);
				State = 333;
				expression();
				State = 334;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 5:
				_localctx = new DateTime_DateHourMinuteSecondsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 336;
				Match(DATETIME);
				State = 337;
				expression();
				State = 338;
				Match(KOMMA);
				State = 339;
				expression();
				State = 340;
				Match(KOMMA);
				State = 341;
				expression();
				State = 342;
				Match(KOMMA);
				State = 343;
				expression();
				State = 344;
				Match(KOMMA);
				State = 345;
				expression();
				State = 346;
				Match(KOMMA);
				State = 347;
				expression();
				State = 348;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 6:
				_localctx = new DateTime_FullContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 350;
				Match(DATETIME);
				State = 351;
				expression();
				State = 352;
				Match(KOMMA);
				State = 353;
				expression();
				State = 354;
				Match(KOMMA);
				State = 355;
				expression();
				State = 356;
				Match(KOMMA);
				State = 357;
				expression();
				State = 358;
				Match(KOMMA);
				State = 359;
				expression();
				State = 360;
				Match(KOMMA);
				State = 361;
				expression();
				State = 362;
				Match(KOMMA);
				State = 363;
				expression();
				State = 364;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_slicing_termContext : ParserRuleContext {
		public Array_slicing_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_slicing_term; } }
	 
		public Array_slicing_termContext() { }
		public virtual void CopyFrom(Array_slicing_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArraySlicing_IndexingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_IndexingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_Indexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_Indexing(this);
		}
	}
	public partial class ArraySlicing_SlicingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EveryGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_SlicingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_Slicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_Slicing(this);
		}
	}
	public partial class ArraySlicing_StepSlicingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(EveryGrammarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(EveryGrammarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_StepSlicingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_StepSlicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_StepSlicing(this);
		}
	}

	[RuleVersion(0)]
	public Array_slicing_termContext array_slicing_term() {
		Array_slicing_termContext _localctx = new Array_slicing_termContext(Context, State);
		EnterRule(_localctx, 34, RULE_array_slicing_term);
		try {
			State = 386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new ArraySlicing_IndexingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 368;
				Match(EDGEBRACKETOPEN);
				State = 369;
				expression();
				State = 370;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new ArraySlicing_SlicingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 372;
				Match(EDGEBRACKETOPEN);
				State = 373;
				expression();
				State = 374;
				Match(COLON);
				State = 375;
				expression();
				State = 376;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new ArraySlicing_StepSlicingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 378;
				Match(EDGEBRACKETOPEN);
				State = 379;
				expression();
				State = 380;
				Match(COLON);
				State = 381;
				expression();
				State = 382;
				Match(COLON);
				State = 383;
				expression();
				State = 384;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_function_termContext : ParserRuleContext {
		public Default_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_function_term; } }
	 
		public Default_function_termContext() { }
		public virtual void CopyFrom(Default_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Function_ExceptContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Except() { return GetToken(EveryGrammarParser.Except, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_ExceptContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Except(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Except(this);
		}
	}
	public partial class Function_DifferenceContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENCE() { return GetToken(EveryGrammarParser.DIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_DifferenceContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Difference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Difference(this);
		}
	}
	public partial class Function_DuplicatesContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATES() { return GetToken(EveryGrammarParser.DUPLICATES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_DuplicatesContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Duplicates(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Duplicates(this);
		}
	}
	public partial class Function_ConcatContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(EveryGrammarParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(EveryGrammarParser.UNION, 0); }
		public Function_ConcatContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Concat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Concat(this);
		}
	}
	public partial class Function_IndexOfContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXOF() { return GetToken(EveryGrammarParser.INDEXOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_IndexOfContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_IndexOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_IndexOf(this);
		}
	}
	public partial class Function_DistincContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EveryGrammarParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_DistincContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Distinc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Distinc(this);
		}
	}
	public partial class Function_AnyContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(EveryGrammarParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_AnyContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Any(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Any(this);
		}
	}
	public partial class Function_SortContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SORT() { return GetToken(EveryGrammarParser.SORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_SortContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Sort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Sort(this);
		}
	}
	public partial class Function_CountContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(EveryGrammarParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_CountContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Count(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Count(this);
		}
	}
	public partial class Function_LowerContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWERCASE() { return GetToken(EveryGrammarParser.LOWERCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_LowerContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Lower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Lower(this);
		}
	}
	public partial class Function_ReverseContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(EveryGrammarParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_ReverseContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Reverse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Reverse(this);
		}
	}
	public partial class Function_UpperContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPERCASE() { return GetToken(EveryGrammarParser.UPPERCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_UpperContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Upper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Upper(this);
		}
	}

	[RuleVersion(0)]
	public Default_function_termContext default_function_term() {
		Default_function_termContext _localctx = new Default_function_termContext(Context, State);
		EnterRule(_localctx, 36, RULE_default_function_term);
		try {
			State = 448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONCAT:
				_localctx = new Function_ConcatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 388;
				Match(CONCAT);
				State = 389;
				expression();
				State = 390;
				Match(KOMMA);
				State = 391;
				expression();
				State = 392;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case COUNT:
				_localctx = new Function_CountContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				Match(COUNT);
				State = 395;
				expression();
				State = 396;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case DISTINCT:
				_localctx = new Function_DistincContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 398;
				Match(DISTINCT);
				State = 399;
				expression();
				State = 400;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case DIFFERENCE:
				_localctx = new Function_DifferenceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 402;
				Match(DIFFERENCE);
				State = 403;
				expression();
				State = 404;
				Match(KOMMA);
				State = 405;
				expression();
				State = 406;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case DUPLICATES:
				_localctx = new Function_DuplicatesContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 408;
				Match(DUPLICATES);
				State = 409;
				expression();
				State = 410;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case Except:
				_localctx = new Function_ExceptContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 412;
				Match(Except);
				State = 413;
				expression();
				State = 414;
				Match(KOMMA);
				State = 415;
				expression();
				State = 416;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case INDEXOF:
				_localctx = new Function_IndexOfContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 418;
				Match(INDEXOF);
				State = 419;
				expression();
				State = 420;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case LOWERCASE:
				_localctx = new Function_LowerContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 422;
				Match(LOWERCASE);
				State = 423;
				expression();
				State = 424;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case REVERSE:
				_localctx = new Function_ReverseContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 426;
				Match(REVERSE);
				State = 427;
				expression();
				State = 428;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case UNION:
				_localctx = new Function_ConcatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 430;
				Match(UNION);
				State = 431;
				expression();
				State = 432;
				Match(KOMMA);
				State = 433;
				expression();
				State = 434;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case UPPERCASE:
				_localctx = new Function_UpperContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 436;
				Match(UPPERCASE);
				State = 437;
				expression();
				State = 438;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case ANY:
				_localctx = new Function_AnyContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 440;
				Match(ANY);
				State = 441;
				expression();
				State = 442;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case SORT:
				_localctx = new Function_SortContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 444;
				Match(SORT);
				State = 445;
				expression();
				State = 446;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_function_termContext : ParserRuleContext {
		public Math_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_function_term; } }
	 
		public Math_function_termContext() { }
		public virtual void CopyFrom(Math_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Math_NormContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Norm() { return GetToken(EveryGrammarParser.Norm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_NormContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Norm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Norm(this);
		}
	}
	public partial class Math_CscHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSCH() { return GetToken(EveryGrammarParser.CSCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CscHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_CscH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_CscH(this);
		}
	}
	public partial class Math_ASinContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(EveryGrammarParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ASinContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ASin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ASin(this);
		}
	}
	public partial class Math_TanHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TANH() { return GetToken(EveryGrammarParser.TANH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_TanHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_TanH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_TanH(this);
		}
	}
	public partial class Math_EulerNormContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EulerNorm() { return GetToken(EveryGrammarParser.EulerNorm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_EulerNormContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_EulerNorm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_EulerNorm(this);
		}
	}
	public partial class Math_ASecContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASEC() { return GetToken(EveryGrammarParser.ASEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ASecContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ASec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ASec(this);
		}
	}
	public partial class Math_DerivativeContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DERIVATIVE() { return GetToken(EveryGrammarParser.DERIVATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_DerivativeContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Derivative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Derivative(this);
		}
	}
	public partial class Math_Round_Not_DecimalContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(EveryGrammarParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Round_Not_DecimalContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Round_Not_Decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Round_Not_Decimal(this);
		}
	}
	public partial class Math_DotProductContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotProduct() { return GetToken(EveryGrammarParser.DotProduct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_DotProductContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_DotProduct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_DotProduct(this);
		}
	}
	public partial class Math_ASinHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASINH() { return GetToken(EveryGrammarParser.ASINH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ASinHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ASinH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ASinH(this);
		}
	}
	public partial class Math_CotHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COTH() { return GetToken(EveryGrammarParser.COTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CotHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_CotH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_CotH(this);
		}
	}
	public partial class Math_Max_ArrayContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(EveryGrammarParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Max_ArrayContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Max_Array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Max_Array(this);
		}
	}
	public partial class Math_CosContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(EveryGrammarParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CosContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Cos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Cos(this);
		}
	}
	public partial class Math_CotContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COT() { return GetToken(EveryGrammarParser.COT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CotContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Cot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Cot(this);
		}
	}
	public partial class Math_ACscContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACSC() { return GetToken(EveryGrammarParser.ACSC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACscContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACsc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACsc(this);
		}
	}
	public partial class Math_TanContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(EveryGrammarParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_TanContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Tan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Tan(this);
		}
	}
	public partial class Math_BinomilaContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Binomial() { return GetToken(EveryGrammarParser.Binomial, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_BinomilaContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Binomila(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Binomila(this);
		}
	}
	public partial class Math_ExpContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(EveryGrammarParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ExpContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Exp(this);
		}
	}
	public partial class Math_FloorContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(EveryGrammarParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_FloorContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Floor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Floor(this);
		}
	}
	public partial class Math_RootContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(EveryGrammarParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_RootContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Root(this);
		}
	}
	public partial class Math_ACotHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOTH() { return GetToken(EveryGrammarParser.ACOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACotHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACotH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACotH(this);
		}
	}
	public partial class Math_CbrtContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRT() { return GetToken(EveryGrammarParser.CBRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CbrtContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Cbrt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Cbrt(this);
		}
	}
	public partial class Math_ACotContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOT() { return GetToken(EveryGrammarParser.ACOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACotContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACot(this);
		}
	}
	public partial class Math_ACosContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(EveryGrammarParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACosContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACos(this);
		}
	}
	public partial class Math_ATanHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATANH() { return GetToken(EveryGrammarParser.ATANH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ATanHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ATanH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ATanH(this);
		}
	}
	public partial class Math_CrossSumContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSSUM() { return GetToken(EveryGrammarParser.CROSSSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CrossSumContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_CrossSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_CrossSum(this);
		}
	}
	public partial class Math_GreatesCommonDivisorContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreatestCommonDivisor() { return GetToken(EveryGrammarParser.GreatestCommonDivisor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_GreatesCommonDivisorContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_GreatesCommonDivisor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_GreatesCommonDivisor(this);
		}
	}
	public partial class Math_LogContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(EveryGrammarParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_LogContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Log(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Log(this);
		}
	}
	public partial class Math_Round_DecimalContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(EveryGrammarParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Round_DecimalContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Round_Decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Round_Decimal(this);
		}
	}
	public partial class Math_SlopeContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOPE() { return GetToken(EveryGrammarParser.SLOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SlopeContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Slope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Slope(this);
		}
	}
	public partial class Math_PowerContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(EveryGrammarParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_PowerContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Power(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Power(this);
		}
	}
	public partial class Math_MaxNormContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxNorm() { return GetToken(EveryGrammarParser.MaxNorm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_MaxNormContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_MaxNorm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_MaxNorm(this);
		}
	}
	public partial class Math_ASecHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASECH() { return GetToken(EveryGrammarParser.ASECH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ASecHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ASecH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ASecH(this);
		}
	}
	public partial class Math_ACosHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOSH() { return GetToken(EveryGrammarParser.ACOSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACosHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACosH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACosH(this);
		}
	}
	public partial class Math_ClampContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLAMP() { return GetToken(EveryGrammarParser.CLAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ClampContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Clamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Clamp(this);
		}
	}
	public partial class Math_Min_ArrayContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(EveryGrammarParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Min_ArrayContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Min_Array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Min_Array(this);
		}
	}
	public partial class Math_SinHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINH() { return GetToken(EveryGrammarParser.SINH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SinHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_SinH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_SinH(this);
		}
	}
	public partial class Math_Log2Context : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG2() { return GetToken(EveryGrammarParser.LOG2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Log2Context(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Log2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Log2(this);
		}
	}
	public partial class Math_SecContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC() { return GetToken(EveryGrammarParser.SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SecContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Sec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Sec(this);
		}
	}
	public partial class Math_ATan2Context : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2() { return GetToken(EveryGrammarParser.ATAN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ATan2Context(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ATan2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ATan2(this);
		}
	}
	public partial class Math_ACscHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACSCH() { return GetToken(EveryGrammarParser.ACSCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACscHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACscH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACscH(this);
		}
	}
	public partial class Math_ATanContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(EveryGrammarParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ATanContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ATan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ATan(this);
		}
	}
	public partial class Math_TruncateContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(EveryGrammarParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_TruncateContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Truncate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Truncate(this);
		}
	}
	public partial class Math_Max_TwoContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(EveryGrammarParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Max_TwoContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Max_Two(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Max_Two(this);
		}
	}
	public partial class Math_LeastCommonMultipleContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeastCommonMultiple() { return GetToken(EveryGrammarParser.LeastCommonMultiple, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_LeastCommonMultipleContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_LeastCommonMultiple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_LeastCommonMultiple(this);
		}
	}
	public partial class Math_IntegrationContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGRATION() { return GetToken(EveryGrammarParser.INTEGRATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_IntegrationContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Integration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Integration(this);
		}
	}
	public partial class Math_SqrtContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(EveryGrammarParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SqrtContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Sqrt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Sqrt(this);
		}
	}
	public partial class Math_Min_TwoContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(EveryGrammarParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Min_TwoContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Min_Two(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Min_Two(this);
		}
	}
	public partial class Math_DistanceContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTANCE() { return GetToken(EveryGrammarParser.DISTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		public Math_DistanceContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Distance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Distance(this);
		}
	}
	public partial class Math_SinContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(EveryGrammarParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SinContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Sin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Sin(this);
		}
	}
	public partial class Math_CscContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSC() { return GetToken(EveryGrammarParser.CSC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CscContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Csc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Csc(this);
		}
	}
	public partial class Math_AbsContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(EveryGrammarParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_AbsContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Abs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Abs(this);
		}
	}
	public partial class Math_CosHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COSH() { return GetToken(EveryGrammarParser.COSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CosHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_CosH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_CosH(this);
		}
	}
	public partial class Math_CeillingContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILLING() { return GetToken(EveryGrammarParser.CEILLING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CeillingContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Ceilling(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Ceilling(this);
		}
	}
	public partial class Math_Log10Context : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(EveryGrammarParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Log10Context(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Log10(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Log10(this);
		}
	}
	public partial class Math_SecHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECH() { return GetToken(EveryGrammarParser.SECH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SecHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_SecH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_SecH(this);
		}
	}

	[RuleVersion(0)]
	public Math_function_termContext math_function_term() {
		Math_function_termContext _localctx = new Math_function_termContext(Context, State);
		EnterRule(_localctx, 38, RULE_math_function_term);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new Math_AbsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 450;
				Match(ABS);
				State = 451;
				expression();
				State = 452;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new Math_ACosContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 454;
				Match(ACOS);
				State = 455;
				expression();
				State = 456;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new Math_ACosHContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 458;
				Match(ACOSH);
				State = 459;
				expression();
				State = 460;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				_localctx = new Math_ASinContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 462;
				Match(ASIN);
				State = 463;
				expression();
				State = 464;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 5:
				_localctx = new Math_ASinHContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 466;
				Match(ASINH);
				State = 467;
				expression();
				State = 468;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 6:
				_localctx = new Math_ATanContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 470;
				Match(ATAN);
				State = 471;
				expression();
				State = 472;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 7:
				_localctx = new Math_ATan2Context(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 474;
				Match(ATAN2);
				State = 475;
				expression();
				State = 476;
				Match(KOMMA);
				State = 477;
				expression();
				State = 478;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 8:
				_localctx = new Math_ATanHContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 480;
				Match(ATANH);
				State = 481;
				expression();
				State = 482;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 9:
				_localctx = new Math_CbrtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 484;
				Match(CBRT);
				State = 485;
				expression();
				State = 486;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 10:
				_localctx = new Math_CosContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 488;
				Match(COS);
				State = 489;
				expression();
				State = 490;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 11:
				_localctx = new Math_CosHContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 492;
				Match(COSH);
				State = 493;
				expression();
				State = 494;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 12:
				_localctx = new Math_CeillingContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 496;
				Match(CEILLING);
				State = 497;
				expression();
				State = 498;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 13:
				_localctx = new Math_ClampContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 500;
				Match(CLAMP);
				State = 501;
				expression();
				State = 502;
				Match(KOMMA);
				State = 503;
				expression();
				State = 504;
				Match(KOMMA);
				State = 505;
				expression();
				State = 506;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 14:
				_localctx = new Math_CrossSumContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 508;
				Match(CROSSSUM);
				State = 509;
				expression();
				State = 510;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 15:
				_localctx = new Math_DerivativeContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 512;
				Match(DERIVATIVE);
				State = 513;
				expression();
				State = 514;
				Match(KOMMA);
				State = 515;
				expression();
				State = 516;
				Match(KOMMA);
				State = 517;
				expression();
				State = 518;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 16:
				_localctx = new Math_ExpContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 520;
				Match(EXP);
				State = 521;
				expression();
				State = 522;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 17:
				_localctx = new Math_FloorContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 524;
				Match(FLOOR);
				State = 525;
				expression();
				State = 526;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 18:
				_localctx = new Math_IntegrationContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 528;
				Match(INTEGRATION);
				State = 529;
				expression();
				State = 530;
				Match(KOMMA);
				State = 531;
				expression();
				State = 532;
				Match(KOMMA);
				State = 533;
				expression();
				State = 534;
				Match(KOMMA);
				State = 535;
				expression();
				State = 536;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 19:
				_localctx = new Math_LogContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 538;
				Match(LOG);
				State = 539;
				expression();
				State = 540;
				Match(KOMMA);
				State = 541;
				expression();
				State = 542;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 20:
				_localctx = new Math_Log2Context(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 544;
				Match(LOG2);
				State = 545;
				expression();
				State = 546;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 21:
				_localctx = new Math_Log10Context(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 548;
				Match(LOG10);
				State = 549;
				expression();
				State = 550;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 22:
				_localctx = new Math_Max_ArrayContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 552;
				Match(MAX);
				State = 553;
				expression();
				State = 554;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 23:
				_localctx = new Math_Max_TwoContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 556;
				Match(MAX);
				State = 557;
				expression();
				State = 558;
				Match(KOMMA);
				State = 559;
				expression();
				State = 560;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 24:
				_localctx = new Math_Min_ArrayContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 562;
				Match(MIN);
				State = 563;
				expression();
				State = 564;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 25:
				_localctx = new Math_Min_TwoContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 566;
				Match(MIN);
				State = 567;
				expression();
				State = 568;
				Match(KOMMA);
				State = 569;
				expression();
				State = 570;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 26:
				_localctx = new Math_PowerContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 572;
				Match(POWER);
				State = 573;
				expression();
				State = 574;
				Match(KOMMA);
				State = 575;
				expression();
				State = 576;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 27:
				_localctx = new Math_Round_Not_DecimalContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 578;
				Match(ROUND);
				State = 579;
				expression();
				State = 580;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 28:
				_localctx = new Math_Round_DecimalContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 582;
				Match(ROUND);
				State = 583;
				expression();
				State = 584;
				Match(KOMMA);
				State = 585;
				expression();
				State = 586;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 29:
				_localctx = new Math_RootContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 588;
				Match(ROOT);
				State = 589;
				expression();
				State = 590;
				Match(KOMMA);
				State = 591;
				expression();
				State = 592;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 30:
				_localctx = new Math_SinContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 594;
				Match(SIN);
				State = 595;
				expression();
				State = 596;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 31:
				_localctx = new Math_SinHContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 598;
				Match(SINH);
				State = 599;
				expression();
				State = 600;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 32:
				_localctx = new Math_SlopeContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 602;
				Match(SLOPE);
				State = 603;
				expression();
				State = 604;
				Match(KOMMA);
				State = 605;
				expression();
				State = 606;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 33:
				_localctx = new Math_SqrtContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 608;
				Match(SQRT);
				State = 609;
				expression();
				State = 610;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 34:
				_localctx = new Math_TanContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 612;
				Match(TAN);
				State = 613;
				expression();
				State = 614;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 35:
				_localctx = new Math_TanHContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 616;
				Match(TANH);
				State = 617;
				expression();
				State = 618;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 36:
				_localctx = new Math_TruncateContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 620;
				Match(TRUNCATE);
				State = 621;
				expression();
				State = 622;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 37:
				_localctx = new Math_DistanceContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 624;
				Match(DISTANCE);
				State = 625;
				expression();
				State = 626;
				Match(KOMMA);
				State = 627;
				expression();
				}
				break;
			case 38:
				_localctx = new Math_NormContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 629;
				Match(Norm);
				State = 630;
				expression();
				State = 631;
				Match(KOMMA);
				State = 632;
				expression();
				State = 633;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 39:
				_localctx = new Math_EulerNormContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 635;
				Match(EulerNorm);
				State = 636;
				expression();
				State = 637;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 40:
				_localctx = new Math_MaxNormContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 639;
				Match(MaxNorm);
				State = 640;
				expression();
				State = 641;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 41:
				_localctx = new Math_GreatesCommonDivisorContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 643;
				Match(GreatestCommonDivisor);
				State = 644;
				expression();
				State = 645;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 42:
				_localctx = new Math_LeastCommonMultipleContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 647;
				Match(LeastCommonMultiple);
				State = 648;
				expression();
				State = 649;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 43:
				_localctx = new Math_DotProductContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 651;
				Match(DotProduct);
				State = 652;
				expression();
				State = 653;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 44:
				_localctx = new Math_BinomilaContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 655;
				Match(Binomial);
				State = 656;
				expression();
				State = 657;
				Match(KOMMA);
				State = 658;
				expression();
				State = 659;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 45:
				_localctx = new Math_ACotContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 661;
				Match(ACOT);
				State = 662;
				expression();
				State = 663;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 46:
				_localctx = new Math_ACotHContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 665;
				Match(ACOTH);
				State = 666;
				expression();
				State = 667;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 47:
				_localctx = new Math_ACscContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 669;
				Match(ACSC);
				State = 670;
				expression();
				State = 671;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 48:
				_localctx = new Math_ACscHContext(_localctx);
				EnterOuterAlt(_localctx, 48);
				{
				State = 673;
				Match(ACSCH);
				State = 674;
				expression();
				State = 675;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 49:
				_localctx = new Math_ASecContext(_localctx);
				EnterOuterAlt(_localctx, 49);
				{
				State = 677;
				Match(ASEC);
				State = 678;
				expression();
				State = 679;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 50:
				_localctx = new Math_ASecHContext(_localctx);
				EnterOuterAlt(_localctx, 50);
				{
				State = 681;
				Match(ASECH);
				State = 682;
				expression();
				State = 683;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 51:
				_localctx = new Math_CotContext(_localctx);
				EnterOuterAlt(_localctx, 51);
				{
				State = 685;
				Match(COT);
				State = 686;
				expression();
				State = 687;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 52:
				_localctx = new Math_CotHContext(_localctx);
				EnterOuterAlt(_localctx, 52);
				{
				State = 689;
				Match(COTH);
				State = 690;
				expression();
				State = 691;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 53:
				_localctx = new Math_CscContext(_localctx);
				EnterOuterAlt(_localctx, 53);
				{
				State = 693;
				Match(CSC);
				State = 694;
				expression();
				State = 695;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 54:
				_localctx = new Math_CscHContext(_localctx);
				EnterOuterAlt(_localctx, 54);
				{
				State = 697;
				Match(CSCH);
				State = 698;
				expression();
				State = 699;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 55:
				_localctx = new Math_SecContext(_localctx);
				EnterOuterAlt(_localctx, 55);
				{
				State = 701;
				Match(SEC);
				State = 702;
				expression();
				State = 703;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 56:
				_localctx = new Math_SecHContext(_localctx);
				EnterOuterAlt(_localctx, 56);
				{
				State = 705;
				Match(SECH);
				State = 706;
				expression();
				State = 707;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statistic_math_function_termContext : ParserRuleContext {
		public Statistic_math_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statistic_math_function_term; } }
	 
		public Statistic_math_function_termContext() { }
		public virtual void CopyFrom(Statistic_math_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathStatistic_PearsonContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEARSON() { return GetToken(EveryGrammarParser.PEARSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_PearsonContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Pearson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Pearson(this);
		}
	}
	public partial class MathStatistic_MedianContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIAN() { return GetToken(EveryGrammarParser.MEDIAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_MedianContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Median(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Median(this);
		}
	}
	public partial class MathStatistic_VarianceContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(EveryGrammarParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_VarianceContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Variance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Variance(this);
		}
	}
	public partial class MathStatistic_CoVarianceContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COVARIANCE() { return GetToken(EveryGrammarParser.COVARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_CoVarianceContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_CoVariance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_CoVariance(this);
		}
	}
	public partial class MathStatistic_SpearmanContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPEARMAN() { return GetToken(EveryGrammarParser.SPEARMAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_SpearmanContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Spearman(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Spearman(this);
		}
	}
	public partial class MathStatistic_MeanContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEAN() { return GetToken(EveryGrammarParser.MEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_MeanContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Mean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Mean(this);
		}
	}
	public partial class MathStatistic_QuantilContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUANTIL() { return GetToken(EveryGrammarParser.QUANTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_QuantilContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Quantil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Quantil(this);
		}
	}
	public partial class MathStatistic_StDContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(EveryGrammarParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_StDContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_StD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_StD(this);
		}
	}

	[RuleVersion(0)]
	public Statistic_math_function_termContext statistic_math_function_term() {
		Statistic_math_function_termContext _localctx = new Statistic_math_function_termContext(Context, State);
		EnterRule(_localctx, 40, RULE_statistic_math_function_term);
		try {
			State = 755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				_localctx = new MathStatistic_CoVarianceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 711;
				Match(COVARIANCE);
				State = 712;
				expression();
				State = 713;
				Match(KOMMA);
				State = 714;
				expression();
				State = 715;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new MathStatistic_MeanContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 717;
				Match(MEAN);
				State = 718;
				expression();
				State = 719;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new MathStatistic_MedianContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 721;
				Match(MEDIAN);
				State = 722;
				expression();
				State = 723;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				_localctx = new MathStatistic_PearsonContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 725;
				Match(PEARSON);
				State = 726;
				expression();
				State = 727;
				Match(KOMMA);
				State = 728;
				expression();
				State = 729;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 5:
				_localctx = new MathStatistic_QuantilContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 731;
				Match(QUANTIL);
				State = 732;
				expression();
				State = 733;
				Match(KOMMA);
				State = 734;
				expression();
				State = 735;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 6:
				_localctx = new MathStatistic_SpearmanContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 737;
				Match(SPEARMAN);
				State = 738;
				expression();
				State = 739;
				Match(KOMMA);
				State = 740;
				expression();
				State = 741;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 7:
				_localctx = new MathStatistic_StDContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 743;
				Match(STD);
				State = 744;
				expression();
				State = 745;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 8:
				_localctx = new MathStatistic_MedianContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 747;
				Match(MEDIAN);
				State = 748;
				expression();
				State = 749;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 9:
				_localctx = new MathStatistic_VarianceContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 751;
				Match(VARIANCE);
				State = 752;
				expression();
				State = 753;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		public Expr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterExpr_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitExpr_args(this);
		}
	}

	[RuleVersion(0)]
	public Expr_argsContext expr_args() {
		Expr_argsContext _localctx = new Expr_argsContext(Context, State);
		EnterRule(_localctx, 42, RULE_expr_args);
		try {
			State = 762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 757;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 758;
				expression();
				State = 759;
				Match(KOMMA);
				State = 760;
				expr_args();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
	 
		public Array_exprContext() { }
		public virtual void CopyFrom(Array_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayCreationContext : Array_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArrayCreationContext(Array_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArrayCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArrayCreation(this);
		}
	}
	public partial class ArrayCreation_EmptyContext : Array_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArrayCreation_EmptyContext(Array_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArrayCreation_Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArrayCreation_Empty(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_array_expr);
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new ArrayCreation_EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 764;
				Match(EDGEBRACKETOPEN);
				State = 765;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new ArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 766;
				Match(EDGEBRACKETOPEN);
				State = 767;
				expr_args();
				State = 768;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return bool_and_term_sempred((Bool_and_termContext)_localctx, predIndex);
		case 7: return equality_sempred((EqualityContext)_localctx, predIndex);
		case 8: return check_sempred((CheckContext)_localctx, predIndex);
		case 9: return bit_or_term_sempred((Bit_or_termContext)_localctx, predIndex);
		case 10: return bit_and_term_sempred((Bit_and_termContext)_localctx, predIndex);
		case 11: return line_term_sempred((Line_termContext)_localctx, predIndex);
		case 12: return point_term_sempred((Point_termContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bool_and_term_sempred(Bool_and_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_sempred(EqualityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_or_term_sempred(Bit_or_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_and_term_sempred(Bit_and_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool line_term_sempred(Line_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool point_term_sempred(Point_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 7);
		case 16: return Precpred(Context, 6);
		case 17: return Precpred(Context, 5);
		case 18: return Precpred(Context, 4);
		case 19: return Precpred(Context, 3);
		case 20: return Precpred(Context, 2);
		case 21: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x86', '\x307', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x34', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x45', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'L', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'S', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'Z', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\x62', '\n', '\b', '\f', '\b', '\xE', '\b', '\x65', '\v', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '}', '\n', '\t', '\f', '\t', '\xE', '\t', '\x80', '\v', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x91', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x94', '\v', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x9C', '\n', '\v', '\f', '\v', '\xE', '\v', '\x9F', '\v', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\xA7', '\n', '\f', '\f', '\f', '\xE', '\f', '\xAA', 
		'\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\xB5', '\n', '\r', '\f', '\r', '\xE', '\r', '\xB8', '\v', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xD2', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xD5', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xF3', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x105', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x12F', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x171', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x185', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x1C3', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x2C8', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x2F6', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x2FD', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x305', '\n', '\x18', '\x3', '\x18', 
		'\x2', '\t', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x19', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x2', '\x2', '\x2', '\x37F', '\x2', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x38', '\x3', '\x2', '\x2', '\x2', '\x6', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'K', '\x3', '\x2', '\x2', '\x2', '\n', 'R', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'Y', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x10', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x81', '\x3', '\x2', '\x2', '\x2', '\x14', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x104', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x12E', '\x3', '\x2', '\x2', '\x2', '\"', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x1C2', '\x3', '\x2', '\x2', '\x2', '(', '\x2C7', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x2F5', '\x3', '\x2', '\x2', '\x2', ',', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x304', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x31', '\x5', '\x4', '\x3', '\x2', '\x31', '\x32', '\a', '\x1F', 
		'\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x3', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', '\x6', '\x4', '\x2', 
		'\x39', '\x5', '\x3', '\x2', '\x2', '\x2', ':', '\x45', '\x5', '\b', '\x5', 
		'\x2', ';', '<', '\x5', '\b', '\x5', '\x2', '<', '=', '\x5', '$', '\x13', 
		'\x2', '=', '\x45', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x5', '\b', 
		'\x5', '\x2', '?', '@', '\a', '\x19', '\x2', '\x2', '@', '\x41', '\x5', 
		'\b', '\x5', '\x2', '\x41', '\x42', '\a', '\x18', '\x2', '\x2', '\x42', 
		'\x43', '\x5', '\b', '\x5', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x44', ':', '\x3', '\x2', '\x2', '\x2', '\x44', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '>', '\x3', '\x2', '\x2', '\x2', '\x45', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'L', '\x5', '\n', '\x6', '\x2', 'G', 'H', 
		'\a', '#', '\x2', '\x2', 'H', 'I', '\x5', '\x6', '\x4', '\x2', 'I', 'J', 
		'\a', '$', '\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 'K', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'G', '\x3', '\x2', '\x2', '\x2', 'L', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'M', 'S', '\x5', '\f', '\a', '\x2', 
		'N', 'O', '\x5', '\f', '\a', '\x2', 'O', 'P', '\a', '\xF', '\x2', '\x2', 
		'P', 'Q', '\x5', '\f', '\a', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
		'R', 'M', '\x3', '\x2', '\x2', '\x2', 'R', 'N', '\x3', '\x2', '\x2', '\x2', 
		'S', '\v', '\x3', '\x2', '\x2', '\x2', 'T', 'Z', '\x5', '\xE', '\b', '\x2', 
		'U', 'V', '\x5', '\xE', '\b', '\x2', 'V', 'W', '\a', '\t', '\x2', '\x2', 
		'W', 'X', '\x5', '\xE', '\b', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'T', '\x3', '\x2', '\x2', '\x2', 'Y', 'U', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\r', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\b', '\b', '\x1', '\x2', 
		'\\', ']', '\x5', '\x10', '\t', '\x2', ']', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\f', '\x3', '\x2', '\x2', '_', '`', '\a', '\x10', '\x2', 
		'\x2', '`', '\x62', '\x5', '\x10', '\t', '\x2', '\x61', '^', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\xF', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\b', '\t', '\x1', '\x2', 'g', 'h', '\x5', 
		'\x12', '\n', '\x2', 'h', '~', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\f', 
		'\b', '\x2', '\x2', 'j', 'k', '\a', '\n', '\x2', '\x2', 'k', '}', '\x5', 
		'\x12', '\n', '\x2', 'l', 'm', '\f', '\a', '\x2', '\x2', 'm', 'n', '\a', 
		'\r', '\x2', '\x2', 'n', '}', '\x5', '\x12', '\n', '\x2', 'o', 'p', '\f', 
		'\x6', '\x2', '\x2', 'p', 'q', '\a', '\v', '\x2', '\x2', 'q', '}', '\x5', 
		'\x12', '\n', '\x2', 'r', 's', '\f', '\x5', '\x2', '\x2', 's', 't', '\a', 
		'\xE', '\x2', '\x2', 't', '}', '\x5', '\x12', '\n', '\x2', 'u', 'v', '\f', 
		'\x4', '\x2', '\x2', 'v', 'w', '\a', '\x1D', '\x2', '\x2', 'w', '}', '\x5', 
		'\x12', '\n', '\x2', 'x', 'y', '\f', '\x3', '\x2', '\x2', 'y', 'z', '\a', 
		'\f', '\x2', '\x2', 'z', '{', '\a', '\x1D', '\x2', '\x2', '{', '}', '\x5', 
		'\x12', '\n', '\x2', '|', 'i', '\x3', '\x2', '\x2', '\x2', '|', 'l', '\x3', 
		'\x2', '\x2', '\x2', '|', 'o', '\x3', '\x2', '\x2', '\x2', '|', 'r', '\x3', 
		'\x2', '\x2', '\x2', '|', 'u', '\x3', '\x2', '\x2', '\x2', '|', 'x', '\x3', 
		'\x2', '\x2', '\x2', '}', '\x80', '\x3', '\x2', '\x2', '\x2', '~', '|', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\b', '\n', '\x1', '\x2', '\x82', '\x83', '\x5', 
		'\x14', '\v', '\x2', '\x83', '\x92', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\f', '\x6', '\x2', '\x2', '\x85', '\x86', '\a', '\x15', '\x2', 
		'\x2', '\x86', '\x91', '\x5', '\x14', '\v', '\x2', '\x87', '\x88', '\f', 
		'\x5', '\x2', '\x2', '\x88', '\x89', '\a', '\x13', '\x2', '\x2', '\x89', 
		'\x91', '\x5', '\x14', '\v', '\x2', '\x8A', '\x8B', '\f', '\x4', '\x2', 
		'\x2', '\x8B', '\x8C', '\a', '\x16', '\x2', '\x2', '\x8C', '\x91', '\x5', 
		'\x14', '\v', '\x2', '\x8D', '\x8E', '\f', '\x3', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '\x14', '\x2', '\x2', '\x8F', '\x91', '\x5', '\x14', '\v', 
		'\x2', '\x90', '\x84', '\x3', '\x2', '\x2', '\x2', '\x90', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x13', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\b', '\v', '\x1', 
		'\x2', '\x96', '\x97', '\x5', '\x16', '\f', '\x2', '\x97', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\f', '\x3', '\x2', '\x2', '\x99', 
		'\x9A', '\a', '\x11', '\x2', '\x2', '\x9A', '\x9C', '\x5', '\x16', '\f', 
		'\x2', '\x9B', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\b', 
		'\f', '\x1', '\x2', '\xA1', '\xA2', '\x5', '\x18', '\r', '\x2', '\xA2', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\f', '\x3', '\x2', 
		'\x2', '\xA4', '\xA5', '\a', '\x12', '\x2', '\x2', '\xA5', '\xA7', '\x5', 
		'\x18', '\r', '\x2', '\xA6', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\b', '\r', '\x1', '\x2', '\xAC', '\xAD', '\x5', '\x1A', '\xE', 
		'\x2', '\xAD', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\f', 
		'\x4', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x3', '\x2', '\x2', '\xB0', 
		'\xB5', '\x5', '\x1A', '\xE', '\x2', '\xB1', '\xB2', '\f', '\x3', '\x2', 
		'\x2', '\xB2', '\xB3', '\a', '\x4', '\x2', '\x2', '\xB3', '\xB5', '\x5', 
		'\x1A', '\xE', '\x2', '\xB4', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\b', '\xE', '\x1', 
		'\x2', '\xBA', '\xBB', '\x5', '\x1C', '\xF', '\x2', '\xBB', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\f', '\t', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', '\x5', '\x2', '\x2', '\xBE', '\xD2', '\x5', '\x1C', '\xF', 
		'\x2', '\xBF', '\xC0', '\f', '\b', '\x2', '\x2', '\xC0', '\xC1', '\a', 
		'\b', '\x2', '\x2', '\xC1', '\xD2', '\x5', '\x1C', '\xF', '\x2', '\xC2', 
		'\xC3', '\f', '\a', '\x2', '\x2', '\xC3', '\xC4', '\a', '\a', '\x2', '\x2', 
		'\xC4', '\xD2', '\x5', '\x1C', '\xF', '\x2', '\xC5', '\xC6', '\f', '\x6', 
		'\x2', '\x2', '\xC6', '\xC7', '\a', '\x1B', '\x2', '\x2', '\xC7', '\xD2', 
		'\x5', '\x1C', '\xF', '\x2', '\xC8', '\xC9', '\f', '\x5', '\x2', '\x2', 
		'\xC9', '\xCA', '\a', '\x1C', '\x2', '\x2', '\xCA', '\xD2', '\x5', '\x1C', 
		'\xF', '\x2', '\xCB', '\xCC', '\f', '\x4', '\x2', '\x2', '\xCC', '\xCD', 
		'\a', '\x6', '\x2', '\x2', '\xCD', '\xD2', '\x5', '\x1C', '\xF', '\x2', 
		'\xCE', '\xCF', '\f', '\x3', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x1A', 
		'\x2', '\x2', '\xD0', '\xD2', '\x5', '\x1C', '\xF', '\x2', '\xD1', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD7', '\a', '\f', '\x2', '\x2', '\xD7', '\xF3', '\x5', '\x1C', 
		'\xF', '\x2', '\xD8', '\xD9', '\a', '\x4', '\x2', '\x2', '\xD9', '\xF3', 
		'\x5', '\x1C', '\xF', '\x2', '\xDA', '\xDB', '\a', '\x3', '\x2', '\x2', 
		'\xDB', '\xF3', '\x5', '\x1C', '\xF', '\x2', '\xDC', '\xDD', '\a', '\x17', 
		'\x2', '\x2', '\xDD', '\xF3', '\x5', '\x1C', '\xF', '\x2', '\xDE', '\xDF', 
		'\a', '\x1E', '\x2', '\x2', '\xDF', '\xF3', '\x5', '\x1C', '\xF', '\x2', 
		'\xE0', '\xE1', '\a', '#', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x4', 
		'\x3', '\x2', '\xE2', '\xE3', '\a', '$', '\x2', '\x2', '\xE3', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xF3', '\a', '!', '\x2', '\x2', '\xE5', 
		'\xF3', '\a', '\"', '\x2', '\x2', '\xE6', '\xF3', '\a', '+', '\x2', '\x2', 
		'\xE7', '\xF3', '\a', '\'', '\x2', '\x2', '\xE8', '\xF3', '\a', ')', '\x2', 
		'\x2', '\xE9', '\xF3', '\a', '*', '\x2', '\x2', '\xEA', '\xF3', '\a', 
		'(', '\x2', '\x2', '\xEB', '\xF3', '\x5', '\"', '\x12', '\x2', '\xEC', 
		'\xF3', '\x5', '.', '\x18', '\x2', '\xED', '\xF3', '\x5', '&', '\x14', 
		'\x2', '\xEE', '\xF3', '\x5', ' ', '\x11', '\x2', '\xEF', '\xF3', '\x5', 
		'(', '\x15', '\x2', '\xF0', '\xF3', '\x5', '\x1E', '\x10', '\x2', '\xF1', 
		'\xF3', '\x5', '*', '\x16', '\x2', '\xF2', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\a', '\x84', '\x2', '\x2', '\xF5', '\x105', '\a', 
		'$', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x84', '\x2', '\x2', '\xF7', 
		'\xF8', '\x5', '\x4', '\x3', '\x2', '\xF8', '\xF9', '\a', '$', '\x2', 
		'\x2', '\xF9', '\x105', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', 
		'\x85', '\x2', '\x2', '\xFB', '\x105', '\a', '$', '\x2', '\x2', '\xFC', 
		'\xFD', '\a', '\x85', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\x4', '\x3', 
		'\x2', '\xFE', '\xFF', '\a', '$', '\x2', '\x2', '\xFF', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\a', '\x86', '\x2', '\x2', '\x101', 
		'\x102', '\x5', '\x4', '\x3', '\x2', '\x102', '\x103', '\a', '$', '\x2', 
		'\x2', '\x103', '\x105', '\x3', '\x2', '\x2', '\x2', '\x104', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x104', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\x104', '\x100', '\x3', '\x2', '\x2', '\x2', '\x105', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\a', '}', '\x2', '\x2', 
		'\x107', '\x108', '\x5', ',', '\x17', '\x2', '\x108', '\x109', '\a', '$', 
		'\x2', '\x2', '\x109', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\a', '|', '\x2', '\x2', '\x10B', '\x10C', '\x5', '\x4', '\x3', '\x2', 
		'\x10C', '\x10D', '\a', '$', '\x2', '\x2', '\x10D', '\x12F', '\x3', '\x2', 
		'\x2', '\x2', '\x10E', '\x10F', '\a', 'z', '\x2', '\x2', '\x10F', '\x110', 
		'\x5', '\x4', '\x3', '\x2', '\x110', '\x111', '\a', '$', '\x2', '\x2', 
		'\x111', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\a', 
		'{', '\x2', '\x2', '\x113', '\x114', '\x5', '\x4', '\x3', '\x2', '\x114', 
		'\x115', '\a', '$', '\x2', '\x2', '\x115', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\a', '~', '\x2', '\x2', '\x117', '\x118', '\x5', 
		'\x4', '\x3', '\x2', '\x118', '\x119', '\a', '$', '\x2', '\x2', '\x119', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\a', '\x7F', '\x2', 
		'\x2', '\x11B', '\x11C', '\x5', '\x4', '\x3', '\x2', '\x11C', '\x11D', 
		'\a', '$', '\x2', '\x2', '\x11D', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x11F', '\a', '\x80', '\x2', '\x2', '\x11F', '\x120', '\x5', 
		'\x4', '\x3', '\x2', '\x120', '\x121', '\a', '$', '\x2', '\x2', '\x121', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\a', '\x81', '\x2', 
		'\x2', '\x123', '\x124', '\x5', '\x4', '\x3', '\x2', '\x124', '\x125', 
		'\a', '$', '\x2', '\x2', '\x125', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x127', '\a', '\x82', '\x2', '\x2', '\x127', '\x128', '\x5', 
		'\x4', '\x3', '\x2', '\x128', '\x129', '\a', '$', '\x2', '\x2', '\x129', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\a', '\x83', '\x2', 
		'\x2', '\x12B', '\x12C', '\x5', '\x4', '\x3', '\x2', '\x12C', '\x12D', 
		'\a', '$', '\x2', '\x2', '\x12D', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x106', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x112', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x126', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '!', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x131', '\a', 'q', '\x2', '\x2', '\x131', '\x132', '\x5', '\x4', '\x3', 
		'\x2', '\x132', '\x133', '\a', '$', '\x2', '\x2', '\x133', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x135', '\a', 'q', '\x2', '\x2', '\x135', 
		'\x136', '\x5', '\x4', '\x3', '\x2', '\x136', '\x137', '\a', ' ', '\x2', 
		'\x2', '\x137', '\x138', '\x5', '\x4', '\x3', '\x2', '\x138', '\x139', 
		'\a', ' ', '\x2', '\x2', '\x139', '\x13A', '\x5', '\x4', '\x3', '\x2', 
		'\x13A', '\x13B', '\a', '$', '\x2', '\x2', '\x13B', '\x171', '\x3', '\x2', 
		'\x2', '\x2', '\x13C', '\x13D', '\a', 'q', '\x2', '\x2', '\x13D', '\x13E', 
		'\x5', '\x4', '\x3', '\x2', '\x13E', '\x13F', '\a', ' ', '\x2', '\x2', 
		'\x13F', '\x140', '\x5', '\x4', '\x3', '\x2', '\x140', '\x141', '\a', 
		' ', '\x2', '\x2', '\x141', '\x142', '\x5', '\x4', '\x3', '\x2', '\x142', 
		'\x143', '\a', ' ', '\x2', '\x2', '\x143', '\x144', '\x5', '\x4', '\x3', 
		'\x2', '\x144', '\x145', '\a', '$', '\x2', '\x2', '\x145', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x147', '\a', 'q', '\x2', '\x2', '\x147', 
		'\x148', '\x5', '\x4', '\x3', '\x2', '\x148', '\x149', '\a', ' ', '\x2', 
		'\x2', '\x149', '\x14A', '\x5', '\x4', '\x3', '\x2', '\x14A', '\x14B', 
		'\a', ' ', '\x2', '\x2', '\x14B', '\x14C', '\x5', '\x4', '\x3', '\x2', 
		'\x14C', '\x14D', '\a', ' ', '\x2', '\x2', '\x14D', '\x14E', '\x5', '\x4', 
		'\x3', '\x2', '\x14E', '\x14F', '\a', ' ', '\x2', '\x2', '\x14F', '\x150', 
		'\x5', '\x4', '\x3', '\x2', '\x150', '\x151', '\a', '$', '\x2', '\x2', 
		'\x151', '\x171', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\a', 
		'q', '\x2', '\x2', '\x153', '\x154', '\x5', '\x4', '\x3', '\x2', '\x154', 
		'\x155', '\a', ' ', '\x2', '\x2', '\x155', '\x156', '\x5', '\x4', '\x3', 
		'\x2', '\x156', '\x157', '\a', ' ', '\x2', '\x2', '\x157', '\x158', '\x5', 
		'\x4', '\x3', '\x2', '\x158', '\x159', '\a', ' ', '\x2', '\x2', '\x159', 
		'\x15A', '\x5', '\x4', '\x3', '\x2', '\x15A', '\x15B', '\a', ' ', '\x2', 
		'\x2', '\x15B', '\x15C', '\x5', '\x4', '\x3', '\x2', '\x15C', '\x15D', 
		'\a', ' ', '\x2', '\x2', '\x15D', '\x15E', '\x5', '\x4', '\x3', '\x2', 
		'\x15E', '\x15F', '\a', '$', '\x2', '\x2', '\x15F', '\x171', '\x3', '\x2', 
		'\x2', '\x2', '\x160', '\x161', '\a', 'q', '\x2', '\x2', '\x161', '\x162', 
		'\x5', '\x4', '\x3', '\x2', '\x162', '\x163', '\a', ' ', '\x2', '\x2', 
		'\x163', '\x164', '\x5', '\x4', '\x3', '\x2', '\x164', '\x165', '\a', 
		' ', '\x2', '\x2', '\x165', '\x166', '\x5', '\x4', '\x3', '\x2', '\x166', 
		'\x167', '\a', ' ', '\x2', '\x2', '\x167', '\x168', '\x5', '\x4', '\x3', 
		'\x2', '\x168', '\x169', '\a', ' ', '\x2', '\x2', '\x169', '\x16A', '\x5', 
		'\x4', '\x3', '\x2', '\x16A', '\x16B', '\a', ' ', '\x2', '\x2', '\x16B', 
		'\x16C', '\x5', '\x4', '\x3', '\x2', '\x16C', '\x16D', '\a', ' ', '\x2', 
		'\x2', '\x16D', '\x16E', '\x5', '\x4', '\x3', '\x2', '\x16E', '\x16F', 
		'\a', '$', '\x2', '\x2', '\x16F', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x130', '\x3', '\x2', '\x2', '\x2', '\x170', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x170', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x160', '\x3', '\x2', '\x2', '\x2', '\x171', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x173', '\a', '%', '\x2', '\x2', '\x173', 
		'\x174', '\x5', '\x4', '\x3', '\x2', '\x174', '\x175', '\a', '&', '\x2', 
		'\x2', '\x175', '\x185', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', 
		'\a', '%', '\x2', '\x2', '\x177', '\x178', '\x5', '\x4', '\x3', '\x2', 
		'\x178', '\x179', '\a', '\x18', '\x2', '\x2', '\x179', '\x17A', '\x5', 
		'\x4', '\x3', '\x2', '\x17A', '\x17B', '\a', '&', '\x2', '\x2', '\x17B', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\a', '%', '\x2', 
		'\x2', '\x17D', '\x17E', '\x5', '\x4', '\x3', '\x2', '\x17E', '\x17F', 
		'\a', '\x18', '\x2', '\x2', '\x17F', '\x180', '\x5', '\x4', '\x3', '\x2', 
		'\x180', '\x181', '\a', '\x18', '\x2', '\x2', '\x181', '\x182', '\x5', 
		'\x4', '\x3', '\x2', '\x182', '\x183', '\a', '&', '\x2', '\x2', '\x183', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x184', '\x172', '\x3', '\x2', '\x2', 
		'\x2', '\x184', '\x176', '\x3', '\x2', '\x2', '\x2', '\x184', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\a', 'l', '\x2', '\x2', '\x187', '\x188', '\x5', '\x4', 
		'\x3', '\x2', '\x188', '\x189', '\a', ' ', '\x2', '\x2', '\x189', '\x18A', 
		'\x5', '\x4', '\x3', '\x2', '\x18A', '\x18B', '\a', '$', '\x2', '\x2', 
		'\x18B', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\a', 
		'm', '\x2', '\x2', '\x18D', '\x18E', '\x5', '\x4', '\x3', '\x2', '\x18E', 
		'\x18F', '\a', '$', '\x2', '\x2', '\x18F', '\x1C3', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x191', '\a', 'n', '\x2', '\x2', '\x191', '\x192', '\x5', 
		'\x4', '\x3', '\x2', '\x192', '\x193', '\a', '$', '\x2', '\x2', '\x193', 
		'\x1C3', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\a', 'o', '\x2', 
		'\x2', '\x195', '\x196', '\x5', '\x4', '\x3', '\x2', '\x196', '\x197', 
		'\a', ' ', '\x2', '\x2', '\x197', '\x198', '\x5', '\x4', '\x3', '\x2', 
		'\x198', '\x199', '\a', '$', '\x2', '\x2', '\x199', '\x1C3', '\x3', '\x2', 
		'\x2', '\x2', '\x19A', '\x19B', '\a', 'p', '\x2', '\x2', '\x19B', '\x19C', 
		'\x5', '\x4', '\x3', '\x2', '\x19C', '\x19D', '\a', '$', '\x2', '\x2', 
		'\x19D', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', 
		'r', '\x2', '\x2', '\x19F', '\x1A0', '\x5', '\x4', '\x3', '\x2', '\x1A0', 
		'\x1A1', '\a', ' ', '\x2', '\x2', '\x1A1', '\x1A2', '\x5', '\x4', '\x3', 
		'\x2', '\x1A2', '\x1A3', '\a', '$', '\x2', '\x2', '\x1A3', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\a', 's', '\x2', '\x2', '\x1A5', 
		'\x1A6', '\x5', '\x4', '\x3', '\x2', '\x1A6', '\x1A7', '\a', '$', '\x2', 
		'\x2', '\x1A7', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', 
		'\a', 't', '\x2', '\x2', '\x1A9', '\x1AA', '\x5', '\x4', '\x3', '\x2', 
		'\x1AA', '\x1AB', '\a', '$', '\x2', '\x2', '\x1AB', '\x1C3', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC', '\x1AD', '\a', 'u', '\x2', '\x2', '\x1AD', '\x1AE', 
		'\x5', '\x4', '\x3', '\x2', '\x1AE', '\x1AF', '\a', '$', '\x2', '\x2', 
		'\x1AF', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\a', 
		'v', '\x2', '\x2', '\x1B1', '\x1B2', '\x5', '\x4', '\x3', '\x2', '\x1B2', 
		'\x1B3', '\a', ' ', '\x2', '\x2', '\x1B3', '\x1B4', '\x5', '\x4', '\x3', 
		'\x2', '\x1B4', '\x1B5', '\a', '$', '\x2', '\x2', '\x1B5', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\a', 'w', '\x2', '\x2', '\x1B7', 
		'\x1B8', '\x5', '\x4', '\x3', '\x2', '\x1B8', '\x1B9', '\a', '$', '\x2', 
		'\x2', '\x1B9', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', 
		'\a', 'x', '\x2', '\x2', '\x1BB', '\x1BC', '\x5', '\x4', '\x3', '\x2', 
		'\x1BC', '\x1BD', '\a', '$', '\x2', '\x2', '\x1BD', '\x1C3', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE', '\x1BF', '\a', 'y', '\x2', '\x2', '\x1BF', '\x1C0', 
		'\x5', '\x4', '\x3', '\x2', '\x1C0', '\x1C1', '\a', '$', '\x2', '\x2', 
		'\x1C1', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1BA', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\a', '/', '\x2', '\x2', '\x1C5', 
		'\x1C6', '\x5', '\x4', '\x3', '\x2', '\x1C6', '\x1C7', '\a', '$', '\x2', 
		'\x2', '\x1C7', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', 
		'\a', '\x30', '\x2', '\x2', '\x1C9', '\x1CA', '\x5', '\x4', '\x3', '\x2', 
		'\x1CA', '\x1CB', '\a', '$', '\x2', '\x2', '\x1CB', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x1CC', '\x1CD', '\a', '\x31', '\x2', '\x2', '\x1CD', '\x1CE', 
		'\x5', '\x4', '\x3', '\x2', '\x1CE', '\x1CF', '\a', '$', '\x2', '\x2', 
		'\x1CF', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\a', 
		'\x32', '\x2', '\x2', '\x1D1', '\x1D2', '\x5', '\x4', '\x3', '\x2', '\x1D2', 
		'\x1D3', '\a', '$', '\x2', '\x2', '\x1D3', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D5', '\a', '\x33', '\x2', '\x2', '\x1D5', '\x1D6', 
		'\x5', '\x4', '\x3', '\x2', '\x1D6', '\x1D7', '\a', '$', '\x2', '\x2', 
		'\x1D7', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\a', 
		'\x34', '\x2', '\x2', '\x1D9', '\x1DA', '\x5', '\x4', '\x3', '\x2', '\x1DA', 
		'\x1DB', '\a', '$', '\x2', '\x2', '\x1DB', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1DD', '\a', '\x35', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\x5', '\x4', '\x3', '\x2', '\x1DE', '\x1DF', '\a', ' ', '\x2', '\x2', 
		'\x1DF', '\x1E0', '\x5', '\x4', '\x3', '\x2', '\x1E0', '\x1E1', '\a', 
		'$', '\x2', '\x2', '\x1E1', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x1E3', '\a', '\x36', '\x2', '\x2', '\x1E3', '\x1E4', '\x5', '\x4', '\x3', 
		'\x2', '\x1E4', '\x1E5', '\a', '$', '\x2', '\x2', '\x1E5', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\a', '\x37', '\x2', '\x2', '\x1E7', 
		'\x1E8', '\x5', '\x4', '\x3', '\x2', '\x1E8', '\x1E9', '\a', '$', '\x2', 
		'\x2', '\x1E9', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', 
		'\a', '\x38', '\x2', '\x2', '\x1EB', '\x1EC', '\x5', '\x4', '\x3', '\x2', 
		'\x1EC', '\x1ED', '\a', '$', '\x2', '\x2', '\x1ED', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE', '\x1EF', '\a', '\x39', '\x2', '\x2', '\x1EF', '\x1F0', 
		'\x5', '\x4', '\x3', '\x2', '\x1F0', '\x1F1', '\a', '$', '\x2', '\x2', 
		'\x1F1', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\a', 
		':', '\x2', '\x2', '\x1F3', '\x1F4', '\x5', '\x4', '\x3', '\x2', '\x1F4', 
		'\x1F5', '\a', '$', '\x2', '\x2', '\x1F5', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1F6', '\x1F7', '\a', ';', '\x2', '\x2', '\x1F7', '\x1F8', '\x5', 
		'\x4', '\x3', '\x2', '\x1F8', '\x1F9', '\a', ' ', '\x2', '\x2', '\x1F9', 
		'\x1FA', '\x5', '\x4', '\x3', '\x2', '\x1FA', '\x1FB', '\a', ' ', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\x5', '\x4', '\x3', '\x2', '\x1FC', '\x1FD', 
		'\a', '$', '\x2', '\x2', '\x1FD', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\a', '<', '\x2', '\x2', '\x1FF', '\x200', '\x5', '\x4', 
		'\x3', '\x2', '\x200', '\x201', '\a', '$', '\x2', '\x2', '\x201', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\a', '=', '\x2', '\x2', 
		'\x203', '\x204', '\x5', '\x4', '\x3', '\x2', '\x204', '\x205', '\a', 
		' ', '\x2', '\x2', '\x205', '\x206', '\x5', '\x4', '\x3', '\x2', '\x206', 
		'\x207', '\a', ' ', '\x2', '\x2', '\x207', '\x208', '\x5', '\x4', '\x3', 
		'\x2', '\x208', '\x209', '\a', '$', '\x2', '\x2', '\x209', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x20A', '\x20B', '\a', '>', '\x2', '\x2', '\x20B', 
		'\x20C', '\x5', '\x4', '\x3', '\x2', '\x20C', '\x20D', '\a', '$', '\x2', 
		'\x2', '\x20D', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', 
		'\a', '?', '\x2', '\x2', '\x20F', '\x210', '\x5', '\x4', '\x3', '\x2', 
		'\x210', '\x211', '\a', '$', '\x2', '\x2', '\x211', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x212', '\x213', '\a', '@', '\x2', '\x2', '\x213', '\x214', 
		'\x5', '\x4', '\x3', '\x2', '\x214', '\x215', '\a', ' ', '\x2', '\x2', 
		'\x215', '\x216', '\x5', '\x4', '\x3', '\x2', '\x216', '\x217', '\a', 
		' ', '\x2', '\x2', '\x217', '\x218', '\x5', '\x4', '\x3', '\x2', '\x218', 
		'\x219', '\a', ' ', '\x2', '\x2', '\x219', '\x21A', '\x5', '\x4', '\x3', 
		'\x2', '\x21A', '\x21B', '\a', '$', '\x2', '\x2', '\x21B', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x21C', '\x21D', '\a', '\x41', '\x2', '\x2', '\x21D', 
		'\x21E', '\x5', '\x4', '\x3', '\x2', '\x21E', '\x21F', '\a', ' ', '\x2', 
		'\x2', '\x21F', '\x220', '\x5', '\x4', '\x3', '\x2', '\x220', '\x221', 
		'\a', '$', '\x2', '\x2', '\x221', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x222', '\x223', '\a', '\x42', '\x2', '\x2', '\x223', '\x224', '\x5', 
		'\x4', '\x3', '\x2', '\x224', '\x225', '\a', '$', '\x2', '\x2', '\x225', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\a', '\x43', '\x2', 
		'\x2', '\x227', '\x228', '\x5', '\x4', '\x3', '\x2', '\x228', '\x229', 
		'\a', '$', '\x2', '\x2', '\x229', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x22B', '\a', '\x44', '\x2', '\x2', '\x22B', '\x22C', '\x5', 
		'\x4', '\x3', '\x2', '\x22C', '\x22D', '\a', '$', '\x2', '\x2', '\x22D', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\a', '\x44', '\x2', 
		'\x2', '\x22F', '\x230', '\x5', '\x4', '\x3', '\x2', '\x230', '\x231', 
		'\a', ' ', '\x2', '\x2', '\x231', '\x232', '\x5', '\x4', '\x3', '\x2', 
		'\x232', '\x233', '\a', '$', '\x2', '\x2', '\x233', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x234', '\x235', '\a', '\x45', '\x2', '\x2', '\x235', '\x236', 
		'\x5', '\x4', '\x3', '\x2', '\x236', '\x237', '\a', '$', '\x2', '\x2', 
		'\x237', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', 
		'\x45', '\x2', '\x2', '\x239', '\x23A', '\x5', '\x4', '\x3', '\x2', '\x23A', 
		'\x23B', '\a', ' ', '\x2', '\x2', '\x23B', '\x23C', '\x5', '\x4', '\x3', 
		'\x2', '\x23C', '\x23D', '\a', '$', '\x2', '\x2', '\x23D', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x23E', '\x23F', '\a', '\x46', '\x2', '\x2', '\x23F', 
		'\x240', '\x5', '\x4', '\x3', '\x2', '\x240', '\x241', '\a', ' ', '\x2', 
		'\x2', '\x241', '\x242', '\x5', '\x4', '\x3', '\x2', '\x242', '\x243', 
		'\a', '$', '\x2', '\x2', '\x243', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x245', '\a', 'G', '\x2', '\x2', '\x245', '\x246', '\x5', '\x4', 
		'\x3', '\x2', '\x246', '\x247', '\a', '$', '\x2', '\x2', '\x247', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\a', 'G', '\x2', '\x2', 
		'\x249', '\x24A', '\x5', '\x4', '\x3', '\x2', '\x24A', '\x24B', '\a', 
		' ', '\x2', '\x2', '\x24B', '\x24C', '\x5', '\x4', '\x3', '\x2', '\x24C', 
		'\x24D', '\a', '$', '\x2', '\x2', '\x24D', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x24E', '\x24F', '\a', 'H', '\x2', '\x2', '\x24F', '\x250', '\x5', 
		'\x4', '\x3', '\x2', '\x250', '\x251', '\a', ' ', '\x2', '\x2', '\x251', 
		'\x252', '\x5', '\x4', '\x3', '\x2', '\x252', '\x253', '\a', '$', '\x2', 
		'\x2', '\x253', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x254', '\x255', 
		'\a', 'I', '\x2', '\x2', '\x255', '\x256', '\x5', '\x4', '\x3', '\x2', 
		'\x256', '\x257', '\a', '$', '\x2', '\x2', '\x257', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x258', '\x259', '\a', 'J', '\x2', '\x2', '\x259', '\x25A', 
		'\x5', '\x4', '\x3', '\x2', '\x25A', '\x25B', '\a', '$', '\x2', '\x2', 
		'\x25B', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\a', 
		'K', '\x2', '\x2', '\x25D', '\x25E', '\x5', '\x4', '\x3', '\x2', '\x25E', 
		'\x25F', '\a', ' ', '\x2', '\x2', '\x25F', '\x260', '\x5', '\x4', '\x3', 
		'\x2', '\x260', '\x261', '\a', '$', '\x2', '\x2', '\x261', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x262', '\x263', '\a', 'L', '\x2', '\x2', '\x263', 
		'\x264', '\x5', '\x4', '\x3', '\x2', '\x264', '\x265', '\a', '$', '\x2', 
		'\x2', '\x265', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x266', '\x267', 
		'\a', 'M', '\x2', '\x2', '\x267', '\x268', '\x5', '\x4', '\x3', '\x2', 
		'\x268', '\x269', '\a', '$', '\x2', '\x2', '\x269', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x26A', '\x26B', '\a', 'N', '\x2', '\x2', '\x26B', '\x26C', 
		'\x5', '\x4', '\x3', '\x2', '\x26C', '\x26D', '\a', '$', '\x2', '\x2', 
		'\x26D', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', '\a', 
		'O', '\x2', '\x2', '\x26F', '\x270', '\x5', '\x4', '\x3', '\x2', '\x270', 
		'\x271', '\a', '$', '\x2', '\x2', '\x271', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x273', '\a', 'P', '\x2', '\x2', '\x273', '\x274', '\x5', 
		'\x4', '\x3', '\x2', '\x274', '\x275', '\a', ' ', '\x2', '\x2', '\x275', 
		'\x276', '\x5', '\x4', '\x3', '\x2', '\x276', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x277', '\x278', '\a', 'Q', '\x2', '\x2', '\x278', '\x279', '\x5', 
		'\x4', '\x3', '\x2', '\x279', '\x27A', '\a', ' ', '\x2', '\x2', '\x27A', 
		'\x27B', '\x5', '\x4', '\x3', '\x2', '\x27B', '\x27C', '\a', '$', '\x2', 
		'\x2', '\x27C', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', 
		'\a', 'R', '\x2', '\x2', '\x27E', '\x27F', '\x5', '\x4', '\x3', '\x2', 
		'\x27F', '\x280', '\a', '$', '\x2', '\x2', '\x280', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x281', '\x282', '\a', 'S', '\x2', '\x2', '\x282', '\x283', 
		'\x5', '\x4', '\x3', '\x2', '\x283', '\x284', '\a', '$', '\x2', '\x2', 
		'\x284', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x285', '\x286', '\a', 
		'T', '\x2', '\x2', '\x286', '\x287', '\x5', '\x4', '\x3', '\x2', '\x287', 
		'\x288', '\a', '$', '\x2', '\x2', '\x288', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x289', '\x28A', '\a', 'U', '\x2', '\x2', '\x28A', '\x28B', '\x5', 
		'\x4', '\x3', '\x2', '\x28B', '\x28C', '\a', '$', '\x2', '\x2', '\x28C', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\a', 'V', '\x2', 
		'\x2', '\x28E', '\x28F', '\x5', '\x4', '\x3', '\x2', '\x28F', '\x290', 
		'\a', '$', '\x2', '\x2', '\x290', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x291', '\x292', '\a', 'W', '\x2', '\x2', '\x292', '\x293', '\x5', '\x4', 
		'\x3', '\x2', '\x293', '\x294', '\a', ' ', '\x2', '\x2', '\x294', '\x295', 
		'\x5', '\x4', '\x3', '\x2', '\x295', '\x296', '\a', '$', '\x2', '\x2', 
		'\x296', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x297', '\x298', '\a', 
		'X', '\x2', '\x2', '\x298', '\x299', '\x5', '\x4', '\x3', '\x2', '\x299', 
		'\x29A', '\a', '$', '\x2', '\x2', '\x29A', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x29B', '\x29C', '\a', 'Y', '\x2', '\x2', '\x29C', '\x29D', '\x5', 
		'\x4', '\x3', '\x2', '\x29D', '\x29E', '\a', '$', '\x2', '\x2', '\x29E', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\a', 'Z', '\x2', 
		'\x2', '\x2A0', '\x2A1', '\x5', '\x4', '\x3', '\x2', '\x2A1', '\x2A2', 
		'\a', '$', '\x2', '\x2', '\x2A2', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x2A3', '\x2A4', '\a', '[', '\x2', '\x2', '\x2A4', '\x2A5', '\x5', '\x4', 
		'\x3', '\x2', '\x2A5', '\x2A6', '\a', '$', '\x2', '\x2', '\x2A6', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\a', '\\', '\x2', '\x2', 
		'\x2A8', '\x2A9', '\x5', '\x4', '\x3', '\x2', '\x2A9', '\x2AA', '\a', 
		'$', '\x2', '\x2', '\x2AA', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2AB', 
		'\x2AC', '\a', ']', '\x2', '\x2', '\x2AC', '\x2AD', '\x5', '\x4', '\x3', 
		'\x2', '\x2AD', '\x2AE', '\a', '$', '\x2', '\x2', '\x2AE', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\a', '^', '\x2', '\x2', '\x2B0', 
		'\x2B1', '\x5', '\x4', '\x3', '\x2', '\x2B1', '\x2B2', '\a', '$', '\x2', 
		'\x2', '\x2B2', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', 
		'\a', '_', '\x2', '\x2', '\x2B4', '\x2B5', '\x5', '\x4', '\x3', '\x2', 
		'\x2B5', '\x2B6', '\a', '$', '\x2', '\x2', '\x2B6', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x2B7', '\x2B8', '\a', '`', '\x2', '\x2', '\x2B8', '\x2B9', 
		'\x5', '\x4', '\x3', '\x2', '\x2B9', '\x2BA', '\a', '$', '\x2', '\x2', 
		'\x2BA', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\a', 
		'\x61', '\x2', '\x2', '\x2BC', '\x2BD', '\x5', '\x4', '\x3', '\x2', '\x2BD', 
		'\x2BE', '\a', '$', '\x2', '\x2', '\x2BE', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x2BF', '\x2C0', '\a', '\x62', '\x2', '\x2', '\x2C0', '\x2C1', 
		'\x5', '\x4', '\x3', '\x2', '\x2C1', '\x2C2', '\a', '$', '\x2', '\x2', 
		'\x2C2', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\a', 
		'\x63', '\x2', '\x2', '\x2C4', '\x2C5', '\x5', '\x4', '\x3', '\x2', '\x2C5', 
		'\x2C6', '\a', '$', '\x2', '\x2', '\x2C6', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x1DC', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x1E2', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x1EA', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x1EE', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x1F6', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x202', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x20A', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x212', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x222', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x22E', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x234', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x238', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x23E', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x244', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x248', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x254', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x258', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x25C', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x262', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x266', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x26A', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x272', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x277', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x27D', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x281', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x285', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x289', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x291', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x297', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2A3', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2B7', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C3', '\x3', '\x2', '\x2', 
		'\x2', '\x2C8', ')', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CA', '\a', 
		'\x64', '\x2', '\x2', '\x2CA', '\x2CB', '\x5', '\x4', '\x3', '\x2', '\x2CB', 
		'\x2CC', '\a', ' ', '\x2', '\x2', '\x2CC', '\x2CD', '\x5', '\x4', '\x3', 
		'\x2', '\x2CD', '\x2CE', '\a', '$', '\x2', '\x2', '\x2CE', '\x2F6', '\x3', 
		'\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\a', '\x65', '\x2', '\x2', '\x2D0', 
		'\x2D1', '\x5', '\x4', '\x3', '\x2', '\x2D1', '\x2D2', '\a', '$', '\x2', 
		'\x2', '\x2D2', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', 
		'\a', '\x66', '\x2', '\x2', '\x2D4', '\x2D5', '\x5', '\x4', '\x3', '\x2', 
		'\x2D5', '\x2D6', '\a', '$', '\x2', '\x2', '\x2D6', '\x2F6', '\x3', '\x2', 
		'\x2', '\x2', '\x2D7', '\x2D8', '\a', 'g', '\x2', '\x2', '\x2D8', '\x2D9', 
		'\x5', '\x4', '\x3', '\x2', '\x2D9', '\x2DA', '\a', ' ', '\x2', '\x2', 
		'\x2DA', '\x2DB', '\x5', '\x4', '\x3', '\x2', '\x2DB', '\x2DC', '\a', 
		'$', '\x2', '\x2', '\x2DC', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2DD', 
		'\x2DE', '\a', 'h', '\x2', '\x2', '\x2DE', '\x2DF', '\x5', '\x4', '\x3', 
		'\x2', '\x2DF', '\x2E0', '\a', ' ', '\x2', '\x2', '\x2E0', '\x2E1', '\x5', 
		'\x4', '\x3', '\x2', '\x2E1', '\x2E2', '\a', '$', '\x2', '\x2', '\x2E2', 
		'\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E4', '\a', 'i', '\x2', 
		'\x2', '\x2E4', '\x2E5', '\x5', '\x4', '\x3', '\x2', '\x2E5', '\x2E6', 
		'\a', ' ', '\x2', '\x2', '\x2E6', '\x2E7', '\x5', '\x4', '\x3', '\x2', 
		'\x2E7', '\x2E8', '\a', '$', '\x2', '\x2', '\x2E8', '\x2F6', '\x3', '\x2', 
		'\x2', '\x2', '\x2E9', '\x2EA', '\a', 'j', '\x2', '\x2', '\x2EA', '\x2EB', 
		'\x5', '\x4', '\x3', '\x2', '\x2EB', '\x2EC', '\a', '$', '\x2', '\x2', 
		'\x2EC', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EE', '\a', 
		'\x66', '\x2', '\x2', '\x2EE', '\x2EF', '\x5', '\x4', '\x3', '\x2', '\x2EF', 
		'\x2F0', '\a', '$', '\x2', '\x2', '\x2F0', '\x2F6', '\x3', '\x2', '\x2', 
		'\x2', '\x2F1', '\x2F2', '\a', 'k', '\x2', '\x2', '\x2F2', '\x2F3', '\x5', 
		'\x4', '\x3', '\x2', '\x2F3', '\x2F4', '\a', '$', '\x2', '\x2', '\x2F4', 
		'\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2C9', '\x3', '\x2', '\x2', 
		'\x2', '\x2F5', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2D3', 
		'\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'\x2F5', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x2F5', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2F5', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F1', '\x3', '\x2', '\x2', 
		'\x2', '\x2F6', '+', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2FD', '\x5', 
		'\x4', '\x3', '\x2', '\x2F8', '\x2F9', '\x5', '\x4', '\x3', '\x2', '\x2F9', 
		'\x2FA', '\a', ' ', '\x2', '\x2', '\x2FA', '\x2FB', '\x5', ',', '\x17', 
		'\x2', '\x2FB', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2F8', '\x3', '\x2', '\x2', '\x2', 
		'\x2FD', '-', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FF', '\a', '%', 
		'\x2', '\x2', '\x2FF', '\x305', '\a', '&', '\x2', '\x2', '\x300', '\x301', 
		'\a', '%', '\x2', '\x2', '\x301', '\x302', '\x5', ',', '\x17', '\x2', 
		'\x302', '\x303', '\a', '&', '\x2', '\x2', '\x303', '\x305', '\x3', '\x2', 
		'\x2', '\x2', '\x304', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x304', '\x300', 
		'\x3', '\x2', '\x2', '\x2', '\x305', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x35', '\x44', 'K', 'R', 'Y', '\x63', '|', '~', '\x90', '\x92', 
		'\x9D', '\xA8', '\xB4', '\xB6', '\xD1', '\xD3', '\xF2', '\x104', '\x12E', 
		'\x170', '\x184', '\x1C2', '\x2C7', '\x2F5', '\x2FC', '\x304',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace EveryParser
