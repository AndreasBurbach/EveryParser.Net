//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EveryGrammar.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable CS0108

#pragma warning disable CS0114

namespace EveryParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
public partial class EveryGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, SUBTRACT=2, MULTIPLY=3, DIVIDE=4, MODULO=5, POWEROPERATOR=6, BOOLXOR=7, 
		EQUAL=8, EQUAL_IGNORECASE=9, NOT=10, NOTEQUAL=11, NOTEQUAL_IGNORECASE=12, 
		BOOLOR=13, BOOLAND=14, BITOR=15, BITAND=16, GREATER=17, GREATEREQUAL=18, 
		LOWER=19, LOWEREQUAL=20, TILDE=21, COLON=22, QUESTIONMARK=23, INTEGERDIVISION=24, 
		BITSHIFTLEFT=25, BITSHIFTRIGHT=26, CONTAINS=27, FACTORIAL=28, KOMMA=29, 
		TRUE=30, FALSE=31, ROUNDBRACKETOPEN=32, ROUNDBRACKETCLOSED=33, EDGEBRACKETOPEN=34, 
		EDGEBRACKETCLOSED=35, DOUBLE=36, STRING=37, VARIABLE=38, OBJECTSVARIABLE=39, 
		INT=40, ALPHA=41, E=42, PI=43, Abs=44, ACos=45, ACosH=46, ASin=47, ASinH=48, 
		ATan=49, ATan2=50, ATanH=51, Cbrt=52, Cos=53, CosH=54, Ceilling=55, Clamp=56, 
		CrossSum=57, Derivative=58, Exp=59, Floor=60, Integration=61, Log=62, 
		Log2=63, Log10=64, Max=65, Min=66, Power=67, Round=68, Root=69, Sin=70, 
		SinH=71, Sqrt=72, Tan=73, TanH=74, Truncate=75, Norm=76, EulerNorm=77, 
		MaxNorm=78, GreatestCommonDivisor=79, LeastCommonMultiple=80, DotProduct=81, 
		Binomial=82, ACot=83, ACotH=84, ACsc=85, ACscH=86, ASec=87, ASecH=88, 
		Cot=89, CotH=90, Csc=91, CscH=92, Sec=93, SecH=94, CoVariance=95, Mean=96, 
		Median=97, Pearson=98, Quantil=99, Spearman=100, Std=101, Variance=102, 
		Concat=103, Count=104, Distinct=105, Difference=106, HasDuplicates=107, 
		DateTime=108, Except=109, IndexOf=110, LowerCase=111, Reverse=112, UpperCase=113, 
		HasAny=114, Sort=115, Trim=116, IsString=117, IsNumber=118, IsBoolean=119, 
		IsDateTime=120, IsArray=121, IsNull=122, IsWhitespace=123, ToNumber=124,
        ToString =125, ToBoolean=126, ToArray=127, DegreeToGrad=128, DegreeToRadian=129,
        GradToDegree =130, GradToRadian=131, RadianToDegree=132, RadianToGrad=133, 
		RndDecimal=134, RndInteger=135;
	public const int
		RULE_startRule = 0, RULE_expression = 1, RULE_if_else = 2, RULE_inner_if_else = 3, 
		RULE_bool_or_term = 4, RULE_bool_xor_term = 5, RULE_bool_and_term = 6, 
		RULE_equality = 7, RULE_check = 8, RULE_bit_or_term = 9, RULE_bit_and_term = 10, 
		RULE_line_term = 11, RULE_point_term = 12, RULE_factor = 13, RULE_random_function_term = 14, 
		RULE_convert_function_term = 15, RULE_datetime_term = 16, RULE_array_slicing_term = 17, 
		RULE_check_function_term = 18, RULE_default_function_term = 19, RULE_math_function_term = 20, 
		RULE_statistic_math_function_term = 21, RULE_expr_args = 22, RULE_array_expr = 23;
	public static readonly string[] ruleNames = {
		"startRule", "expression", "if_else", "inner_if_else", "bool_or_term", 
		"bool_xor_term", "bool_and_term", "equality", "check", "bit_or_term", 
		"bit_and_term", "line_term", "point_term", "factor", "random_function_term", 
		"convert_function_term", "datetime_term", "array_slicing_term", "check_function_term", 
		"default_function_term", "math_function_term", "statistic_math_function_term", 
		"expr_args", "array_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'^'", "'=='", "'=i'", 
		"'not'", "'!='", "'!=i'", "'||'", "'&&'", "'|'", "'&'", "'>'", "'>='", 
		"'<'", "'<='", "'~'", "':'", "'?'", "'//'", "'<<'", "'>>'", "'in'", "'!'", 
		"','", "'true'", "'false'", "'('", "')'", "'['", "']'", null, null, null, 
		null, null, null, "'e'", "'pi'", "'Abs('", "'ACos('", "'ACosH('", "'ASin('", 
		"'ASinH('", "'ATan('", "'ATan2('", "'ATanH('", "'Cbrt('", "'Cos('", "'CosH('", 
		"'Ceilling('", "'Clamp('", "'CrossSum('", "'Derivative('", "'Exp('", "'Floor('", 
		"'Integration('", "'Log('", "'Log2('", "'Log10('", "'Max('", "'Min('", 
		"'Pow('", "'Round('", "'Root('", "'Sin('", "'SinH('", "'Sqrt('", "'Tan('", 
		"'TanH('", "'Truncate('", "'Norm('", "'EulerNorm('", "'MaxNorm('", "'Gcd('", 
		"'Lcm('", "'DotProduct('", "'Binomial('", "'ACot('", "'ACotH('", "'ACsc('", 
		"'ACscH('", "'ASec('", "'ASecH('", "'Cot('", "'CotH('", "'Csc('", "'CscH('", 
		"'Sec('", "'SecH('", "'CoVariance('", "'Mean('", "'Median('", "'Pearson('", 
		"'Quantil('", "'Spearman('", "'Std('", "'Variance('", "'Concat('", "'Count('", 
		"'Distinct('", "'Difference('", "'HasDuplicates('", "'DateTime('", "'Except('", 
		"'IndexOf('", "'Lower('", "'Reverse('", "'Upper('", "'HasAny('", "'Sort('", 
		"'Trim('", "'IsString('", "'IsNumber('", "'IsBoolean('", "'IsDatetime('", 
		"'IsArray('", "'IsNull('", "'IsWhitespace('", "'ToNumber('", "'ToString('", 
		"'ToBoolean('", "'ToArray('", "'DegreeToGrad('", "'DegreeToRadian('", 
		"'GradToDegree('", "'GradToRadian('", "'RadianToDegree('", "'RadianToGrad('", 
		"'RndDecimal('", "'RndInteger('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULO", "POWEROPERATOR", 
		"BOOLXOR", "EQUAL", "EQUAL_IGNORECASE", "NOT", "NOTEQUAL", "NOTEQUAL_IGNORECASE", 
		"BOOLOR", "BOOLAND", "BITOR", "BITAND", "GREATER", "GREATEREQUAL", "LOWER", 
		"LOWEREQUAL", "TILDE", "COLON", "QUESTIONMARK", "INTEGERDIVISION", "BITSHIFTLEFT", 
		"BITSHIFTRIGHT", "CONTAINS", "FACTORIAL", "KOMMA", "TRUE", "FALSE", "ROUNDBRACKETOPEN", 
		"ROUNDBRACKETCLOSED", "EDGEBRACKETOPEN", "EDGEBRACKETCLOSED", "DOUBLE", 
		"STRING", "VARIABLE", "OBJECTSVARIABLE", "INT", "ALPHA", "E", "PI", "Abs", 
		"ACos", "ACosH", "ASin", "ASinH", "ATan", "ATan2", "ATanH", "Cbrt", "Cos", 
		"CosH", "Ceilling", "Clamp", "CrossSum", "Derivative", "Exp", "Floor", 
		"Integration", "Log", "Log2", "Log10", "Max", "Min", "Power", "Round", 
		"Root", "Sin", "SinH", "Sqrt", "Tan", "TanH", "Truncate", "Norm", "EulerNorm", 
		"MaxNorm", "GreatestCommonDivisor", "LeastCommonMultiple", "DotProduct", 
		"Binomial", "ACot", "ACotH", "ACsc", "ACscH", "ASec", "ASecH", "Cot", 
		"CotH", "Csc", "CscH", "Sec", "SecH", "CoVariance", "Mean", "Median", 
		"Pearson", "Quantil", "Spearman", "Std", "Variance", "Concat", "Count", 
		"Distinct", "Difference", "HasDuplicates", "DateTime", "Except", "IndexOf", 
		"LowerCase", "Reverse", "UpperCase", "HasAny", "Sort", "Trim", "IsString", 
		"IsNumber", "IsBoolean", "IsDateTime", "IsArray", "IsNull", "IsWhitespace", 
		"ToNumber", "ToString", "ToBoolean", "ToArray", "DegreeToGrad", "DegreeToRadian", 
		"GradToDegree", "GradToRadian", "RadianToDegree", "RadianToGrad", "RndDecimal", 
		"RndInteger"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EveryGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EveryGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EveryGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EveryGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_elseContext if_else() {
			return GetRuleContext<If_elseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			if_else();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_elseContext : ParserRuleContext {
		public If_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else; } }
	 
		public If_elseContext() { }
		public virtual void CopyFrom(If_elseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfElseContext : If_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext[] inner_if_else() {
			return GetRuleContexts<Inner_if_elseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext inner_if_else(int i) {
			return GetRuleContext<Inner_if_elseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(EveryGrammarParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EveryGrammarParser.COLON, 0); }
		public IfElseContext(If_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
	}
	public partial class IfElse_NextContext : If_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext inner_if_else() {
			return GetRuleContext<Inner_if_elseContext>(0);
		}
		public IfElse_NextContext(If_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterIfElse_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitIfElse_Next(this);
		}
	}
	public partial class ArraySlicingContext : If_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext inner_if_else() {
			return GetRuleContext<Inner_if_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_slicing_termContext array_slicing_term() {
			return GetRuleContext<Array_slicing_termContext>(0);
		}
		public ArraySlicingContext(If_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing(this);
		}
	}

	[RuleVersion(0)]
	public If_elseContext if_else() {
		If_elseContext _localctx = new If_elseContext(Context, State);
		EnterRule(_localctx, 4, RULE_if_else);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new IfElse_NextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				inner_if_else();
				}
				break;
			case 2:
				_localctx = new ArraySlicingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 53;
				inner_if_else();
				State = 54;
				array_slicing_term();
				}
				break;
			case 3:
				_localctx = new IfElseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				inner_if_else();
				State = 57;
				Match(QUESTIONMARK);
				State = 58;
				inner_if_else();
				State = 59;
				Match(COLON);
				State = 60;
				inner_if_else();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inner_if_elseContext : ParserRuleContext {
		public Inner_if_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inner_if_else; } }
	 
		public Inner_if_elseContext() { }
		public virtual void CopyFrom(Inner_if_elseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InnerIfElseContext : Inner_if_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETOPEN() { return GetToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_elseContext if_else() {
			return GetRuleContext<If_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public InnerIfElseContext(Inner_if_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterInnerIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitInnerIfElse(this);
		}
	}
	public partial class InnerIfElse_NextContext : Inner_if_elseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_or_termContext bool_or_term() {
			return GetRuleContext<Bool_or_termContext>(0);
		}
		public InnerIfElse_NextContext(Inner_if_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterInnerIfElse_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitInnerIfElse_Next(this);
		}
	}

	[RuleVersion(0)]
	public Inner_if_elseContext inner_if_else() {
		Inner_if_elseContext _localctx = new Inner_if_elseContext(Context, State);
		EnterRule(_localctx, 6, RULE_inner_if_else);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new InnerIfElse_NextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				bool_or_term();
				}
				break;
			case 2:
				_localctx = new InnerIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				Match(ROUNDBRACKETOPEN);
				State = 66;
				if_else();
				State = 67;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_or_termContext : ParserRuleContext {
		public Bool_or_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_or_term; } }
	 
		public Bool_or_termContext() { }
		public virtual void CopyFrom(Bool_or_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolOr_NextContext : Bool_or_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_xor_termContext bool_xor_term() {
			return GetRuleContext<Bool_xor_termContext>(0);
		}
		public BoolOr_NextContext(Bool_or_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolOr_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolOr_Next(this);
		}
	}
	public partial class BoolOrContext : Bool_or_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_xor_termContext[] bool_xor_term() {
			return GetRuleContexts<Bool_xor_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_xor_termContext bool_xor_term(int i) {
			return GetRuleContext<Bool_xor_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLOR() { return GetToken(EveryGrammarParser.BOOLOR, 0); }
		public BoolOrContext(Bool_or_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolOr(this);
		}
	}

	[RuleVersion(0)]
	public Bool_or_termContext bool_or_term() {
		Bool_or_termContext _localctx = new Bool_or_termContext(Context, State);
		EnterRule(_localctx, 8, RULE_bool_or_term);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new BoolOr_NextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				bool_xor_term();
				}
				break;
			case 2:
				_localctx = new BoolOrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				bool_xor_term();
				State = 73;
				Match(BOOLOR);
				State = 74;
				bool_xor_term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_xor_termContext : ParserRuleContext {
		public Bool_xor_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_xor_term; } }
	 
		public Bool_xor_termContext() { }
		public virtual void CopyFrom(Bool_xor_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolXOrContext : Bool_xor_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext[] bool_and_term() {
			return GetRuleContexts<Bool_and_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term(int i) {
			return GetRuleContext<Bool_and_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLXOR() { return GetToken(EveryGrammarParser.BOOLXOR, 0); }
		public BoolXOrContext(Bool_xor_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolXOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolXOr(this);
		}
	}
	public partial class BoolXOr_NextContext : Bool_xor_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term() {
			return GetRuleContext<Bool_and_termContext>(0);
		}
		public BoolXOr_NextContext(Bool_xor_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolXOr_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolXOr_Next(this);
		}
	}

	[RuleVersion(0)]
	public Bool_xor_termContext bool_xor_term() {
		Bool_xor_termContext _localctx = new Bool_xor_termContext(Context, State);
		EnterRule(_localctx, 10, RULE_bool_xor_term);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new BoolXOr_NextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				bool_and_term(0);
				}
				break;
			case 2:
				_localctx = new BoolXOrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				bool_and_term(0);
				State = 80;
				Match(BOOLXOR);
				State = 81;
				bool_and_term(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_and_termContext : ParserRuleContext {
		public Bool_and_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_and_term; } }
	 
		public Bool_and_termContext() { }
		public virtual void CopyFrom(Bool_and_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolAnd_NextContext : Bool_and_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public BoolAnd_NextContext(Bool_and_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolAnd_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolAnd_Next(this);
		}
	}
	public partial class BoolAndContext : Bool_and_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term() {
			return GetRuleContext<Bool_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLAND() { return GetToken(EveryGrammarParser.BOOLAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public BoolAndContext(Bool_and_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBoolAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBoolAnd(this);
		}
	}

	[RuleVersion(0)]
	public Bool_and_termContext bool_and_term() {
		return bool_and_term(0);
	}

	private Bool_and_termContext bool_and_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bool_and_termContext _localctx = new Bool_and_termContext(Context, _parentState);
		Bool_and_termContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_bool_and_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BoolAnd_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 86;
			equality(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolAndContext(new Bool_and_termContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bool_and_term);
					State = 88;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 89;
					Match(BOOLAND);
					State = 90;
					equality(0);
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
	 
		public EqualityContext() { }
		public virtual void CopyFrom(EqualityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Equality_ContainsContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(EveryGrammarParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_ContainsContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_Contains(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_Contains(this);
		}
	}
	public partial class Equality_NextContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_NextContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_Next(this);
		}
	}
	public partial class Equality_EqualContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(EveryGrammarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_EqualContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_Equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_Equal(this);
		}
	}
	public partial class Equality_NotEqualIgnoreCaseContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL_IGNORECASE() { return GetToken(EveryGrammarParser.NOTEQUAL_IGNORECASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_NotEqualIgnoreCaseContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_NotEqualIgnoreCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_NotEqualIgnoreCase(this);
		}
	}
	public partial class Equality_NotEqualContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(EveryGrammarParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_NotEqualContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_NotEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_NotEqual(this);
		}
	}
	public partial class Equality_NotContainsContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EveryGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(EveryGrammarParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_NotContainsContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_NotContains(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_NotContains(this);
		}
	}
	public partial class Equality_EqualIgnoreCaseContext : EqualityContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_IGNORECASE() { return GetToken(EveryGrammarParser.EQUAL_IGNORECASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public Equality_EqualIgnoreCaseContext(EqualityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_EqualIgnoreCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_EqualIgnoreCase(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		return equality(0);
	}

	private EqualityContext equality(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityContext _localctx = new EqualityContext(Context, _parentState);
		EqualityContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_equality, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Equality_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 97;
			check(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 118;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new Equality_EqualContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 99;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 100;
						Match(EQUAL);
						State = 101;
						check(0);
						}
						break;
					case 2:
						{
						_localctx = new Equality_NotEqualContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 102;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 103;
						Match(NOTEQUAL);
						State = 104;
						check(0);
						}
						break;
					case 3:
						{
						_localctx = new Equality_EqualIgnoreCaseContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 105;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 106;
						Match(EQUAL_IGNORECASE);
						State = 107;
						check(0);
						}
						break;
					case 4:
						{
						_localctx = new Equality_NotEqualIgnoreCaseContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 108;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 109;
						Match(NOTEQUAL_IGNORECASE);
						State = 110;
						check(0);
						}
						break;
					case 5:
						{
						_localctx = new Equality_ContainsContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 111;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 112;
						Match(CONTAINS);
						State = 113;
						check(0);
						}
						break;
					case 6:
						{
						_localctx = new Equality_NotContainsContext(new EqualityContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 114;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 115;
						Match(NOT);
						State = 116;
						Match(CONTAINS);
						State = 117;
						check(0);
						}
						break;
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
	 
		public CheckContext() { }
		public virtual void CopyFrom(CheckContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Check_NextContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_NextContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_Next(this);
		}
	}
	public partial class Check_GreaterContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(EveryGrammarParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_GreaterContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_Greater(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_Greater(this);
		}
	}
	public partial class Check_GreaterEqualContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(EveryGrammarParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_GreaterEqualContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_GreaterEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_GreaterEqual(this);
		}
	}
	public partial class Check_LowerContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(EveryGrammarParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_LowerContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_Lower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_Lower(this);
		}
	}
	public partial class Check_LowerEqualContext : CheckContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWEREQUAL() { return GetToken(EveryGrammarParser.LOWEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		public Check_LowerEqualContext(CheckContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck_LowerEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck_LowerEqual(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(Context, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Check_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 124;
			bit_or_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 138;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new Check_LowerContext(new CheckContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 126;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 127;
						Match(LOWER);
						State = 128;
						bit_or_term(0);
						}
						break;
					case 2:
						{
						_localctx = new Check_GreaterContext(new CheckContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 129;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 130;
						Match(GREATER);
						State = 131;
						bit_or_term(0);
						}
						break;
					case 3:
						{
						_localctx = new Check_LowerEqualContext(new CheckContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 132;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 133;
						Match(LOWEREQUAL);
						State = 134;
						bit_or_term(0);
						}
						break;
					case 4:
						{
						_localctx = new Check_GreaterEqualContext(new CheckContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 135;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 136;
						Match(GREATEREQUAL);
						State = 137;
						bit_or_term(0);
						}
						break;
					}
					} 
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_or_termContext : ParserRuleContext {
		public Bit_or_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_or_term; } }
	 
		public Bit_or_termContext() { }
		public virtual void CopyFrom(Bit_or_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitORContext : Bit_or_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR() { return GetToken(EveryGrammarParser.BITOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		public BitORContext(Bit_or_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBitOR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBitOR(this);
		}
	}
	public partial class BitOr_NextContext : Bit_or_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		public BitOr_NextContext(Bit_or_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBitOr_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBitOr_Next(this);
		}
	}

	[RuleVersion(0)]
	public Bit_or_termContext bit_or_term() {
		return bit_or_term(0);
	}

	private Bit_or_termContext bit_or_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_or_termContext _localctx = new Bit_or_termContext(Context, _parentState);
		Bit_or_termContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_bit_or_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BitOr_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 144;
			bit_and_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitORContext(new Bit_or_termContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bit_or_term);
					State = 146;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 147;
					Match(BITOR);
					State = 148;
					bit_and_term(0);
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_and_termContext : ParserRuleContext {
		public Bit_and_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_and_term; } }
	 
		public Bit_and_termContext() { }
		public virtual void CopyFrom(Bit_and_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitAndContext : Bit_and_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND() { return GetToken(EveryGrammarParser.BITAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		public BitAndContext(Bit_and_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBitAnd(this);
		}
	}
	public partial class BitAnd_NextContext : Bit_and_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		public BitAnd_NextContext(Bit_and_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBitAnd_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBitAnd_Next(this);
		}
	}

	[RuleVersion(0)]
	public Bit_and_termContext bit_and_term() {
		return bit_and_term(0);
	}

	private Bit_and_termContext bit_and_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_and_termContext _localctx = new Bit_and_termContext(Context, _parentState);
		Bit_and_termContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_bit_and_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BitAnd_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 155;
			line_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitAndContext(new Bit_and_termContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bit_and_term);
					State = 157;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 158;
					Match(BITAND);
					State = 159;
					line_term(0);
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Line_termContext : ParserRuleContext {
		public Line_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_term; } }
	 
		public Line_termContext() { }
		public virtual void CopyFrom(Line_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Line_AdditionContext : Line_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(EveryGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		public Line_AdditionContext(Line_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterLine_Addition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitLine_Addition(this);
		}
	}
	public partial class Line_SubtractionContext : Line_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(EveryGrammarParser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		public Line_SubtractionContext(Line_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterLine_Subtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitLine_Subtraction(this);
		}
	}
	public partial class Line_NextContext : Line_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		public Line_NextContext(Line_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterLine_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitLine_Next(this);
		}
	}

	[RuleVersion(0)]
	public Line_termContext line_term() {
		return line_term(0);
	}

	private Line_termContext line_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Line_termContext _localctx = new Line_termContext(Context, _parentState);
		Line_termContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_line_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Line_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 166;
			point_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 174;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new Line_AdditionContext(new Line_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_line_term);
						State = 168;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 169;
						Match(ADD);
						State = 170;
						point_term(0);
						}
						break;
					case 2:
						{
						_localctx = new Line_SubtractionContext(new Line_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_line_term);
						State = 171;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 172;
						Match(SUBTRACT);
						State = 173;
						point_term(0);
						}
						break;
					}
					} 
				}
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Point_termContext : ParserRuleContext {
		public Point_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point_term; } }
	 
		public Point_termContext() { }
		public virtual void CopyFrom(Point_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PointTerm_PowerOperatorContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWEROPERATOR() { return GetToken(EveryGrammarParser.POWEROPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_PowerOperatorContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_PowerOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_PowerOperator(this);
		}
	}
	public partial class PointTerm_ModuloContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(EveryGrammarParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_ModuloContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_Modulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_Modulo(this);
		}
	}
	public partial class PointTerm_MultiplyContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(EveryGrammarParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_MultiplyContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_Multiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_Multiply(this);
		}
	}
	public partial class PointTerm_BitShiftLeftContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTLEFT() { return GetToken(EveryGrammarParser.BITSHIFTLEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_BitShiftLeftContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_BitShiftLeft(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_BitShiftLeft(this);
		}
	}
	public partial class PointTerm_IntegerDivisionContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERDIVISION() { return GetToken(EveryGrammarParser.INTEGERDIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_IntegerDivisionContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_IntegerDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_IntegerDivision(this);
		}
	}
	public partial class PointTerm_BitShiftRightContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTRIGHT() { return GetToken(EveryGrammarParser.BITSHIFTRIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_BitShiftRightContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_BitShiftRight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_BitShiftRight(this);
		}
	}
	public partial class PointTerm_DivideContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(EveryGrammarParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_DivideContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_Divide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_Divide(this);
		}
	}
	public partial class PointTerm_NextContext : Point_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PointTerm_NextContext(Point_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPointTerm_Next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPointTerm_Next(this);
		}
	}

	[RuleVersion(0)]
	public Point_termContext point_term() {
		return point_term(0);
	}

	private Point_termContext point_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Point_termContext _localctx = new Point_termContext(Context, _parentState);
		Point_termContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_point_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PointTerm_NextContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 180;
			factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 205;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 203;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new PointTerm_MultiplyContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 182;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 183;
						Match(MULTIPLY);
						State = 184;
						factor();
						}
						break;
					case 2:
						{
						_localctx = new PointTerm_PowerOperatorContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 185;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 186;
						Match(POWEROPERATOR);
						State = 187;
						factor();
						}
						break;
					case 3:
						{
						_localctx = new PointTerm_ModuloContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 188;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 189;
						Match(MODULO);
						State = 190;
						factor();
						}
						break;
					case 4:
						{
						_localctx = new PointTerm_BitShiftLeftContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 191;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 192;
						Match(BITSHIFTLEFT);
						State = 193;
						factor();
						}
						break;
					case 5:
						{
						_localctx = new PointTerm_BitShiftRightContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 194;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 195;
						Match(BITSHIFTRIGHT);
						State = 196;
						factor();
						}
						break;
					case 6:
						{
						_localctx = new PointTerm_DivideContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 197;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 198;
						Match(DIVIDE);
						State = 199;
						factor();
						}
						break;
					case 7:
						{
						_localctx = new PointTerm_IntegerDivisionContext(new Point_termContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 200;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 201;
						Match(INTEGERDIVISION);
						State = 202;
						factor();
						}
						break;
					}
					} 
				}
				State = 207;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Factor_CheckFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Check_function_termContext check_function_term() {
			return GetRuleContext<Check_function_termContext>(0);
		}
		public Factor_CheckFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_CheckFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_CheckFunction(this);
		}
	}
	public partial class Factor_FalseContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(EveryGrammarParser.FALSE, 0); }
		public Factor_FalseContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_False(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_False(this);
		}
	}
	public partial class Factor_IntegerContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(EveryGrammarParser.INT, 0); }
		public Factor_IntegerContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Integer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Integer(this);
		}
	}
	public partial class Factor_ObjectVariablesContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECTSVARIABLE() { return GetToken(EveryGrammarParser.OBJECTSVARIABLE, 0); }
		public Factor_ObjectVariablesContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_ObjectVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_ObjectVariables(this);
		}
	}
	public partial class Factor_DateTimeTermContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_termContext datetime_term() {
			return GetRuleContext<Datetime_termContext>(0);
		}
		public Factor_DateTimeTermContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_DateTimeTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_DateTimeTerm(this);
		}
	}
	public partial class Factor_ConvertFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Convert_function_termContext convert_function_term() {
			return GetRuleContext<Convert_function_termContext>(0);
		}
		public Factor_ConvertFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_ConvertFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_ConvertFunction(this);
		}
	}
	public partial class Factor_TrueContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(EveryGrammarParser.TRUE, 0); }
		public Factor_TrueContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_True(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_True(this);
		}
	}
	public partial class Factor_NotContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EveryGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_NotContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Not(this);
		}
	}
	public partial class Factor_RandomFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Random_function_termContext random_function_term() {
			return GetRuleContext<Random_function_termContext>(0);
		}
		public Factor_RandomFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_RandomFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_RandomFunction(this);
		}
	}
	public partial class Factor_FactorialContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACTORIAL() { return GetToken(EveryGrammarParser.FACTORIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_FactorialContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Factorial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Factorial(this);
		}
	}
	public partial class Factor_BracketsContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETOPEN() { return GetToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Factor_BracketsContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Brackets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Brackets(this);
		}
	}
	public partial class Factor_MathFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_function_termContext math_function_term() {
			return GetRuleContext<Math_function_termContext>(0);
		}
		public Factor_MathFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_MathFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_MathFunction(this);
		}
	}
	public partial class Factor_PlusContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(EveryGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_PlusContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Plus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Plus(this);
		}
	}
	public partial class Factor_TildeContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(EveryGrammarParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_TildeContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Tilde(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Tilde(this);
		}
	}
	public partial class Factor_MinusContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(EveryGrammarParser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Factor_MinusContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Minus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Minus(this);
		}
	}
	public partial class Factor_VariableContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EveryGrammarParser.VARIABLE, 0); }
		public Factor_VariableContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Variable(this);
		}
	}
	public partial class Factor_StringContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(EveryGrammarParser.STRING, 0); }
		public Factor_StringContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_String(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_String(this);
		}
	}
	public partial class Factor_DoubleContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(EveryGrammarParser.DOUBLE, 0); }
		public Factor_DoubleContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Double(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Double(this);
		}
	}
	public partial class Factor_ArrayContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		public Factor_ArrayContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_Array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_Array(this);
		}
	}
	public partial class Factor_DefaultFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Default_function_termContext default_function_term() {
			return GetRuleContext<Default_function_termContext>(0);
		}
		public Factor_DefaultFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_DefaultFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_DefaultFunction(this);
		}
	}
	public partial class Factor_StatisticMathFunctionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statistic_math_function_termContext statistic_math_function_term() {
			return GetRuleContext<Statistic_math_function_termContext>(0);
		}
		public Factor_StatisticMathFunctionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor_StatisticMathFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor_StatisticMathFunction(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 26, RULE_factor);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				_localctx = new Factor_NotContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				Match(NOT);
				State = 209;
				factor();
				}
				break;
			case SUBTRACT:
				_localctx = new Factor_MinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				Match(SUBTRACT);
				State = 211;
				factor();
				}
				break;
			case ADD:
				_localctx = new Factor_PlusContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 212;
				Match(ADD);
				State = 213;
				factor();
				}
				break;
			case TILDE:
				_localctx = new Factor_TildeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 214;
				Match(TILDE);
				State = 215;
				factor();
				}
				break;
			case FACTORIAL:
				_localctx = new Factor_FactorialContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 216;
				Match(FACTORIAL);
				State = 217;
				factor();
				}
				break;
			case ROUNDBRACKETOPEN:
				_localctx = new Factor_BracketsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 218;
				Match(ROUNDBRACKETOPEN);
				State = 219;
				expression();
				State = 220;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case TRUE:
				_localctx = new Factor_TrueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 222;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Factor_FalseContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 223;
				Match(FALSE);
				}
				break;
			case INT:
				_localctx = new Factor_IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 224;
				Match(INT);
				}
				break;
			case DOUBLE:
				_localctx = new Factor_DoubleContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 225;
				Match(DOUBLE);
				}
				break;
			case VARIABLE:
				_localctx = new Factor_VariableContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 226;
				Match(VARIABLE);
				}
				break;
			case OBJECTSVARIABLE:
				_localctx = new Factor_ObjectVariablesContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 227;
				Match(OBJECTSVARIABLE);
				}
				break;
			case STRING:
				_localctx = new Factor_StringContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 228;
				Match(STRING);
				}
				break;
			case DateTime:
				_localctx = new Factor_DateTimeTermContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 229;
				datetime_term();
				}
				break;
			case EDGEBRACKETOPEN:
				_localctx = new Factor_ArrayContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 230;
				array_expr();
				}
				break;
			case Concat:
			case Count:
			case Distinct:
			case Difference:
			case Except:
			case IndexOf:
			case LowerCase:
			case Reverse:
			case UpperCase:
			case Sort:
			case Trim:
				_localctx = new Factor_DefaultFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 231;
				default_function_term();
				}
				break;
			case HasDuplicates:
			case HasAny:
			case IsString:
			case IsNumber:
			case IsBoolean:
			case IsDateTime:
			case IsArray:
			case IsNull:
			case IsWhitespace:
				_localctx = new Factor_CheckFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 232;
				check_function_term();
				}
				break;
			case ToNumber:
			case ToString:
			case ToBoolean:
			case ToArray:
			case DegreeToGrad:
			case DegreeToRadian:
			case GradToDegree:
			case GradToRadian:
			case RadianToDegree:
			case RadianToGrad:
				_localctx = new Factor_ConvertFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 233;
				convert_function_term();
				}
				break;
			case Abs:
			case ACos:
			case ACosH:
			case ASin:
			case ASinH:
			case ATan:
			case ATan2:
			case ATanH:
			case Cbrt:
			case Cos:
			case CosH:
			case Ceilling:
			case Clamp:
			case CrossSum:
			case Derivative:
			case Exp:
			case Floor:
			case Integration:
			case Log:
			case Log2:
			case Log10:
			case Max:
			case Min:
			case Power:
			case Round:
			case Root:
			case Sin:
			case SinH:
			case Sqrt:
			case Tan:
			case TanH:
			case Truncate:
			case Norm:
			case EulerNorm:
			case MaxNorm:
			case GreatestCommonDivisor:
			case LeastCommonMultiple:
			case DotProduct:
			case Binomial:
			case ACot:
			case ACotH:
			case ACsc:
			case ACscH:
			case ASec:
			case ASecH:
			case Cot:
			case CotH:
			case Csc:
			case CscH:
			case Sec:
			case SecH:
				_localctx = new Factor_MathFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 234;
				math_function_term();
				}
				break;
			case RndDecimal:
			case RndInteger:
				_localctx = new Factor_RandomFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 235;
				random_function_term();
				}
				break;
			case CoVariance:
			case Mean:
			case Median:
			case Pearson:
			case Quantil:
			case Spearman:
			case Std:
			case Variance:
				_localctx = new Factor_StatisticMathFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 236;
				statistic_math_function_term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Random_function_termContext : ParserRuleContext {
		public Random_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_random_function_term; } }
	 
		public Random_function_termContext() { }
		public virtual void CopyFrom(Random_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Random_DecimalArrayMinMaxContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndDecimal() { return GetToken(EveryGrammarParser.RndDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_DecimalArrayMinMaxContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_DecimalArrayMinMax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_DecimalArrayMinMax(this);
		}
	}
	public partial class Random_IntegerArrayContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndInteger() { return GetToken(EveryGrammarParser.RndInteger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_IntegerArrayContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_IntegerArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_IntegerArray(this);
		}
	}
	public partial class Random_IntegerContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndInteger() { return GetToken(EveryGrammarParser.RndInteger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_IntegerContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_Integer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_Integer(this);
		}
	}
	public partial class Random_DecimalArrayContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndDecimal() { return GetToken(EveryGrammarParser.RndDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_DecimalArrayContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_DecimalArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_DecimalArray(this);
		}
	}
	public partial class Random_DecimalMinMaxContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndDecimal() { return GetToken(EveryGrammarParser.RndDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_DecimalMinMaxContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_DecimalMinMax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_DecimalMinMax(this);
		}
	}
	public partial class Random_IntegerArrayMinMaxContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndInteger() { return GetToken(EveryGrammarParser.RndInteger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_IntegerArrayMinMaxContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_IntegerArrayMinMax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_IntegerArrayMinMax(this);
		}
	}
	public partial class Random_DecimalContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndDecimal() { return GetToken(EveryGrammarParser.RndDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_DecimalContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_Decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_Decimal(this);
		}
	}
	public partial class Random_IntegerMinMaxContext : Random_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RndInteger() { return GetToken(EveryGrammarParser.RndInteger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Random_IntegerMinMaxContext(Random_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterRandom_IntegerMinMax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitRandom_IntegerMinMax(this);
		}
	}

	[RuleVersion(0)]
	public Random_function_termContext random_function_term() {
		Random_function_termContext _localctx = new Random_function_termContext(Context, State);
		EnterRule(_localctx, 28, RULE_random_function_term);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new Random_DecimalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				Match(RndDecimal);
				State = 240;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new Random_DecimalArrayContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				Match(RndDecimal);
				State = 242;
				expression();
				State = 243;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new Random_DecimalMinMaxContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				Match(RndDecimal);
				State = 246;
				expression();
				State = 247;
				Match(KOMMA);
				State = 248;
				expression();
				State = 249;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				_localctx = new Random_DecimalArrayMinMaxContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 251;
				Match(RndDecimal);
				State = 252;
				expression();
				State = 253;
				Match(KOMMA);
				State = 254;
				expression();
				State = 255;
				Match(KOMMA);
				State = 256;
				expression();
				State = 257;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 5:
				_localctx = new Random_IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 259;
				Match(RndInteger);
				State = 260;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 6:
				_localctx = new Random_IntegerArrayContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 261;
				Match(RndInteger);
				State = 262;
				expression();
				State = 263;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 7:
				_localctx = new Random_IntegerMinMaxContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 265;
				Match(RndInteger);
				State = 266;
				expression();
				State = 267;
				Match(KOMMA);
				State = 268;
				expression();
				State = 269;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 8:
				_localctx = new Random_IntegerArrayMinMaxContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 271;
				Match(RndInteger);
				State = 272;
				expression();
				State = 273;
				Match(KOMMA);
				State = 274;
				expression();
				State = 275;
				Match(KOMMA);
				State = 276;
				expression();
				State = 277;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Convert_function_termContext : ParserRuleContext {
		public Convert_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convert_function_term; } }
	 
		public Convert_function_termContext() { }
		public virtual void CopyFrom(Convert_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Convert_ToNumberContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ToNumber() { return GetToken(EveryGrammarParser.ToNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_ToNumberContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_ToNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_ToNumber(this);
		}
	}
	public partial class Convert_ToBooleanContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ToBoolean() { return GetToken(EveryGrammarParser.ToBoolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_ToBooleanContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_ToBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_ToBoolean(this);
		}
	}
	public partial class Convert_GradToDegreeContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GradToDegree() { return GetToken(EveryGrammarParser.GradToDegree, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_GradToDegreeContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_GradToDegree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_GradToDegree(this);
		}
	}
	public partial class Convert_ToStringContext : Convert_function_termContext {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ToString() { return GetToken(EveryGrammarParser.ToString, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_ToStringContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_ToString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_ToString(this);
		}
	}
	public partial class Convert_ToArrayContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ToArray() { return GetToken(EveryGrammarParser.ToArray, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_ToArrayContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_ToArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_ToArray(this);
		}
	}
	public partial class Convert_DegreeToGradContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DegreeToGrad() { return GetToken(EveryGrammarParser.DegreeToGrad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_DegreeToGradContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_DegreeToGrad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_DegreeToGrad(this);
		}
	}
	public partial class Convert_DegreeToRadianContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DegreeToRadian() { return GetToken(EveryGrammarParser.DegreeToRadian, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_DegreeToRadianContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_DegreeToRadian(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_DegreeToRadian(this);
		}
	}
	public partial class Convert_RadianToGradContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RadianToGrad() { return GetToken(EveryGrammarParser.RadianToGrad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_RadianToGradContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_RadianToGrad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_RadianToGrad(this);
		}
	}
	public partial class Convert_GradToRadianContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GradToRadian() { return GetToken(EveryGrammarParser.GradToRadian, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_GradToRadianContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_GradToRadian(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_GradToRadian(this);
		}
	}
	public partial class Convert_RadianToDegreeContext : Convert_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RadianToDegree() { return GetToken(EveryGrammarParser.RadianToDegree, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Convert_RadianToDegreeContext(Convert_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterConvert_RadianToDegree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitConvert_RadianToDegree(this);
		}
	}

	[RuleVersion(0)]
	public Convert_function_termContext convert_function_term() {
		Convert_function_termContext _localctx = new Convert_function_termContext(Context, State);
		EnterRule(_localctx, 30, RULE_convert_function_term);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ToArray:
				_localctx = new Convert_ToArrayContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				Match(ToArray);
				State = 282;
				expr_args();
				State = 283;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case ToBoolean:
				_localctx = new Convert_ToBooleanContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 285;
				Match(ToBoolean);
				State = 286;
				expression();
				State = 287;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case ToNumber:
				_localctx = new Convert_ToNumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 289;
				Match(ToNumber);
				State = 290;
				expression();
				State = 291;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case ToString:
				_localctx = new Convert_ToStringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 293;
				Match(ToString);
				State = 294;
				expression();
				State = 295;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case DegreeToGrad:
				_localctx = new Convert_DegreeToGradContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 297;
				Match(DegreeToGrad);
				State = 298;
				expression();
				State = 299;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case DegreeToRadian:
				_localctx = new Convert_DegreeToRadianContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 301;
				Match(DegreeToRadian);
				State = 302;
				expression();
				State = 303;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case GradToDegree:
				_localctx = new Convert_GradToDegreeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 305;
				Match(GradToDegree);
				State = 306;
				expression();
				State = 307;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case GradToRadian:
				_localctx = new Convert_GradToRadianContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 309;
				Match(GradToRadian);
				State = 310;
				expression();
				State = 311;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case RadianToDegree:
				_localctx = new Convert_RadianToDegreeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 313;
				Match(RadianToDegree);
				State = 314;
				expression();
				State = 315;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case RadianToGrad:
				_localctx = new Convert_RadianToGradContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 317;
				Match(RadianToGrad);
				State = 318;
				expression();
				State = 319;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_termContext : ParserRuleContext {
		public Datetime_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_term; } }
	 
		public Datetime_termContext() { }
		public virtual void CopyFrom(Datetime_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DateTime_DateHourMinuteContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DateTime() { return GetToken(EveryGrammarParser.DateTime, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_DateHourMinuteContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_DateHourMinute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_DateHourMinute(this);
		}
	}
	public partial class DateTime_DateHourMinuteSecondsContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DateTime() { return GetToken(EveryGrammarParser.DateTime, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_DateHourMinuteSecondsContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_DateHourMinuteSeconds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_DateHourMinuteSeconds(this);
		}
	}
	public partial class DateTime_DateEntryContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DateTime() { return GetToken(EveryGrammarParser.DateTime, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_DateEntryContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_DateEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_DateEntry(this);
		}
	}
	public partial class DateTime_FullContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DateTime() { return GetToken(EveryGrammarParser.DateTime, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_FullContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_Full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_Full(this);
		}
	}
	public partial class DateTime_ExpressionContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DateTime() { return GetToken(EveryGrammarParser.DateTime, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_ExpressionContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_Expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_Expression(this);
		}
	}
	public partial class DateTime_DateHourContext : Datetime_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DateTime() { return GetToken(EveryGrammarParser.DateTime, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public DateTime_DateHourContext(Datetime_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDateTime_DateHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDateTime_DateHour(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_termContext datetime_term() {
		Datetime_termContext _localctx = new Datetime_termContext(Context, State);
		EnterRule(_localctx, 32, RULE_datetime_term);
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new DateTime_ExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 323;
				Match(DateTime);
				State = 324;
				expression();
				State = 325;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new DateTime_DateEntryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 327;
				Match(DateTime);
				State = 328;
				expression();
				State = 329;
				Match(KOMMA);
				State = 330;
				expression();
				State = 331;
				Match(KOMMA);
				State = 332;
				expression();
				State = 333;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new DateTime_DateHourContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 335;
				Match(DateTime);
				State = 336;
				expression();
				State = 337;
				Match(KOMMA);
				State = 338;
				expression();
				State = 339;
				Match(KOMMA);
				State = 340;
				expression();
				State = 341;
				Match(KOMMA);
				State = 342;
				expression();
				State = 343;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				_localctx = new DateTime_DateHourMinuteContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 345;
				Match(DateTime);
				State = 346;
				expression();
				State = 347;
				Match(KOMMA);
				State = 348;
				expression();
				State = 349;
				Match(KOMMA);
				State = 350;
				expression();
				State = 351;
				Match(KOMMA);
				State = 352;
				expression();
				State = 353;
				Match(KOMMA);
				State = 354;
				expression();
				State = 355;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 5:
				_localctx = new DateTime_DateHourMinuteSecondsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 357;
				Match(DateTime);
				State = 358;
				expression();
				State = 359;
				Match(KOMMA);
				State = 360;
				expression();
				State = 361;
				Match(KOMMA);
				State = 362;
				expression();
				State = 363;
				Match(KOMMA);
				State = 364;
				expression();
				State = 365;
				Match(KOMMA);
				State = 366;
				expression();
				State = 367;
				Match(KOMMA);
				State = 368;
				expression();
				State = 369;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 6:
				_localctx = new DateTime_FullContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 371;
				Match(DateTime);
				State = 372;
				expression();
				State = 373;
				Match(KOMMA);
				State = 374;
				expression();
				State = 375;
				Match(KOMMA);
				State = 376;
				expression();
				State = 377;
				Match(KOMMA);
				State = 378;
				expression();
				State = 379;
				Match(KOMMA);
				State = 380;
				expression();
				State = 381;
				Match(KOMMA);
				State = 382;
				expression();
				State = 383;
				Match(KOMMA);
				State = 384;
				expression();
				State = 385;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_slicing_termContext : ParserRuleContext {
		public Array_slicing_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_slicing_term; } }
	 
		public Array_slicing_termContext() { }
		public virtual void CopyFrom(Array_slicing_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArraySlicing_IndexingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_IndexingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_Indexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_Indexing(this);
		}
	}
	public partial class ArraySlicing_EndSlicingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EveryGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_EndSlicingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_EndSlicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_EndSlicing(this);
		}
	}
	public partial class ArraySlicing_AllStepSlicingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(EveryGrammarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(EveryGrammarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_AllStepSlicingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_AllStepSlicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_AllStepSlicing(this);
		}
	}
	public partial class ArraySlicing_StartSlicingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EveryGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_StartSlicingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_StartSlicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_StartSlicing(this);
		}
	}
	public partial class ArraySlicing_SlicingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EveryGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_SlicingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_Slicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_Slicing(this);
		}
	}
	public partial class ArraySlicing_StepSlicingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(EveryGrammarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(EveryGrammarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_StepSlicingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_StepSlicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_StepSlicing(this);
		}
	}
	public partial class ArraySlicing_StartStepSlicingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(EveryGrammarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(EveryGrammarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_StartStepSlicingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_StartStepSlicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_StartStepSlicing(this);
		}
	}
	public partial class ArraySlicing_EndStepSlicingContext : Array_slicing_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(EveryGrammarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(EveryGrammarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArraySlicing_EndStepSlicingContext(Array_slicing_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArraySlicing_EndStepSlicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArraySlicing_EndStepSlicing(this);
		}
	}

	[RuleVersion(0)]
	public Array_slicing_termContext array_slicing_term() {
		Array_slicing_termContext _localctx = new Array_slicing_termContext(Context, State);
		EnterRule(_localctx, 34, RULE_array_slicing_term);
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new ArraySlicing_IndexingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 389;
				Match(EDGEBRACKETOPEN);
				State = 390;
				expression();
				State = 391;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new ArraySlicing_SlicingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 393;
				Match(EDGEBRACKETOPEN);
				State = 394;
				expression();
				State = 395;
				Match(COLON);
				State = 396;
				expression();
				State = 397;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new ArraySlicing_StepSlicingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 399;
				Match(EDGEBRACKETOPEN);
				State = 400;
				expression();
				State = 401;
				Match(COLON);
				State = 402;
				expression();
				State = 403;
				Match(COLON);
				State = 404;
				expression();
				State = 405;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 4:
				_localctx = new ArraySlicing_StartSlicingContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 407;
				Match(EDGEBRACKETOPEN);
				State = 408;
				expression();
				State = 409;
				Match(COLON);
				State = 410;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 5:
				_localctx = new ArraySlicing_StartStepSlicingContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 412;
				Match(EDGEBRACKETOPEN);
				State = 413;
				expression();
				State = 414;
				Match(COLON);
				State = 415;
				Match(COLON);
				State = 416;
				expression();
				State = 417;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 6:
				_localctx = new ArraySlicing_EndSlicingContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 419;
				Match(EDGEBRACKETOPEN);
				State = 420;
				Match(COLON);
				State = 421;
				expression();
				State = 422;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 7:
				_localctx = new ArraySlicing_EndStepSlicingContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 424;
				Match(EDGEBRACKETOPEN);
				State = 425;
				Match(COLON);
				State = 426;
				expression();
				State = 427;
				Match(COLON);
				State = 428;
				expression();
				State = 429;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 8:
				_localctx = new ArraySlicing_AllStepSlicingContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 431;
				Match(EDGEBRACKETOPEN);
				State = 432;
				Match(COLON);
				State = 433;
				Match(COLON);
				State = 434;
				expression();
				State = 435;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_function_termContext : ParserRuleContext {
		public Check_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_function_term; } }
	 
		public Check_function_termContext() { }
		public virtual void CopyFrom(Check_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CheckFunction_IsStringContext : Check_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsString() { return GetToken(EveryGrammarParser.IsString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public CheckFunction_IsStringContext(Check_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheckFunction_IsString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheckFunction_IsString(this);
		}
	}
	public partial class CheckFunction_IsArrayContext : Check_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsArray() { return GetToken(EveryGrammarParser.IsArray, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public CheckFunction_IsArrayContext(Check_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheckFunction_IsArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheckFunction_IsArray(this);
		}
	}
	public partial class CheckFunction_IsBooleanContext : Check_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsBoolean() { return GetToken(EveryGrammarParser.IsBoolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public CheckFunction_IsBooleanContext(Check_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheckFunction_IsBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheckFunction_IsBoolean(this);
		}
	}
	public partial class CheckFunction_IsDateTimeContext : Check_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsDateTime() { return GetToken(EveryGrammarParser.IsDateTime, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public CheckFunction_IsDateTimeContext(Check_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheckFunction_IsDateTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheckFunction_IsDateTime(this);
		}
	}
	public partial class CheckFunction_IsWhitespaceContext : Check_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsWhitespace() { return GetToken(EveryGrammarParser.IsWhitespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public CheckFunction_IsWhitespaceContext(Check_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheckFunction_IsWhitespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheckFunction_IsWhitespace(this);
		}
	}
	public partial class CheckFunction_HasDuplicatesContext : Check_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HasDuplicates() { return GetToken(EveryGrammarParser.HasDuplicates, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public CheckFunction_HasDuplicatesContext(Check_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheckFunction_HasDuplicates(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheckFunction_HasDuplicates(this);
		}
	}
	public partial class CheckFunction_HasAnyContext : Check_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HasAny() { return GetToken(EveryGrammarParser.HasAny, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public CheckFunction_HasAnyContext(Check_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheckFunction_HasAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheckFunction_HasAny(this);
		}
	}
	public partial class CheckFunction_IsNullContext : Check_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsNull() { return GetToken(EveryGrammarParser.IsNull, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public CheckFunction_IsNullContext(Check_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheckFunction_IsNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheckFunction_IsNull(this);
		}
	}
	public partial class CheckFunction_IsNumberContext : Check_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsNumber() { return GetToken(EveryGrammarParser.IsNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public CheckFunction_IsNumberContext(Check_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheckFunction_IsNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheckFunction_IsNumber(this);
		}
	}

	[RuleVersion(0)]
	public Check_function_termContext check_function_term() {
		Check_function_termContext _localctx = new Check_function_termContext(Context, State);
		EnterRule(_localctx, 36, RULE_check_function_term);
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IsArray:
				_localctx = new CheckFunction_IsArrayContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 439;
				Match(IsArray);
				State = 440;
				expression();
				State = 441;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case IsBoolean:
				_localctx = new CheckFunction_IsBooleanContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 443;
				Match(IsBoolean);
				State = 444;
				expression();
				State = 445;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case IsDateTime:
				_localctx = new CheckFunction_IsDateTimeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 447;
				Match(IsDateTime);
				State = 448;
				expression();
				State = 449;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case IsNull:
				_localctx = new CheckFunction_IsNullContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 451;
				Match(IsNull);
				State = 452;
				expression();
				State = 453;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case IsNumber:
				_localctx = new CheckFunction_IsNumberContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 455;
				Match(IsNumber);
				State = 456;
				expression();
				State = 457;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case IsString:
				_localctx = new CheckFunction_IsStringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 459;
				Match(IsString);
				State = 460;
				expression();
				State = 461;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case IsWhitespace:
				_localctx = new CheckFunction_IsWhitespaceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 463;
				Match(IsWhitespace);
				State = 464;
				expression();
				State = 465;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case HasAny:
				_localctx = new CheckFunction_HasAnyContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 467;
				Match(HasAny);
				State = 468;
				expression();
				State = 469;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case HasDuplicates:
				_localctx = new CheckFunction_HasDuplicatesContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 471;
				Match(HasDuplicates);
				State = 472;
				expression();
				State = 473;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_function_termContext : ParserRuleContext {
		public Default_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_function_term; } }
	 
		public Default_function_termContext() { }
		public virtual void CopyFrom(Default_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Function_ExceptContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Except() { return GetToken(EveryGrammarParser.Except, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_ExceptContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Except(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Except(this);
		}
	}
	public partial class Function_DifferenceContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Difference() { return GetToken(EveryGrammarParser.Difference, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_DifferenceContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Difference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Difference(this);
		}
	}
	public partial class Function_ConcatContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Concat() { return GetToken(EveryGrammarParser.Concat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_ConcatContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Concat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Concat(this);
		}
	}
	public partial class Function_IndexOfContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IndexOf() { return GetToken(EveryGrammarParser.IndexOf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_IndexOfContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_IndexOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_IndexOf(this);
		}
	}
	public partial class Function_DistincContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Distinct() { return GetToken(EveryGrammarParser.Distinct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_DistincContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Distinc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Distinc(this);
		}
	}
	public partial class Function_LowerContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LowerCase() { return GetToken(EveryGrammarParser.LowerCase, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_LowerContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Lower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Lower(this);
		}
	}
	public partial class Function_UpperContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UpperCase() { return GetToken(EveryGrammarParser.UpperCase, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_UpperContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Upper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Upper(this);
		}
	}
	public partial class Function_TrimContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Trim() { return GetToken(EveryGrammarParser.Trim, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_TrimContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Trim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Trim(this);
		}
	}
	public partial class Function_IndexOfStartContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IndexOf() { return GetToken(EveryGrammarParser.IndexOf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_IndexOfStartContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_IndexOfStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_IndexOfStart(this);
		}
	}
	public partial class Function_IndexOfStartEndContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IndexOf() { return GetToken(EveryGrammarParser.IndexOf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_IndexOfStartEndContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_IndexOfStartEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_IndexOfStartEnd(this);
		}
	}
	public partial class Function_SortContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sort() { return GetToken(EveryGrammarParser.Sort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_SortContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Sort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Sort(this);
		}
	}
	public partial class Function_CountContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Count() { return GetToken(EveryGrammarParser.Count, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_CountContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Count(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Count(this);
		}
	}
	public partial class Function_ReverseContext : Default_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Reverse() { return GetToken(EveryGrammarParser.Reverse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Function_ReverseContext(Default_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_Reverse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_Reverse(this);
		}
	}

	[RuleVersion(0)]
	public Default_function_termContext default_function_term() {
		Default_function_termContext _localctx = new Default_function_termContext(Context, State);
		EnterRule(_localctx, 38, RULE_default_function_term);
		try {
			State = 547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new Function_ConcatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 477;
				Match(Concat);
				State = 478;
				expression();
				State = 479;
				Match(KOMMA);
				State = 480;
				expression();
				State = 481;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new Function_CountContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 483;
				Match(Count);
				State = 484;
				expression();
				State = 485;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new Function_DistincContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 487;
				Match(Distinct);
				State = 488;
				expression();
				State = 489;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				_localctx = new Function_DifferenceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 491;
				Match(Difference);
				State = 492;
				expression();
				State = 493;
				Match(KOMMA);
				State = 494;
				expression();
				State = 495;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 5:
				_localctx = new Function_ExceptContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 497;
				Match(Except);
				State = 498;
				expression();
				State = 499;
				Match(KOMMA);
				State = 500;
				expression();
				State = 501;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 6:
				_localctx = new Function_IndexOfContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 503;
				Match(IndexOf);
				State = 504;
				expression();
				State = 505;
				Match(KOMMA);
				State = 506;
				expression();
				State = 507;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 7:
				_localctx = new Function_IndexOfStartContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 509;
				Match(IndexOf);
				State = 510;
				expression();
				State = 511;
				Match(KOMMA);
				State = 512;
				expression();
				State = 513;
				Match(KOMMA);
				State = 514;
				expression();
				State = 515;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 8:
				_localctx = new Function_IndexOfStartEndContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 517;
				Match(IndexOf);
				State = 518;
				expression();
				State = 519;
				Match(KOMMA);
				State = 520;
				expression();
				State = 521;
				Match(KOMMA);
				State = 522;
				expression();
				State = 523;
				Match(KOMMA);
				State = 524;
				expression();
				State = 525;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 9:
				_localctx = new Function_LowerContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 527;
				Match(LowerCase);
				State = 528;
				expression();
				State = 529;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 10:
				_localctx = new Function_ReverseContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 531;
				Match(Reverse);
				State = 532;
				expression();
				State = 533;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 11:
				_localctx = new Function_UpperContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 535;
				Match(UpperCase);
				State = 536;
				expression();
				State = 537;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 12:
				_localctx = new Function_SortContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 539;
				Match(Sort);
				State = 540;
				expression();
				State = 541;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 13:
				_localctx = new Function_TrimContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 543;
				Match(Trim);
				State = 544;
				expression();
				State = 545;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_function_termContext : ParserRuleContext {
		public Math_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_function_term; } }
	 
		public Math_function_termContext() { }
		public virtual void CopyFrom(Math_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Math_NormContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Norm() { return GetToken(EveryGrammarParser.Norm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_NormContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Norm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Norm(this);
		}
	}
	public partial class Math_CscHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CscH() { return GetToken(EveryGrammarParser.CscH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CscHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_CscH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_CscH(this);
		}
	}
	public partial class Math_ASinContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASin() { return GetToken(EveryGrammarParser.ASin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ASinContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ASin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ASin(this);
		}
	}
	public partial class Math_TanHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TanH() { return GetToken(EveryGrammarParser.TanH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_TanHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_TanH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_TanH(this);
		}
	}
	public partial class Math_EulerNormContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EulerNorm() { return GetToken(EveryGrammarParser.EulerNorm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_EulerNormContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_EulerNorm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_EulerNorm(this);
		}
	}
	public partial class Math_ASecContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASec() { return GetToken(EveryGrammarParser.ASec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ASecContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ASec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ASec(this);
		}
	}
	public partial class Math_DerivativeContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Derivative() { return GetToken(EveryGrammarParser.Derivative, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_DerivativeContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Derivative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Derivative(this);
		}
	}
	public partial class Math_Round_Not_DecimalContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Round() { return GetToken(EveryGrammarParser.Round, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Round_Not_DecimalContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Round_Not_Decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Round_Not_Decimal(this);
		}
	}
	public partial class Math_DotProductContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotProduct() { return GetToken(EveryGrammarParser.DotProduct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_DotProductContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_DotProduct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_DotProduct(this);
		}
	}
	public partial class Math_ASinHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASinH() { return GetToken(EveryGrammarParser.ASinH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ASinHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ASinH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ASinH(this);
		}
	}
	public partial class Math_CotHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CotH() { return GetToken(EveryGrammarParser.CotH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CotHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_CotH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_CotH(this);
		}
	}
	public partial class Math_Max_ArrayContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Max() { return GetToken(EveryGrammarParser.Max, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Max_ArrayContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Max_Array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Max_Array(this);
		}
	}
	public partial class Math_CosContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cos() { return GetToken(EveryGrammarParser.Cos, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CosContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Cos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Cos(this);
		}
	}
	public partial class Math_CotContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cot() { return GetToken(EveryGrammarParser.Cot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CotContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Cot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Cot(this);
		}
	}
	public partial class Math_ACscContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACsc() { return GetToken(EveryGrammarParser.ACsc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACscContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACsc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACsc(this);
		}
	}
	public partial class Math_TanContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tan() { return GetToken(EveryGrammarParser.Tan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_TanContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Tan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Tan(this);
		}
	}
	public partial class Math_BinomilaContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Binomial() { return GetToken(EveryGrammarParser.Binomial, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_BinomilaContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Binomila(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Binomila(this);
		}
	}
	public partial class Math_ExpContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exp() { return GetToken(EveryGrammarParser.Exp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ExpContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Exp(this);
		}
	}
	public partial class Math_FloorContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Floor() { return GetToken(EveryGrammarParser.Floor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_FloorContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Floor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Floor(this);
		}
	}
	public partial class Math_RootContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Root() { return GetToken(EveryGrammarParser.Root, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_RootContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Root(this);
		}
	}
	public partial class Math_ACotHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACotH() { return GetToken(EveryGrammarParser.ACotH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACotHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACotH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACotH(this);
		}
	}
	public partial class Math_CbrtContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cbrt() { return GetToken(EveryGrammarParser.Cbrt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CbrtContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Cbrt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Cbrt(this);
		}
	}
	public partial class Math_ACotContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACot() { return GetToken(EveryGrammarParser.ACot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACotContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACot(this);
		}
	}
	public partial class Math_ACosContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACos() { return GetToken(EveryGrammarParser.ACos, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACosContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACos(this);
		}
	}
	public partial class Math_ATanHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATanH() { return GetToken(EveryGrammarParser.ATanH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ATanHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ATanH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ATanH(this);
		}
	}
	public partial class Math_CrossSumContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CrossSum() { return GetToken(EveryGrammarParser.CrossSum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CrossSumContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_CrossSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_CrossSum(this);
		}
	}
	public partial class Math_GreatesCommonDivisorContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreatestCommonDivisor() { return GetToken(EveryGrammarParser.GreatestCommonDivisor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_GreatesCommonDivisorContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_GreatesCommonDivisor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_GreatesCommonDivisor(this);
		}
	}
	public partial class Math_LogContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Log() { return GetToken(EveryGrammarParser.Log, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_LogContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Log(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Log(this);
		}
	}
	public partial class Math_Round_DecimalContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Round() { return GetToken(EveryGrammarParser.Round, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Round_DecimalContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Round_Decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Round_Decimal(this);
		}
	}
	public partial class Math_PowerContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(EveryGrammarParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_PowerContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Power(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Power(this);
		}
	}
	public partial class Math_MaxNormContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxNorm() { return GetToken(EveryGrammarParser.MaxNorm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_MaxNormContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_MaxNorm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_MaxNorm(this);
		}
	}
	public partial class Math_ASecHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASecH() { return GetToken(EveryGrammarParser.ASecH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ASecHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ASecH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ASecH(this);
		}
	}
	public partial class Math_ACosHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACosH() { return GetToken(EveryGrammarParser.ACosH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACosHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACosH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACosH(this);
		}
	}
	public partial class Math_ClampContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Clamp() { return GetToken(EveryGrammarParser.Clamp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ClampContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Clamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Clamp(this);
		}
	}
	public partial class Math_Min_ArrayContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Min() { return GetToken(EveryGrammarParser.Min, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Min_ArrayContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Min_Array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Min_Array(this);
		}
	}
	public partial class Math_SinHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SinH() { return GetToken(EveryGrammarParser.SinH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SinHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_SinH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_SinH(this);
		}
	}
	public partial class Math_Log2Context : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Log2() { return GetToken(EveryGrammarParser.Log2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Log2Context(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Log2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Log2(this);
		}
	}
	public partial class Math_SecContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sec() { return GetToken(EveryGrammarParser.Sec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SecContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Sec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Sec(this);
		}
	}
	public partial class Math_ATan2Context : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATan2() { return GetToken(EveryGrammarParser.ATan2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ATan2Context(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ATan2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ATan2(this);
		}
	}
	public partial class Math_ACscHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACscH() { return GetToken(EveryGrammarParser.ACscH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ACscHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ACscH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ACscH(this);
		}
	}
	public partial class Math_ATanContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATan() { return GetToken(EveryGrammarParser.ATan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_ATanContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_ATan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_ATan(this);
		}
	}
	public partial class Math_TruncateContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Truncate() { return GetToken(EveryGrammarParser.Truncate, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_TruncateContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Truncate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Truncate(this);
		}
	}
	public partial class Math_Max_TwoContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Max() { return GetToken(EveryGrammarParser.Max, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Max_TwoContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Max_Two(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Max_Two(this);
		}
	}
	public partial class Math_LeastCommonMultipleContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeastCommonMultiple() { return GetToken(EveryGrammarParser.LeastCommonMultiple, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_LeastCommonMultipleContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_LeastCommonMultiple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_LeastCommonMultiple(this);
		}
	}
	public partial class Math_IntegrationContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integration() { return GetToken(EveryGrammarParser.Integration, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_IntegrationContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Integration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Integration(this);
		}
	}
	public partial class Math_SqrtContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sqrt() { return GetToken(EveryGrammarParser.Sqrt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SqrtContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Sqrt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Sqrt(this);
		}
	}
	public partial class Math_Min_TwoContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Min() { return GetToken(EveryGrammarParser.Min, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Min_TwoContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Min_Two(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Min_Two(this);
		}
	}
	public partial class Math_SinContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sin() { return GetToken(EveryGrammarParser.Sin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SinContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Sin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Sin(this);
		}
	}
	public partial class Math_CscContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Csc() { return GetToken(EveryGrammarParser.Csc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CscContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Csc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Csc(this);
		}
	}
	public partial class Math_AbsContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abs() { return GetToken(EveryGrammarParser.Abs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_AbsContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Abs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Abs(this);
		}
	}
	public partial class Math_CosHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CosH() { return GetToken(EveryGrammarParser.CosH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CosHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_CosH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_CosH(this);
		}
	}
	public partial class Math_CeillingContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ceilling() { return GetToken(EveryGrammarParser.Ceilling, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_CeillingContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Ceilling(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Ceilling(this);
		}
	}
	public partial class Math_Log10Context : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Log10() { return GetToken(EveryGrammarParser.Log10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_Log10Context(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_Log10(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_Log10(this);
		}
	}
	public partial class Math_SecHContext : Math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SecH() { return GetToken(EveryGrammarParser.SecH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Math_SecHContext(Math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_SecH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_SecH(this);
		}
	}

	[RuleVersion(0)]
	public Math_function_termContext math_function_term() {
		Math_function_termContext _localctx = new Math_function_termContext(Context, State);
		EnterRule(_localctx, 40, RULE_math_function_term);
		try {
			State = 803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new Math_AbsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 549;
				Match(Abs);
				State = 550;
				expression();
				State = 551;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new Math_ACosContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 553;
				Match(ACos);
				State = 554;
				expression();
				State = 555;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				_localctx = new Math_ACosHContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 557;
				Match(ACosH);
				State = 558;
				expression();
				State = 559;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				_localctx = new Math_ASinContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 561;
				Match(ASin);
				State = 562;
				expression();
				State = 563;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 5:
				_localctx = new Math_ASinHContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 565;
				Match(ASinH);
				State = 566;
				expression();
				State = 567;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 6:
				_localctx = new Math_ATanContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 569;
				Match(ATan);
				State = 570;
				expression();
				State = 571;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 7:
				_localctx = new Math_ATan2Context(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 573;
				Match(ATan2);
				State = 574;
				expression();
				State = 575;
				Match(KOMMA);
				State = 576;
				expression();
				State = 577;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 8:
				_localctx = new Math_ATanHContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 579;
				Match(ATanH);
				State = 580;
				expression();
				State = 581;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 9:
				_localctx = new Math_CbrtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 583;
				Match(Cbrt);
				State = 584;
				expression();
				State = 585;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 10:
				_localctx = new Math_CosContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 587;
				Match(Cos);
				State = 588;
				expression();
				State = 589;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 11:
				_localctx = new Math_CosHContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 591;
				Match(CosH);
				State = 592;
				expression();
				State = 593;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 12:
				_localctx = new Math_CeillingContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 595;
				Match(Ceilling);
				State = 596;
				expression();
				State = 597;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 13:
				_localctx = new Math_ClampContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 599;
				Match(Clamp);
				State = 600;
				expression();
				State = 601;
				Match(KOMMA);
				State = 602;
				expression();
				State = 603;
				Match(KOMMA);
				State = 604;
				expression();
				State = 605;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 14:
				_localctx = new Math_CrossSumContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 607;
				Match(CrossSum);
				State = 608;
				expression();
				State = 609;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 15:
				_localctx = new Math_DerivativeContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 611;
				Match(Derivative);
				State = 612;
				expression();
				State = 613;
				Match(KOMMA);
				State = 614;
				expression();
				State = 615;
				Match(KOMMA);
				State = 616;
				expression();
				State = 617;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 16:
				_localctx = new Math_ExpContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 619;
				Match(Exp);
				State = 620;
				expression();
				State = 621;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 17:
				_localctx = new Math_FloorContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 623;
				Match(Floor);
				State = 624;
				expression();
				State = 625;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 18:
				_localctx = new Math_IntegrationContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 627;
				Match(Integration);
				State = 628;
				expression();
				State = 629;
				Match(KOMMA);
				State = 630;
				expression();
				State = 631;
				Match(KOMMA);
				State = 632;
				expression();
				State = 633;
				Match(KOMMA);
				State = 634;
				expression();
				State = 635;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 19:
				_localctx = new Math_LogContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 637;
				Match(Log);
				State = 638;
				expression();
				State = 639;
				Match(KOMMA);
				State = 640;
				expression();
				State = 641;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 20:
				_localctx = new Math_Log2Context(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 643;
				Match(Log2);
				State = 644;
				expression();
				State = 645;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 21:
				_localctx = new Math_Log10Context(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 647;
				Match(Log10);
				State = 648;
				expression();
				State = 649;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 22:
				_localctx = new Math_Max_ArrayContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 651;
				Match(Max);
				State = 652;
				expression();
				State = 653;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 23:
				_localctx = new Math_Max_TwoContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 655;
				Match(Max);
				State = 656;
				expression();
				State = 657;
				Match(KOMMA);
				State = 658;
				expression();
				State = 659;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 24:
				_localctx = new Math_Min_ArrayContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 661;
				Match(Min);
				State = 662;
				expression();
				State = 663;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 25:
				_localctx = new Math_Min_TwoContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 665;
				Match(Min);
				State = 666;
				expression();
				State = 667;
				Match(KOMMA);
				State = 668;
				expression();
				State = 669;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 26:
				_localctx = new Math_PowerContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 671;
				Match(Power);
				State = 672;
				expression();
				State = 673;
				Match(KOMMA);
				State = 674;
				expression();
				State = 675;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 27:
				_localctx = new Math_Round_Not_DecimalContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 677;
				Match(Round);
				State = 678;
				expression();
				State = 679;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 28:
				_localctx = new Math_Round_DecimalContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 681;
				Match(Round);
				State = 682;
				expression();
				State = 683;
				Match(KOMMA);
				State = 684;
				expression();
				State = 685;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 29:
				_localctx = new Math_RootContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 687;
				Match(Root);
				State = 688;
				expression();
				State = 689;
				Match(KOMMA);
				State = 690;
				expression();
				State = 691;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 30:
				_localctx = new Math_SinContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 693;
				Match(Sin);
				State = 694;
				expression();
				State = 695;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 31:
				_localctx = new Math_SinHContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 697;
				Match(SinH);
				State = 698;
				expression();
				State = 699;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 32:
				_localctx = new Math_SqrtContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 701;
				Match(Sqrt);
				State = 702;
				expression();
				State = 703;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 33:
				_localctx = new Math_TanContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 705;
				Match(Tan);
				State = 706;
				expression();
				State = 707;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 34:
				_localctx = new Math_TanHContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 709;
				Match(TanH);
				State = 710;
				expression();
				State = 711;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 35:
				_localctx = new Math_TruncateContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 713;
				Match(Truncate);
				State = 714;
				expression();
				State = 715;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 36:
				_localctx = new Math_NormContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 717;
				Match(Norm);
				State = 718;
				expression();
				State = 719;
				Match(KOMMA);
				State = 720;
				expression();
				State = 721;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 37:
				_localctx = new Math_EulerNormContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 723;
				Match(EulerNorm);
				State = 724;
				expression();
				State = 725;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 38:
				_localctx = new Math_MaxNormContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 727;
				Match(MaxNorm);
				State = 728;
				expression();
				State = 729;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 39:
				_localctx = new Math_GreatesCommonDivisorContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 731;
				Match(GreatestCommonDivisor);
				State = 732;
				expression();
				State = 733;
				Match(KOMMA);
				State = 734;
				expression();
				State = 735;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 40:
				_localctx = new Math_LeastCommonMultipleContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 737;
				Match(LeastCommonMultiple);
				State = 738;
				expression();
				State = 739;
				Match(KOMMA);
				State = 740;
				expression();
				State = 741;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 41:
				_localctx = new Math_DotProductContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 743;
				Match(DotProduct);
				State = 744;
				expression();
				State = 745;
				Match(KOMMA);
				State = 746;
				expression();
				State = 747;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 42:
				_localctx = new Math_BinomilaContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 749;
				Match(Binomial);
				State = 750;
				expression();
				State = 751;
				Match(KOMMA);
				State = 752;
				expression();
				State = 753;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 43:
				_localctx = new Math_ACotContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 755;
				Match(ACot);
				State = 756;
				expression();
				State = 757;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 44:
				_localctx = new Math_ACotHContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 759;
				Match(ACotH);
				State = 760;
				expression();
				State = 761;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 45:
				_localctx = new Math_ACscContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 763;
				Match(ACsc);
				State = 764;
				expression();
				State = 765;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 46:
				_localctx = new Math_ACscHContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 767;
				Match(ACscH);
				State = 768;
				expression();
				State = 769;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 47:
				_localctx = new Math_ASecContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 771;
				Match(ASec);
				State = 772;
				expression();
				State = 773;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 48:
				_localctx = new Math_ASecHContext(_localctx);
				EnterOuterAlt(_localctx, 48);
				{
				State = 775;
				Match(ASecH);
				State = 776;
				expression();
				State = 777;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 49:
				_localctx = new Math_CotContext(_localctx);
				EnterOuterAlt(_localctx, 49);
				{
				State = 779;
				Match(Cot);
				State = 780;
				expression();
				State = 781;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 50:
				_localctx = new Math_CotHContext(_localctx);
				EnterOuterAlt(_localctx, 50);
				{
				State = 783;
				Match(CotH);
				State = 784;
				expression();
				State = 785;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 51:
				_localctx = new Math_CscContext(_localctx);
				EnterOuterAlt(_localctx, 51);
				{
				State = 787;
				Match(Csc);
				State = 788;
				expression();
				State = 789;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 52:
				_localctx = new Math_CscHContext(_localctx);
				EnterOuterAlt(_localctx, 52);
				{
				State = 791;
				Match(CscH);
				State = 792;
				expression();
				State = 793;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 53:
				_localctx = new Math_SecContext(_localctx);
				EnterOuterAlt(_localctx, 53);
				{
				State = 795;
				Match(Sec);
				State = 796;
				expression();
				State = 797;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 54:
				_localctx = new Math_SecHContext(_localctx);
				EnterOuterAlt(_localctx, 54);
				{
				State = 799;
				Match(SecH);
				State = 800;
				expression();
				State = 801;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statistic_math_function_termContext : ParserRuleContext {
		public Statistic_math_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statistic_math_function_term; } }
	 
		public Statistic_math_function_termContext() { }
		public virtual void CopyFrom(Statistic_math_function_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathStatistic_PearsonContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pearson() { return GetToken(EveryGrammarParser.Pearson, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_PearsonContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Pearson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Pearson(this);
		}
	}
	public partial class MathStatistic_MedianContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Median() { return GetToken(EveryGrammarParser.Median, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_MedianContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Median(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Median(this);
		}
	}
	public partial class MathStatistic_VarianceContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Variance() { return GetToken(EveryGrammarParser.Variance, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_VarianceContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Variance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Variance(this);
		}
	}
	public partial class MathStatistic_CoVarianceContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CoVariance() { return GetToken(EveryGrammarParser.CoVariance, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_CoVarianceContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_CoVariance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_CoVariance(this);
		}
	}
	public partial class MathStatistic_SpearmanContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Spearman() { return GetToken(EveryGrammarParser.Spearman, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_SpearmanContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Spearman(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Spearman(this);
		}
	}
	public partial class MathStatistic_MeanContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mean() { return GetToken(EveryGrammarParser.Mean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_MeanContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Mean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Mean(this);
		}
	}
	public partial class MathStatistic_QuantilContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quantil() { return GetToken(EveryGrammarParser.Quantil, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_QuantilContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_Quantil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_Quantil(this);
		}
	}
	public partial class MathStatistic_StDContext : Statistic_math_function_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Std() { return GetToken(EveryGrammarParser.Std, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public MathStatistic_StDContext(Statistic_math_function_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMathStatistic_StD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMathStatistic_StD(this);
		}
	}

	[RuleVersion(0)]
	public Statistic_math_function_termContext statistic_math_function_term() {
		Statistic_math_function_termContext _localctx = new Statistic_math_function_termContext(Context, State);
		EnterRule(_localctx, 42, RULE_statistic_math_function_term);
		try {
			State = 845;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CoVariance:
				_localctx = new MathStatistic_CoVarianceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 805;
				Match(CoVariance);
				State = 806;
				expression();
				State = 807;
				Match(KOMMA);
				State = 808;
				expression();
				State = 809;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case Mean:
				_localctx = new MathStatistic_MeanContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 811;
				Match(Mean);
				State = 812;
				expression();
				State = 813;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case Median:
				_localctx = new MathStatistic_MedianContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 815;
				Match(Median);
				State = 816;
				expression();
				State = 817;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case Pearson:
				_localctx = new MathStatistic_PearsonContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 819;
				Match(Pearson);
				State = 820;
				expression();
				State = 821;
				Match(KOMMA);
				State = 822;
				expression();
				State = 823;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case Quantil:
				_localctx = new MathStatistic_QuantilContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 825;
				Match(Quantil);
				State = 826;
				expression();
				State = 827;
				Match(KOMMA);
				State = 828;
				expression();
				State = 829;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case Spearman:
				_localctx = new MathStatistic_SpearmanContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 831;
				Match(Spearman);
				State = 832;
				expression();
				State = 833;
				Match(KOMMA);
				State = 834;
				expression();
				State = 835;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case Std:
				_localctx = new MathStatistic_StDContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 837;
				Match(Std);
				State = 838;
				expression();
				State = 839;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case Variance:
				_localctx = new MathStatistic_VarianceContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 841;
				Match(Variance);
				State = 842;
				expression();
				State = 843;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		public Expr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterExpr_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitExpr_args(this);
		}
	}

	[RuleVersion(0)]
	public Expr_argsContext expr_args() {
		Expr_argsContext _localctx = new Expr_argsContext(Context, State);
		EnterRule(_localctx, 44, RULE_expr_args);
		try {
			State = 852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 847;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 848;
				expression();
				State = 849;
				Match(KOMMA);
				State = 850;
				expr_args();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
	 
		public Array_exprContext() { }
		public virtual void CopyFrom(Array_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayCreationContext : Array_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArrayCreationContext(Array_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArrayCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArrayCreation(this);
		}
	}
	public partial class ArrayCreation_EmptyContext : Array_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public ArrayCreation_EmptyContext(Array_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArrayCreation_Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArrayCreation_Empty(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 46, RULE_array_expr);
		try {
			State = 860;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new ArrayCreation_EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 854;
				Match(EDGEBRACKETOPEN);
				State = 855;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			case 2:
				_localctx = new ArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 856;
				Match(EDGEBRACKETOPEN);
				State = 857;
				expr_args();
				State = 858;
				Match(EDGEBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return bool_and_term_sempred((Bool_and_termContext)_localctx, predIndex);
		case 7: return equality_sempred((EqualityContext)_localctx, predIndex);
		case 8: return check_sempred((CheckContext)_localctx, predIndex);
		case 9: return bit_or_term_sempred((Bit_or_termContext)_localctx, predIndex);
		case 10: return bit_and_term_sempred((Bit_and_termContext)_localctx, predIndex);
		case 11: return line_term_sempred((Line_termContext)_localctx, predIndex);
		case 12: return point_term_sempred((Point_termContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bool_and_term_sempred(Bool_and_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_sempred(EqualityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_or_term_sempred(Bit_or_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_and_term_sempred(Bit_and_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool line_term_sempred(Line_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool point_term_sempred(Point_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 7);
		case 16: return Precpred(Context, 6);
		case 17: return Precpred(Context, 5);
		case 18: return Precpred(Context, 4);
		case 19: return Precpred(Context, 3);
		case 20: return Precpred(Context, 2);
		case 21: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,135,863,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,3,2,63,8,2,1,3,1,3,1,3,1,3,1,3,3,3,70,8,3,1,4,1,4,1,4,1,4,1,4,3,
		4,77,8,4,1,5,1,5,1,5,1,5,1,5,3,5,84,8,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,92,
		8,6,10,6,12,6,95,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,119,8,7,10,7,12,7,122,9,7,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,139,8,8,
		10,8,12,8,142,9,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,150,8,9,10,9,12,9,153,9,
		9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,161,8,10,10,10,12,10,164,9,10,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,175,8,11,10,11,12,11,178,
		9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,204,8,12,10,
		12,12,12,207,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,3,13,238,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,3,14,280,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,3,15,322,8,15,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,3,16,388,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,438,8,17,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,476,8,18,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,548,8,19,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		3,20,804,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,3,21,846,8,21,1,22,1,22,1,22,1,22,1,22,3,22,853,8,22,1,23,1,23,1,23,
		1,23,1,23,1,23,3,23,861,8,23,1,23,0,7,12,14,16,18,20,22,24,24,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,0,0,995,0,48,
		1,0,0,0,2,50,1,0,0,0,4,62,1,0,0,0,6,69,1,0,0,0,8,76,1,0,0,0,10,83,1,0,
		0,0,12,85,1,0,0,0,14,96,1,0,0,0,16,123,1,0,0,0,18,143,1,0,0,0,20,154,1,
		0,0,0,22,165,1,0,0,0,24,179,1,0,0,0,26,237,1,0,0,0,28,279,1,0,0,0,30,321,
		1,0,0,0,32,387,1,0,0,0,34,437,1,0,0,0,36,475,1,0,0,0,38,547,1,0,0,0,40,
		803,1,0,0,0,42,845,1,0,0,0,44,852,1,0,0,0,46,860,1,0,0,0,48,49,3,2,1,0,
		49,1,1,0,0,0,50,51,3,4,2,0,51,3,1,0,0,0,52,63,3,6,3,0,53,54,3,6,3,0,54,
		55,3,34,17,0,55,63,1,0,0,0,56,57,3,6,3,0,57,58,5,23,0,0,58,59,3,6,3,0,
		59,60,5,22,0,0,60,61,3,6,3,0,61,63,1,0,0,0,62,52,1,0,0,0,62,53,1,0,0,0,
		62,56,1,0,0,0,63,5,1,0,0,0,64,70,3,8,4,0,65,66,5,32,0,0,66,67,3,4,2,0,
		67,68,5,33,0,0,68,70,1,0,0,0,69,64,1,0,0,0,69,65,1,0,0,0,70,7,1,0,0,0,
		71,77,3,10,5,0,72,73,3,10,5,0,73,74,5,13,0,0,74,75,3,10,5,0,75,77,1,0,
		0,0,76,71,1,0,0,0,76,72,1,0,0,0,77,9,1,0,0,0,78,84,3,12,6,0,79,80,3,12,
		6,0,80,81,5,7,0,0,81,82,3,12,6,0,82,84,1,0,0,0,83,78,1,0,0,0,83,79,1,0,
		0,0,84,11,1,0,0,0,85,86,6,6,-1,0,86,87,3,14,7,0,87,93,1,0,0,0,88,89,10,
		1,0,0,89,90,5,14,0,0,90,92,3,14,7,0,91,88,1,0,0,0,92,95,1,0,0,0,93,91,
		1,0,0,0,93,94,1,0,0,0,94,13,1,0,0,0,95,93,1,0,0,0,96,97,6,7,-1,0,97,98,
		3,16,8,0,98,120,1,0,0,0,99,100,10,6,0,0,100,101,5,8,0,0,101,119,3,16,8,
		0,102,103,10,5,0,0,103,104,5,11,0,0,104,119,3,16,8,0,105,106,10,4,0,0,
		106,107,5,9,0,0,107,119,3,16,8,0,108,109,10,3,0,0,109,110,5,12,0,0,110,
		119,3,16,8,0,111,112,10,2,0,0,112,113,5,27,0,0,113,119,3,16,8,0,114,115,
		10,1,0,0,115,116,5,10,0,0,116,117,5,27,0,0,117,119,3,16,8,0,118,99,1,0,
		0,0,118,102,1,0,0,0,118,105,1,0,0,0,118,108,1,0,0,0,118,111,1,0,0,0,118,
		114,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,15,1,0,
		0,0,122,120,1,0,0,0,123,124,6,8,-1,0,124,125,3,18,9,0,125,140,1,0,0,0,
		126,127,10,4,0,0,127,128,5,19,0,0,128,139,3,18,9,0,129,130,10,3,0,0,130,
		131,5,17,0,0,131,139,3,18,9,0,132,133,10,2,0,0,133,134,5,20,0,0,134,139,
		3,18,9,0,135,136,10,1,0,0,136,137,5,18,0,0,137,139,3,18,9,0,138,126,1,
		0,0,0,138,129,1,0,0,0,138,132,1,0,0,0,138,135,1,0,0,0,139,142,1,0,0,0,
		140,138,1,0,0,0,140,141,1,0,0,0,141,17,1,0,0,0,142,140,1,0,0,0,143,144,
		6,9,-1,0,144,145,3,20,10,0,145,151,1,0,0,0,146,147,10,1,0,0,147,148,5,
		15,0,0,148,150,3,20,10,0,149,146,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,
		0,151,152,1,0,0,0,152,19,1,0,0,0,153,151,1,0,0,0,154,155,6,10,-1,0,155,
		156,3,22,11,0,156,162,1,0,0,0,157,158,10,1,0,0,158,159,5,16,0,0,159,161,
		3,22,11,0,160,157,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,
		0,0,163,21,1,0,0,0,164,162,1,0,0,0,165,166,6,11,-1,0,166,167,3,24,12,0,
		167,176,1,0,0,0,168,169,10,2,0,0,169,170,5,1,0,0,170,175,3,24,12,0,171,
		172,10,1,0,0,172,173,5,2,0,0,173,175,3,24,12,0,174,168,1,0,0,0,174,171,
		1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,23,1,0,0,0,
		178,176,1,0,0,0,179,180,6,12,-1,0,180,181,3,26,13,0,181,205,1,0,0,0,182,
		183,10,7,0,0,183,184,5,3,0,0,184,204,3,26,13,0,185,186,10,6,0,0,186,187,
		5,6,0,0,187,204,3,26,13,0,188,189,10,5,0,0,189,190,5,5,0,0,190,204,3,26,
		13,0,191,192,10,4,0,0,192,193,5,25,0,0,193,204,3,26,13,0,194,195,10,3,
		0,0,195,196,5,26,0,0,196,204,3,26,13,0,197,198,10,2,0,0,198,199,5,4,0,
		0,199,204,3,26,13,0,200,201,10,1,0,0,201,202,5,24,0,0,202,204,3,26,13,
		0,203,182,1,0,0,0,203,185,1,0,0,0,203,188,1,0,0,0,203,191,1,0,0,0,203,
		194,1,0,0,0,203,197,1,0,0,0,203,200,1,0,0,0,204,207,1,0,0,0,205,203,1,
		0,0,0,205,206,1,0,0,0,206,25,1,0,0,0,207,205,1,0,0,0,208,209,5,10,0,0,
		209,238,3,26,13,0,210,211,5,2,0,0,211,238,3,26,13,0,212,213,5,1,0,0,213,
		238,3,26,13,0,214,215,5,21,0,0,215,238,3,26,13,0,216,217,5,28,0,0,217,
		238,3,26,13,0,218,219,5,32,0,0,219,220,3,2,1,0,220,221,5,33,0,0,221,238,
		1,0,0,0,222,238,5,30,0,0,223,238,5,31,0,0,224,238,5,40,0,0,225,238,5,36,
		0,0,226,238,5,38,0,0,227,238,5,39,0,0,228,238,5,37,0,0,229,238,3,32,16,
		0,230,238,3,46,23,0,231,238,3,38,19,0,232,238,3,36,18,0,233,238,3,30,15,
		0,234,238,3,40,20,0,235,238,3,28,14,0,236,238,3,42,21,0,237,208,1,0,0,
		0,237,210,1,0,0,0,237,212,1,0,0,0,237,214,1,0,0,0,237,216,1,0,0,0,237,
		218,1,0,0,0,237,222,1,0,0,0,237,223,1,0,0,0,237,224,1,0,0,0,237,225,1,
		0,0,0,237,226,1,0,0,0,237,227,1,0,0,0,237,228,1,0,0,0,237,229,1,0,0,0,
		237,230,1,0,0,0,237,231,1,0,0,0,237,232,1,0,0,0,237,233,1,0,0,0,237,234,
		1,0,0,0,237,235,1,0,0,0,237,236,1,0,0,0,238,27,1,0,0,0,239,240,5,134,0,
		0,240,280,5,33,0,0,241,242,5,134,0,0,242,243,3,2,1,0,243,244,5,33,0,0,
		244,280,1,0,0,0,245,246,5,134,0,0,246,247,3,2,1,0,247,248,5,29,0,0,248,
		249,3,2,1,0,249,250,5,33,0,0,250,280,1,0,0,0,251,252,5,134,0,0,252,253,
		3,2,1,0,253,254,5,29,0,0,254,255,3,2,1,0,255,256,5,29,0,0,256,257,3,2,
		1,0,257,258,5,33,0,0,258,280,1,0,0,0,259,260,5,135,0,0,260,280,5,33,0,
		0,261,262,5,135,0,0,262,263,3,2,1,0,263,264,5,33,0,0,264,280,1,0,0,0,265,
		266,5,135,0,0,266,267,3,2,1,0,267,268,5,29,0,0,268,269,3,2,1,0,269,270,
		5,33,0,0,270,280,1,0,0,0,271,272,5,135,0,0,272,273,3,2,1,0,273,274,5,29,
		0,0,274,275,3,2,1,0,275,276,5,29,0,0,276,277,3,2,1,0,277,278,5,33,0,0,
		278,280,1,0,0,0,279,239,1,0,0,0,279,241,1,0,0,0,279,245,1,0,0,0,279,251,
		1,0,0,0,279,259,1,0,0,0,279,261,1,0,0,0,279,265,1,0,0,0,279,271,1,0,0,
		0,280,29,1,0,0,0,281,282,5,127,0,0,282,283,3,44,22,0,283,284,5,33,0,0,
		284,322,1,0,0,0,285,286,5,126,0,0,286,287,3,2,1,0,287,288,5,33,0,0,288,
		322,1,0,0,0,289,290,5,124,0,0,290,291,3,2,1,0,291,292,5,33,0,0,292,322,
		1,0,0,0,293,294,5,125,0,0,294,295,3,2,1,0,295,296,5,33,0,0,296,322,1,0,
		0,0,297,298,5,128,0,0,298,299,3,2,1,0,299,300,5,33,0,0,300,322,1,0,0,0,
		301,302,5,129,0,0,302,303,3,2,1,0,303,304,5,33,0,0,304,322,1,0,0,0,305,
		306,5,130,0,0,306,307,3,2,1,0,307,308,5,33,0,0,308,322,1,0,0,0,309,310,
		5,131,0,0,310,311,3,2,1,0,311,312,5,33,0,0,312,322,1,0,0,0,313,314,5,132,
		0,0,314,315,3,2,1,0,315,316,5,33,0,0,316,322,1,0,0,0,317,318,5,133,0,0,
		318,319,3,2,1,0,319,320,5,33,0,0,320,322,1,0,0,0,321,281,1,0,0,0,321,285,
		1,0,0,0,321,289,1,0,0,0,321,293,1,0,0,0,321,297,1,0,0,0,321,301,1,0,0,
		0,321,305,1,0,0,0,321,309,1,0,0,0,321,313,1,0,0,0,321,317,1,0,0,0,322,
		31,1,0,0,0,323,324,5,108,0,0,324,325,3,2,1,0,325,326,5,33,0,0,326,388,
		1,0,0,0,327,328,5,108,0,0,328,329,3,2,1,0,329,330,5,29,0,0,330,331,3,2,
		1,0,331,332,5,29,0,0,332,333,3,2,1,0,333,334,5,33,0,0,334,388,1,0,0,0,
		335,336,5,108,0,0,336,337,3,2,1,0,337,338,5,29,0,0,338,339,3,2,1,0,339,
		340,5,29,0,0,340,341,3,2,1,0,341,342,5,29,0,0,342,343,3,2,1,0,343,344,
		5,33,0,0,344,388,1,0,0,0,345,346,5,108,0,0,346,347,3,2,1,0,347,348,5,29,
		0,0,348,349,3,2,1,0,349,350,5,29,0,0,350,351,3,2,1,0,351,352,5,29,0,0,
		352,353,3,2,1,0,353,354,5,29,0,0,354,355,3,2,1,0,355,356,5,33,0,0,356,
		388,1,0,0,0,357,358,5,108,0,0,358,359,3,2,1,0,359,360,5,29,0,0,360,361,
		3,2,1,0,361,362,5,29,0,0,362,363,3,2,1,0,363,364,5,29,0,0,364,365,3,2,
		1,0,365,366,5,29,0,0,366,367,3,2,1,0,367,368,5,29,0,0,368,369,3,2,1,0,
		369,370,5,33,0,0,370,388,1,0,0,0,371,372,5,108,0,0,372,373,3,2,1,0,373,
		374,5,29,0,0,374,375,3,2,1,0,375,376,5,29,0,0,376,377,3,2,1,0,377,378,
		5,29,0,0,378,379,3,2,1,0,379,380,5,29,0,0,380,381,3,2,1,0,381,382,5,29,
		0,0,382,383,3,2,1,0,383,384,5,29,0,0,384,385,3,2,1,0,385,386,5,33,0,0,
		386,388,1,0,0,0,387,323,1,0,0,0,387,327,1,0,0,0,387,335,1,0,0,0,387,345,
		1,0,0,0,387,357,1,0,0,0,387,371,1,0,0,0,388,33,1,0,0,0,389,390,5,34,0,
		0,390,391,3,2,1,0,391,392,5,35,0,0,392,438,1,0,0,0,393,394,5,34,0,0,394,
		395,3,2,1,0,395,396,5,22,0,0,396,397,3,2,1,0,397,398,5,35,0,0,398,438,
		1,0,0,0,399,400,5,34,0,0,400,401,3,2,1,0,401,402,5,22,0,0,402,403,3,2,
		1,0,403,404,5,22,0,0,404,405,3,2,1,0,405,406,5,35,0,0,406,438,1,0,0,0,
		407,408,5,34,0,0,408,409,3,2,1,0,409,410,5,22,0,0,410,411,5,35,0,0,411,
		438,1,0,0,0,412,413,5,34,0,0,413,414,3,2,1,0,414,415,5,22,0,0,415,416,
		5,22,0,0,416,417,3,2,1,0,417,418,5,35,0,0,418,438,1,0,0,0,419,420,5,34,
		0,0,420,421,5,22,0,0,421,422,3,2,1,0,422,423,5,35,0,0,423,438,1,0,0,0,
		424,425,5,34,0,0,425,426,5,22,0,0,426,427,3,2,1,0,427,428,5,22,0,0,428,
		429,3,2,1,0,429,430,5,35,0,0,430,438,1,0,0,0,431,432,5,34,0,0,432,433,
		5,22,0,0,433,434,5,22,0,0,434,435,3,2,1,0,435,436,5,35,0,0,436,438,1,0,
		0,0,437,389,1,0,0,0,437,393,1,0,0,0,437,399,1,0,0,0,437,407,1,0,0,0,437,
		412,1,0,0,0,437,419,1,0,0,0,437,424,1,0,0,0,437,431,1,0,0,0,438,35,1,0,
		0,0,439,440,5,121,0,0,440,441,3,2,1,0,441,442,5,33,0,0,442,476,1,0,0,0,
		443,444,5,119,0,0,444,445,3,2,1,0,445,446,5,33,0,0,446,476,1,0,0,0,447,
		448,5,120,0,0,448,449,3,2,1,0,449,450,5,33,0,0,450,476,1,0,0,0,451,452,
		5,122,0,0,452,453,3,2,1,0,453,454,5,33,0,0,454,476,1,0,0,0,455,456,5,118,
		0,0,456,457,3,2,1,0,457,458,5,33,0,0,458,476,1,0,0,0,459,460,5,117,0,0,
		460,461,3,2,1,0,461,462,5,33,0,0,462,476,1,0,0,0,463,464,5,123,0,0,464,
		465,3,2,1,0,465,466,5,33,0,0,466,476,1,0,0,0,467,468,5,114,0,0,468,469,
		3,2,1,0,469,470,5,33,0,0,470,476,1,0,0,0,471,472,5,107,0,0,472,473,3,2,
		1,0,473,474,5,33,0,0,474,476,1,0,0,0,475,439,1,0,0,0,475,443,1,0,0,0,475,
		447,1,0,0,0,475,451,1,0,0,0,475,455,1,0,0,0,475,459,1,0,0,0,475,463,1,
		0,0,0,475,467,1,0,0,0,475,471,1,0,0,0,476,37,1,0,0,0,477,478,5,103,0,0,
		478,479,3,2,1,0,479,480,5,29,0,0,480,481,3,2,1,0,481,482,5,33,0,0,482,
		548,1,0,0,0,483,484,5,104,0,0,484,485,3,2,1,0,485,486,5,33,0,0,486,548,
		1,0,0,0,487,488,5,105,0,0,488,489,3,2,1,0,489,490,5,33,0,0,490,548,1,0,
		0,0,491,492,5,106,0,0,492,493,3,2,1,0,493,494,5,29,0,0,494,495,3,2,1,0,
		495,496,5,33,0,0,496,548,1,0,0,0,497,498,5,109,0,0,498,499,3,2,1,0,499,
		500,5,29,0,0,500,501,3,2,1,0,501,502,5,33,0,0,502,548,1,0,0,0,503,504,
		5,110,0,0,504,505,3,2,1,0,505,506,5,29,0,0,506,507,3,2,1,0,507,508,5,33,
		0,0,508,548,1,0,0,0,509,510,5,110,0,0,510,511,3,2,1,0,511,512,5,29,0,0,
		512,513,3,2,1,0,513,514,5,29,0,0,514,515,3,2,1,0,515,516,5,33,0,0,516,
		548,1,0,0,0,517,518,5,110,0,0,518,519,3,2,1,0,519,520,5,29,0,0,520,521,
		3,2,1,0,521,522,5,29,0,0,522,523,3,2,1,0,523,524,5,29,0,0,524,525,3,2,
		1,0,525,526,5,33,0,0,526,548,1,0,0,0,527,528,5,111,0,0,528,529,3,2,1,0,
		529,530,5,33,0,0,530,548,1,0,0,0,531,532,5,112,0,0,532,533,3,2,1,0,533,
		534,5,33,0,0,534,548,1,0,0,0,535,536,5,113,0,0,536,537,3,2,1,0,537,538,
		5,33,0,0,538,548,1,0,0,0,539,540,5,115,0,0,540,541,3,2,1,0,541,542,5,33,
		0,0,542,548,1,0,0,0,543,544,5,116,0,0,544,545,3,2,1,0,545,546,5,33,0,0,
		546,548,1,0,0,0,547,477,1,0,0,0,547,483,1,0,0,0,547,487,1,0,0,0,547,491,
		1,0,0,0,547,497,1,0,0,0,547,503,1,0,0,0,547,509,1,0,0,0,547,517,1,0,0,
		0,547,527,1,0,0,0,547,531,1,0,0,0,547,535,1,0,0,0,547,539,1,0,0,0,547,
		543,1,0,0,0,548,39,1,0,0,0,549,550,5,44,0,0,550,551,3,2,1,0,551,552,5,
		33,0,0,552,804,1,0,0,0,553,554,5,45,0,0,554,555,3,2,1,0,555,556,5,33,0,
		0,556,804,1,0,0,0,557,558,5,46,0,0,558,559,3,2,1,0,559,560,5,33,0,0,560,
		804,1,0,0,0,561,562,5,47,0,0,562,563,3,2,1,0,563,564,5,33,0,0,564,804,
		1,0,0,0,565,566,5,48,0,0,566,567,3,2,1,0,567,568,5,33,0,0,568,804,1,0,
		0,0,569,570,5,49,0,0,570,571,3,2,1,0,571,572,5,33,0,0,572,804,1,0,0,0,
		573,574,5,50,0,0,574,575,3,2,1,0,575,576,5,29,0,0,576,577,3,2,1,0,577,
		578,5,33,0,0,578,804,1,0,0,0,579,580,5,51,0,0,580,581,3,2,1,0,581,582,
		5,33,0,0,582,804,1,0,0,0,583,584,5,52,0,0,584,585,3,2,1,0,585,586,5,33,
		0,0,586,804,1,0,0,0,587,588,5,53,0,0,588,589,3,2,1,0,589,590,5,33,0,0,
		590,804,1,0,0,0,591,592,5,54,0,0,592,593,3,2,1,0,593,594,5,33,0,0,594,
		804,1,0,0,0,595,596,5,55,0,0,596,597,3,2,1,0,597,598,5,33,0,0,598,804,
		1,0,0,0,599,600,5,56,0,0,600,601,3,2,1,0,601,602,5,29,0,0,602,603,3,2,
		1,0,603,604,5,29,0,0,604,605,3,2,1,0,605,606,5,33,0,0,606,804,1,0,0,0,
		607,608,5,57,0,0,608,609,3,2,1,0,609,610,5,33,0,0,610,804,1,0,0,0,611,
		612,5,58,0,0,612,613,3,2,1,0,613,614,5,29,0,0,614,615,3,2,1,0,615,616,
		5,29,0,0,616,617,3,2,1,0,617,618,5,33,0,0,618,804,1,0,0,0,619,620,5,59,
		0,0,620,621,3,2,1,0,621,622,5,33,0,0,622,804,1,0,0,0,623,624,5,60,0,0,
		624,625,3,2,1,0,625,626,5,33,0,0,626,804,1,0,0,0,627,628,5,61,0,0,628,
		629,3,2,1,0,629,630,5,29,0,0,630,631,3,2,1,0,631,632,5,29,0,0,632,633,
		3,2,1,0,633,634,5,29,0,0,634,635,3,2,1,0,635,636,5,33,0,0,636,804,1,0,
		0,0,637,638,5,62,0,0,638,639,3,2,1,0,639,640,5,29,0,0,640,641,3,2,1,0,
		641,642,5,33,0,0,642,804,1,0,0,0,643,644,5,63,0,0,644,645,3,2,1,0,645,
		646,5,33,0,0,646,804,1,0,0,0,647,648,5,64,0,0,648,649,3,2,1,0,649,650,
		5,33,0,0,650,804,1,0,0,0,651,652,5,65,0,0,652,653,3,2,1,0,653,654,5,33,
		0,0,654,804,1,0,0,0,655,656,5,65,0,0,656,657,3,2,1,0,657,658,5,29,0,0,
		658,659,3,2,1,0,659,660,5,33,0,0,660,804,1,0,0,0,661,662,5,66,0,0,662,
		663,3,2,1,0,663,664,5,33,0,0,664,804,1,0,0,0,665,666,5,66,0,0,666,667,
		3,2,1,0,667,668,5,29,0,0,668,669,3,2,1,0,669,670,5,33,0,0,670,804,1,0,
		0,0,671,672,5,67,0,0,672,673,3,2,1,0,673,674,5,29,0,0,674,675,3,2,1,0,
		675,676,5,33,0,0,676,804,1,0,0,0,677,678,5,68,0,0,678,679,3,2,1,0,679,
		680,5,33,0,0,680,804,1,0,0,0,681,682,5,68,0,0,682,683,3,2,1,0,683,684,
		5,29,0,0,684,685,3,2,1,0,685,686,5,33,0,0,686,804,1,0,0,0,687,688,5,69,
		0,0,688,689,3,2,1,0,689,690,5,29,0,0,690,691,3,2,1,0,691,692,5,33,0,0,
		692,804,1,0,0,0,693,694,5,70,0,0,694,695,3,2,1,0,695,696,5,33,0,0,696,
		804,1,0,0,0,697,698,5,71,0,0,698,699,3,2,1,0,699,700,5,33,0,0,700,804,
		1,0,0,0,701,702,5,72,0,0,702,703,3,2,1,0,703,704,5,33,0,0,704,804,1,0,
		0,0,705,706,5,73,0,0,706,707,3,2,1,0,707,708,5,33,0,0,708,804,1,0,0,0,
		709,710,5,74,0,0,710,711,3,2,1,0,711,712,5,33,0,0,712,804,1,0,0,0,713,
		714,5,75,0,0,714,715,3,2,1,0,715,716,5,33,0,0,716,804,1,0,0,0,717,718,
		5,76,0,0,718,719,3,2,1,0,719,720,5,29,0,0,720,721,3,2,1,0,721,722,5,33,
		0,0,722,804,1,0,0,0,723,724,5,77,0,0,724,725,3,2,1,0,725,726,5,33,0,0,
		726,804,1,0,0,0,727,728,5,78,0,0,728,729,3,2,1,0,729,730,5,33,0,0,730,
		804,1,0,0,0,731,732,5,79,0,0,732,733,3,2,1,0,733,734,5,29,0,0,734,735,
		3,2,1,0,735,736,5,33,0,0,736,804,1,0,0,0,737,738,5,80,0,0,738,739,3,2,
		1,0,739,740,5,29,0,0,740,741,3,2,1,0,741,742,5,33,0,0,742,804,1,0,0,0,
		743,744,5,81,0,0,744,745,3,2,1,0,745,746,5,29,0,0,746,747,3,2,1,0,747,
		748,5,33,0,0,748,804,1,0,0,0,749,750,5,82,0,0,750,751,3,2,1,0,751,752,
		5,29,0,0,752,753,3,2,1,0,753,754,5,33,0,0,754,804,1,0,0,0,755,756,5,83,
		0,0,756,757,3,2,1,0,757,758,5,33,0,0,758,804,1,0,0,0,759,760,5,84,0,0,
		760,761,3,2,1,0,761,762,5,33,0,0,762,804,1,0,0,0,763,764,5,85,0,0,764,
		765,3,2,1,0,765,766,5,33,0,0,766,804,1,0,0,0,767,768,5,86,0,0,768,769,
		3,2,1,0,769,770,5,33,0,0,770,804,1,0,0,0,771,772,5,87,0,0,772,773,3,2,
		1,0,773,774,5,33,0,0,774,804,1,0,0,0,775,776,5,88,0,0,776,777,3,2,1,0,
		777,778,5,33,0,0,778,804,1,0,0,0,779,780,5,89,0,0,780,781,3,2,1,0,781,
		782,5,33,0,0,782,804,1,0,0,0,783,784,5,90,0,0,784,785,3,2,1,0,785,786,
		5,33,0,0,786,804,1,0,0,0,787,788,5,91,0,0,788,789,3,2,1,0,789,790,5,33,
		0,0,790,804,1,0,0,0,791,792,5,92,0,0,792,793,3,2,1,0,793,794,5,33,0,0,
		794,804,1,0,0,0,795,796,5,93,0,0,796,797,3,2,1,0,797,798,5,33,0,0,798,
		804,1,0,0,0,799,800,5,94,0,0,800,801,3,2,1,0,801,802,5,33,0,0,802,804,
		1,0,0,0,803,549,1,0,0,0,803,553,1,0,0,0,803,557,1,0,0,0,803,561,1,0,0,
		0,803,565,1,0,0,0,803,569,1,0,0,0,803,573,1,0,0,0,803,579,1,0,0,0,803,
		583,1,0,0,0,803,587,1,0,0,0,803,591,1,0,0,0,803,595,1,0,0,0,803,599,1,
		0,0,0,803,607,1,0,0,0,803,611,1,0,0,0,803,619,1,0,0,0,803,623,1,0,0,0,
		803,627,1,0,0,0,803,637,1,0,0,0,803,643,1,0,0,0,803,647,1,0,0,0,803,651,
		1,0,0,0,803,655,1,0,0,0,803,661,1,0,0,0,803,665,1,0,0,0,803,671,1,0,0,
		0,803,677,1,0,0,0,803,681,1,0,0,0,803,687,1,0,0,0,803,693,1,0,0,0,803,
		697,1,0,0,0,803,701,1,0,0,0,803,705,1,0,0,0,803,709,1,0,0,0,803,713,1,
		0,0,0,803,717,1,0,0,0,803,723,1,0,0,0,803,727,1,0,0,0,803,731,1,0,0,0,
		803,737,1,0,0,0,803,743,1,0,0,0,803,749,1,0,0,0,803,755,1,0,0,0,803,759,
		1,0,0,0,803,763,1,0,0,0,803,767,1,0,0,0,803,771,1,0,0,0,803,775,1,0,0,
		0,803,779,1,0,0,0,803,783,1,0,0,0,803,787,1,0,0,0,803,791,1,0,0,0,803,
		795,1,0,0,0,803,799,1,0,0,0,804,41,1,0,0,0,805,806,5,95,0,0,806,807,3,
		2,1,0,807,808,5,29,0,0,808,809,3,2,1,0,809,810,5,33,0,0,810,846,1,0,0,
		0,811,812,5,96,0,0,812,813,3,2,1,0,813,814,5,33,0,0,814,846,1,0,0,0,815,
		816,5,97,0,0,816,817,3,2,1,0,817,818,5,33,0,0,818,846,1,0,0,0,819,820,
		5,98,0,0,820,821,3,2,1,0,821,822,5,29,0,0,822,823,3,2,1,0,823,824,5,33,
		0,0,824,846,1,0,0,0,825,826,5,99,0,0,826,827,3,2,1,0,827,828,5,29,0,0,
		828,829,3,2,1,0,829,830,5,33,0,0,830,846,1,0,0,0,831,832,5,100,0,0,832,
		833,3,2,1,0,833,834,5,29,0,0,834,835,3,2,1,0,835,836,5,33,0,0,836,846,
		1,0,0,0,837,838,5,101,0,0,838,839,3,2,1,0,839,840,5,33,0,0,840,846,1,0,
		0,0,841,842,5,102,0,0,842,843,3,2,1,0,843,844,5,33,0,0,844,846,1,0,0,0,
		845,805,1,0,0,0,845,811,1,0,0,0,845,815,1,0,0,0,845,819,1,0,0,0,845,825,
		1,0,0,0,845,831,1,0,0,0,845,837,1,0,0,0,845,841,1,0,0,0,846,43,1,0,0,0,
		847,853,3,2,1,0,848,849,3,2,1,0,849,850,5,29,0,0,850,851,3,44,22,0,851,
		853,1,0,0,0,852,847,1,0,0,0,852,848,1,0,0,0,853,45,1,0,0,0,854,855,5,34,
		0,0,855,861,5,35,0,0,856,857,5,34,0,0,857,858,3,44,22,0,858,859,5,35,0,
		0,859,861,1,0,0,0,860,854,1,0,0,0,860,856,1,0,0,0,861,47,1,0,0,0,26,62,
		69,76,83,93,118,120,138,140,151,162,174,176,203,205,237,279,321,387,437,
		475,547,803,845,852,860
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace EveryParser
