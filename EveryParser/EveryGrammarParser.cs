//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EveryGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class EveryGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, INT=2, ADD=3, SUBTRACT=4, MULITPLY=5, DIVIDE=6, MODULO=7, EQUAL=8, 
		NOT=9, KOMMA=10, NOTEQUAL=11, CONTAINS=12, BOOLOR=13, BOOLAND=14, BITOR=15, 
		BITAND=16, MAX=17, MIN=18, TRUE=19, FALSE=20, GREATER=21, GREATEREQUAL=22, 
		LOWER=23, LOWEREQUAL=24, ROUNDBRACKETOPEN=25, ROUNDBRACKETCLOSED=26, EDGEBRACKETOPEN=27, 
		EDGEBRACKETCLOSED=28, TILDE=29, COLON=30, QUESTIONMARK=31, CONCAT=32, 
		UPPERCASE=33, LOWERCASE=34, INTEGERDIVISION=35, DOUBLE=36, STRING=37, 
		VARIABLE=38, DIGIT=39, ALPHA=40;
	public const int
		RULE_startRule = 0, RULE_expression = 1, RULE_if_else = 2, RULE_inner_if_else = 3, 
		RULE_bool_or_term = 4, RULE_bool_and_term = 5, RULE_equality = 6, RULE_check = 7, 
		RULE_bit_or_term = 8, RULE_bit_and_term = 9, RULE_line_term = 10, RULE_point_term = 11, 
		RULE_factor = 12, RULE_expr_args = 13, RULE_array_expr = 14;
	public static readonly string[] ruleNames = {
		"startRule", "expression", "if_else", "inner_if_else", "bool_or_term", 
		"bool_and_term", "equality", "check", "bit_or_term", "bit_and_term", "line_term", 
		"point_term", "factor", "expr_args", "array_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'not'", 
		"','", "'!='", "'in'", "'||'", "'&&'", "'|'", "'&'", "'max'", "'min'", 
		"'true'", "'false'", "'>'", "'>='", "'<'", "'<='", "'('", "')'", "'['", 
		"']'", "'~'", "':'", "'?'", "'concat('", "'upper('", "'lower('", "'//'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "INT", "ADD", "SUBTRACT", "MULITPLY", "DIVIDE", "MODULO", 
		"EQUAL", "NOT", "KOMMA", "NOTEQUAL", "CONTAINS", "BOOLOR", "BOOLAND", 
		"BITOR", "BITAND", "MAX", "MIN", "TRUE", "FALSE", "GREATER", "GREATEREQUAL", 
		"LOWER", "LOWEREQUAL", "ROUNDBRACKETOPEN", "ROUNDBRACKETCLOSED", "EDGEBRACKETOPEN", 
		"EDGEBRACKETCLOSED", "TILDE", "COLON", "QUESTIONMARK", "CONCAT", "UPPERCASE", 
		"LOWERCASE", "INTEGERDIVISION", "DOUBLE", "STRING", "VARIABLE", "DIGIT", 
		"ALPHA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EveryGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EveryGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EveryGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EveryGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(EveryGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(EveryGrammarParser.NEWLINE, i);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << ADD) | (1L << SUBTRACT) | (1L << NOT) | (1L << TRUE) | (1L << FALSE) | (1L << ROUNDBRACKETOPEN) | (1L << EDGEBRACKETOPEN) | (1L << TILDE) | (1L << DOUBLE) | (1L << STRING) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 30;
				expression();
				State = 31;
				Match(NEWLINE);
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_elseContext if_else() {
			return GetRuleContext<If_elseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			if_else();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext[] inner_if_else() {
			return GetRuleContexts<Inner_if_elseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext inner_if_else(int i) {
			return GetRuleContext<Inner_if_elseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_or_termContext bool_or_term() {
			return GetRuleContext<Bool_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(EveryGrammarParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EveryGrammarParser.COLON, 0); }
		public If_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterIf_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitIf_else(this);
		}
	}

	[RuleVersion(0)]
	public If_elseContext if_else() {
		If_elseContext _localctx = new If_elseContext(Context, State);
		EnterRule(_localctx, 4, RULE_if_else);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				inner_if_else();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				bool_or_term();
				State = 42;
				Match(QUESTIONMARK);
				State = 43;
				inner_if_else();
				State = 44;
				Match(COLON);
				State = 45;
				inner_if_else();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inner_if_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_or_termContext bool_or_term() {
			return GetRuleContext<Bool_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETOPEN() { return GetToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_elseContext if_else() {
			return GetRuleContext<If_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Inner_if_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inner_if_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterInner_if_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitInner_if_else(this);
		}
	}

	[RuleVersion(0)]
	public Inner_if_elseContext inner_if_else() {
		Inner_if_elseContext _localctx = new Inner_if_elseContext(Context, State);
		EnterRule(_localctx, 6, RULE_inner_if_else);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				bool_or_term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				Match(ROUNDBRACKETOPEN);
				State = 51;
				if_else();
				State = 52;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_or_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext[] bool_and_term() {
			return GetRuleContexts<Bool_and_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term(int i) {
			return GetRuleContext<Bool_and_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLOR() { return GetToken(EveryGrammarParser.BOOLOR, 0); }
		public Bool_or_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_or_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBool_or_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBool_or_term(this);
		}
	}

	[RuleVersion(0)]
	public Bool_or_termContext bool_or_term() {
		Bool_or_termContext _localctx = new Bool_or_termContext(Context, State);
		EnterRule(_localctx, 8, RULE_bool_or_term);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				bool_and_term(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				bool_and_term(0);
				State = 58;
				Match(BOOLOR);
				State = 59;
				bool_and_term(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_and_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term() {
			return GetRuleContext<Bool_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLAND() { return GetToken(EveryGrammarParser.BOOLAND, 0); }
		public Bool_and_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_and_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBool_and_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBool_and_term(this);
		}
	}

	[RuleVersion(0)]
	public Bool_and_termContext bool_and_term() {
		return bool_and_term(0);
	}

	private Bool_and_termContext bool_and_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bool_and_termContext _localctx = new Bool_and_termContext(Context, _parentState);
		Bool_and_termContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_bool_and_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 64;
			equality(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 71;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bool_and_termContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bool_and_term);
					State = 66;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 67;
					Match(BOOLAND);
					State = 68;
					equality(0);
					}
					} 
				}
				State = 73;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETOPEN() { return GetToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(EveryGrammarParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EveryGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(EveryGrammarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(EveryGrammarParser.NOTEQUAL, 0); }
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		return equality(0);
	}

	private EqualityContext equality(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityContext _localctx = new EqualityContext(Context, _parentState);
		EqualityContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_equality, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 75;
				check(0);
				}
				break;
			case 2:
				{
				State = 76;
				Match(ROUNDBRACKETOPEN);
				State = 77;
				factor();
				State = 78;
				Match(ROUNDBRACKETCLOSED);
				State = 79;
				Match(CONTAINS);
				State = 80;
				array_expr();
				}
				break;
			case 3:
				{
				State = 82;
				Match(ROUNDBRACKETOPEN);
				State = 83;
				factor();
				State = 84;
				Match(ROUNDBRACKETCLOSED);
				State = 85;
				Match(NOT);
				State = 86;
				Match(CONTAINS);
				State = 87;
				array_expr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 99;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 97;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 91;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 92;
						Match(EQUAL);
						State = 93;
						check(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 94;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 95;
						Match(NOTEQUAL);
						State = 96;
						check(0);
						}
						break;
					}
					} 
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(EveryGrammarParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(EveryGrammarParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWEREQUAL() { return GetToken(EveryGrammarParser.LOWEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(EveryGrammarParser.GREATEREQUAL, 0); }
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(Context, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 103;
			bit_or_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 117;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 105;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 106;
						Match(LOWER);
						State = 107;
						bit_or_term(0);
						}
						break;
					case 2:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 108;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 109;
						Match(GREATER);
						State = 110;
						bit_or_term(0);
						}
						break;
					case 3:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 111;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 112;
						Match(LOWEREQUAL);
						State = 113;
						bit_or_term(0);
						}
						break;
					case 4:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 114;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 115;
						Match(GREATEREQUAL);
						State = 116;
						bit_or_term(0);
						}
						break;
					}
					} 
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_or_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR() { return GetToken(EveryGrammarParser.BITOR, 0); }
		public Bit_or_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_or_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBit_or_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBit_or_term(this);
		}
	}

	[RuleVersion(0)]
	public Bit_or_termContext bit_or_term() {
		return bit_or_term(0);
	}

	private Bit_or_termContext bit_or_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_or_termContext _localctx = new Bit_or_termContext(Context, _parentState);
		Bit_or_termContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_bit_or_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 123;
			bit_and_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 130;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bit_or_termContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bit_or_term);
					State = 125;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 126;
					Match(BITOR);
					State = 127;
					bit_and_term(0);
					}
					} 
				}
				State = 132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_and_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND() { return GetToken(EveryGrammarParser.BITAND, 0); }
		public Bit_and_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_and_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBit_and_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBit_and_term(this);
		}
	}

	[RuleVersion(0)]
	public Bit_and_termContext bit_and_term() {
		return bit_and_term(0);
	}

	private Bit_and_termContext bit_and_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_and_termContext _localctx = new Bit_and_termContext(Context, _parentState);
		Bit_and_termContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_bit_and_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 134;
			line_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bit_and_termContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bit_and_term);
					State = 136;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 137;
					Match(BITAND);
					State = 138;
					line_term(0);
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Line_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(EveryGrammarParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(EveryGrammarParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(EveryGrammarParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(EveryGrammarParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(EveryGrammarParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPERCASE() { return GetToken(EveryGrammarParser.UPPERCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWERCASE() { return GetToken(EveryGrammarParser.LOWERCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(EveryGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(EveryGrammarParser.SUBTRACT, 0); }
		public Line_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterLine_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitLine_term(this);
		}
	}

	[RuleVersion(0)]
	public Line_termContext line_term() {
		return line_term(0);
	}

	private Line_termContext line_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Line_termContext _localctx = new Line_termContext(Context, _parentState);
		Line_termContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_line_term, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 145;
				point_term(0);
				}
				break;
			case 2:
				{
				State = 146;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 147;
				Match(CONCAT);
				State = 148;
				point_term(0);
				State = 149;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				{
				State = 151;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 152;
				Match(UPPERCASE);
				State = 153;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 154;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				{
				State = 155;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 156;
				Match(LOWERCASE);
				State = 157;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 158;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 169;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 167;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new Line_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_line_term);
						State = 161;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 162;
						Match(ADD);
						State = 163;
						point_term(0);
						}
						break;
					case 2:
						{
						_localctx = new Line_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_line_term);
						State = 164;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 165;
						Match(SUBTRACT);
						State = 166;
						point_term(0);
						}
						break;
					}
					} 
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Point_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULITPLY() { return GetToken(EveryGrammarParser.MULITPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(EveryGrammarParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(EveryGrammarParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERDIVISION() { return GetToken(EveryGrammarParser.INTEGERDIVISION, 0); }
		public Point_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPoint_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPoint_term(this);
		}
	}

	[RuleVersion(0)]
	public Point_termContext point_term() {
		return point_term(0);
	}

	private Point_termContext point_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Point_termContext _localctx = new Point_termContext(Context, _parentState);
		Point_termContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_point_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 173;
			factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 189;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 187;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 175;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 176;
						Match(MULITPLY);
						State = 177;
						factor();
						}
						break;
					case 2:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 178;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 179;
						Match(MODULO);
						State = 180;
						factor();
						}
						break;
					case 3:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 181;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 182;
						Match(DIVIDE);
						State = 183;
						factor();
						}
						break;
					case 4:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 184;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 185;
						Match(INTEGERDIVISION);
						State = 186;
						factor();
						}
						break;
					}
					} 
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EveryGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(EveryGrammarParser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(EveryGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(EveryGrammarParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETOPEN() { return GetToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(EveryGrammarParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(EveryGrammarParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(EveryGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(EveryGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EveryGrammarParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(EveryGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 24, RULE_factor);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(NOT);
				State = 193;
				factor();
				}
				break;
			case SUBTRACT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(SUBTRACT);
				State = 195;
				factor();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196;
				Match(ADD);
				State = 197;
				factor();
				}
				break;
			case TILDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 198;
				Match(TILDE);
				State = 199;
				factor();
				}
				break;
			case ROUNDBRACKETOPEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 200;
				Match(ROUNDBRACKETOPEN);
				State = 201;
				expression();
				State = 202;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 204;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 205;
				Match(FALSE);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 206;
				Match(INT);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 207;
				Match(DOUBLE);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 208;
				Match(VARIABLE);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 11);
				{
				State = 209;
				Match(STRING);
				}
				break;
			case EDGEBRACKETOPEN:
				EnterOuterAlt(_localctx, 12);
				{
				State = 210;
				array_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		public Expr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterExpr_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitExpr_args(this);
		}
	}

	[RuleVersion(0)]
	public Expr_argsContext expr_args() {
		Expr_argsContext _localctx = new Expr_argsContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr_args);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				expression();
				State = 215;
				Match(KOMMA);
				State = 216;
				expr_args();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArray_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArray_expr(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 28, RULE_array_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(EDGEBRACKETOPEN);
			State = 221;
			expr_args();
			State = 222;
			Match(EDGEBRACKETCLOSED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return bool_and_term_sempred((Bool_and_termContext)_localctx, predIndex);
		case 6: return equality_sempred((EqualityContext)_localctx, predIndex);
		case 7: return check_sempred((CheckContext)_localctx, predIndex);
		case 8: return bit_or_term_sempred((Bit_or_termContext)_localctx, predIndex);
		case 9: return bit_and_term_sempred((Bit_and_termContext)_localctx, predIndex);
		case 10: return line_term_sempred((Line_termContext)_localctx, predIndex);
		case 11: return point_term_sempred((Point_termContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bool_and_term_sempred(Bool_and_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_sempred(EqualityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_or_term_sempred(Bit_or_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_and_term_sempred(Bit_and_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool line_term_sempred(Line_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		}
		return true;
	}
	private bool point_term_sempred(Point_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\xE3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '$', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\'', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x32', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x39', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '@', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'H', '\n', '\a', '\f', '\a', '\xE', '\a', 'K', '\v', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\\', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '\x64', '\n', '\b', '\f', '\b', '\xE', '\b', 'g', '\v', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'x', '\n', '\t', '\f', '\t', '\xE', '\t', '{', '\v', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', '\x83', '\n', '\n', '\f', '\n', '\xE', '\n', '\x86', '\v', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x8E', '\n', '\v', '\f', '\v', '\xE', '\v', '\x91', 
		'\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\xA2', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xAA', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xAD', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\a', '\r', '\xBE', '\n', '\r', '\f', '\r', '\xE', 
		'\r', '\xC1', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\xD6', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xDD', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x2', '\t', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x11', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', '\x3', '\x3', '\x2', 
		'\'', '(', '\x2', '\xF7', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x38', '\x3', '\x2', '\x2', '\x2', '\n', '?', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x41', '\x3', '\x2', '\x2', '\x2', '\xE', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'h', '\x3', '\x2', '\x2', '\x2', '\x12', '|', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x87', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\x18', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xDE', '\x3', '\x2', '\x2', '\x2', ' ', 
		'!', '\x5', '\x4', '\x3', '\x2', '!', '\"', '\a', '\x3', '\x2', '\x2', 
		'\"', '$', '\x3', '\x2', '\x2', '\x2', '#', ' ', '\x3', '\x2', '\x2', 
		'\x2', '$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '(', ')', 
		'\x5', '\x6', '\x4', '\x2', ')', '\x5', '\x3', '\x2', '\x2', '\x2', '*', 
		'\x32', '\x5', '\b', '\x5', '\x2', '+', ',', '\x5', '\n', '\x6', '\x2', 
		',', '-', '\a', '!', '\x2', '\x2', '-', '.', '\x5', '\b', '\x5', '\x2', 
		'.', '/', '\a', ' ', '\x2', '\x2', '/', '\x30', '\x5', '\b', '\x5', '\x2', 
		'\x30', '\x32', '\x3', '\x2', '\x2', '\x2', '\x31', '*', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '+', '\x3', '\x2', '\x2', '\x2', '\x32', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x39', '\x5', '\n', '\x6', '\x2', '\x34', 
		'\x35', '\a', '\x1B', '\x2', '\x2', '\x35', '\x36', '\x5', '\x6', '\x4', 
		'\x2', '\x36', '\x37', '\a', '\x1C', '\x2', '\x2', '\x37', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x33', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x39', '\t', '\x3', '\x2', '\x2', 
		'\x2', ':', '@', '\x5', '\f', '\a', '\x2', ';', '<', '\x5', '\f', '\a', 
		'\x2', '<', '=', '\a', '\xF', '\x2', '\x2', '=', '>', '\x5', '\f', '\a', 
		'\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', '?', ':', '\x3', '\x2', '\x2', 
		'\x2', '?', ';', '\x3', '\x2', '\x2', '\x2', '@', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\b', '\a', '\x1', '\x2', '\x42', '\x43', 
		'\x5', '\xE', '\b', '\x2', '\x43', 'I', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\f', '\x3', '\x2', '\x2', '\x45', '\x46', '\a', '\x10', '\x2', 
		'\x2', '\x46', 'H', '\x5', '\xE', '\b', '\x2', 'G', '\x44', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\b', 
		'\b', '\x1', '\x2', 'M', '\\', '\x5', '\x10', '\t', '\x2', 'N', 'O', '\a', 
		'\x1B', '\x2', '\x2', 'O', 'P', '\x5', '\x1A', '\xE', '\x2', 'P', 'Q', 
		'\a', '\x1C', '\x2', '\x2', 'Q', 'R', '\a', '\xE', '\x2', '\x2', 'R', 
		'S', '\x5', '\x1E', '\x10', '\x2', 'S', '\\', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\a', '\x1B', '\x2', '\x2', 'U', 'V', '\x5', '\x1A', '\xE', 
		'\x2', 'V', 'W', '\a', '\x1C', '\x2', '\x2', 'W', 'X', '\a', '\v', '\x2', 
		'\x2', 'X', 'Y', '\a', '\xE', '\x2', '\x2', 'Y', 'Z', '\x5', '\x1E', '\x10', 
		'\x2', 'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'L', '\x3', '\x2', 
		'\x2', '\x2', '[', 'N', '\x3', '\x2', '\x2', '\x2', '[', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x65', '\x3', '\x2', '\x2', '\x2', ']', '^', '\f', 
		'\x6', '\x2', '\x2', '^', '_', '\a', '\n', '\x2', '\x2', '_', '\x64', 
		'\x5', '\x10', '\t', '\x2', '`', '\x61', '\f', '\x5', '\x2', '\x2', '\x61', 
		'\x62', '\a', '\r', '\x2', '\x2', '\x62', '\x64', '\x5', '\x10', '\t', 
		'\x2', '\x63', ']', '\x3', '\x2', '\x2', '\x2', '\x63', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\xF', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\b', '\t', '\x1', '\x2', 'i', 'j', '\x5', '\x12', 
		'\n', '\x2', 'j', 'y', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\f', '\x6', 
		'\x2', '\x2', 'l', 'm', '\a', '\x19', '\x2', '\x2', 'm', 'x', '\x5', '\x12', 
		'\n', '\x2', 'n', 'o', '\f', '\x5', '\x2', '\x2', 'o', 'p', '\a', '\x17', 
		'\x2', '\x2', 'p', 'x', '\x5', '\x12', '\n', '\x2', 'q', 'r', '\f', '\x4', 
		'\x2', '\x2', 'r', 's', '\a', '\x1A', '\x2', '\x2', 's', 'x', '\x5', '\x12', 
		'\n', '\x2', 't', 'u', '\f', '\x3', '\x2', '\x2', 'u', 'v', '\a', '\x18', 
		'\x2', '\x2', 'v', 'x', '\x5', '\x12', '\n', '\x2', 'w', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'n', '\x3', '\x2', '\x2', '\x2', 'w', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'w', 't', '\x3', '\x2', '\x2', '\x2', 'x', '{', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x11', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\b', '\n', '\x1', '\x2', '}', '~', '\x5', 
		'\x14', '\v', '\x2', '~', '\x84', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\f', '\x3', '\x2', '\x2', '\x80', '\x81', '\a', '\x11', '\x2', 
		'\x2', '\x81', '\x83', '\x5', '\x14', '\v', '\x2', '\x82', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x13', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\b', '\v', '\x1', '\x2', '\x88', 
		'\x89', '\x5', '\x16', '\f', '\x2', '\x89', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\f', '\x3', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		'\x12', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\x16', '\f', '\x2', '\x8D', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x15', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\b', '\f', '\x1', 
		'\x2', '\x93', '\xA2', '\x5', '\x18', '\r', '\x2', '\x94', '\x95', '\t', 
		'\x2', '\x2', '\x2', '\x95', '\x96', '\a', '\"', '\x2', '\x2', '\x96', 
		'\x97', '\x5', '\x18', '\r', '\x2', '\x97', '\x98', '\a', '\x1C', '\x2', 
		'\x2', '\x98', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\t', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '#', '\x2', '\x2', '\x9B', 
		'\x9C', '\t', '\x2', '\x2', '\x2', '\x9C', '\xA2', '\a', '\x1C', '\x2', 
		'\x2', '\x9D', '\x9E', '\t', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'$', '\x2', '\x2', '\x9F', '\xA0', '\t', '\x2', '\x2', '\x2', '\xA0', 
		'\xA2', '\a', '\x1C', '\x2', '\x2', '\xA1', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x94', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\f', '\a', '\x2', 
		'\x2', '\xA4', '\xA5', '\a', '\x5', '\x2', '\x2', '\xA5', '\xAA', '\x5', 
		'\x18', '\r', '\x2', '\xA6', '\xA7', '\f', '\x6', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\x6', '\x2', '\x2', '\xA8', '\xAA', '\x5', '\x18', '\r', 
		'\x2', '\xA9', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\x17', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAF', '\b', '\r', '\x1', '\x2', '\xAF', 
		'\xB0', '\x5', '\x1A', '\xE', '\x2', '\xB0', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\f', '\x6', '\x2', '\x2', '\xB2', '\xB3', '\a', 
		'\a', '\x2', '\x2', '\xB3', '\xBE', '\x5', '\x1A', '\xE', '\x2', '\xB4', 
		'\xB5', '\f', '\x5', '\x2', '\x2', '\xB5', '\xB6', '\a', '\t', '\x2', 
		'\x2', '\xB6', '\xBE', '\x5', '\x1A', '\xE', '\x2', '\xB7', '\xB8', '\f', 
		'\x4', '\x2', '\x2', '\xB8', '\xB9', '\a', '\b', '\x2', '\x2', '\xB9', 
		'\xBE', '\x5', '\x1A', '\xE', '\x2', '\xBA', '\xBB', '\f', '\x3', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '%', '\x2', '\x2', '\xBC', '\xBE', '\x5', 
		'\x1A', '\xE', '\x2', '\xBD', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', 
		'\v', '\x2', '\x2', '\xC3', '\xD6', '\x5', '\x1A', '\xE', '\x2', '\xC4', 
		'\xC5', '\a', '\x6', '\x2', '\x2', '\xC5', '\xD6', '\x5', '\x1A', '\xE', 
		'\x2', '\xC6', '\xC7', '\a', '\x5', '\x2', '\x2', '\xC7', '\xD6', '\x5', 
		'\x1A', '\xE', '\x2', '\xC8', '\xC9', '\a', '\x1F', '\x2', '\x2', '\xC9', 
		'\xD6', '\x5', '\x1A', '\xE', '\x2', '\xCA', '\xCB', '\a', '\x1B', '\x2', 
		'\x2', '\xCB', '\xCC', '\x5', '\x4', '\x3', '\x2', '\xCC', '\xCD', '\a', 
		'\x1C', '\x2', '\x2', '\xCD', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xD6', '\a', '\x15', '\x2', '\x2', '\xCF', '\xD6', '\a', '\x16', '\x2', 
		'\x2', '\xD0', '\xD6', '\a', '\x4', '\x2', '\x2', '\xD1', '\xD6', '\a', 
		'&', '\x2', '\x2', '\xD2', '\xD6', '\a', '(', '\x2', '\x2', '\xD3', '\xD6', 
		'\a', '\'', '\x2', '\x2', '\xD4', '\xD6', '\x5', '\x1E', '\x10', '\x2', 
		'\xD5', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDD', 
		'\x5', '\x4', '\x3', '\x2', '\xD8', '\xD9', '\x5', '\x4', '\x3', '\x2', 
		'\xD9', '\xDA', '\a', '\f', '\x2', '\x2', '\xDA', '\xDB', '\x5', '\x1C', 
		'\xF', '\x2', '\xDB', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x1D', 
		'\x2', '\x2', '\xDF', '\xE0', '\x5', '\x1C', '\xF', '\x2', '\xE0', '\xE1', 
		'\a', '\x1E', '\x2', '\x2', '\xE1', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '%', '\x31', '\x38', '?', 'I', '[', '\x63', '\x65', 'w', 'y', 
		'\x84', '\x8F', '\xA1', '\xA9', '\xAB', '\xBD', '\xBF', '\xD5', '\xDC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
