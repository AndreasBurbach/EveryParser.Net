//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EveryGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class EveryGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, SUBTRACT=2, MULITPLY=3, DIVIDE=4, MODULO=5, POWEROPERATOR=6, EQUAL=7, 
		NOT=8, NOTEQUAL=9, BOOLOR=10, BOOLAND=11, BITOR=12, BITAND=13, GREATER=14, 
		GREATEREQUAL=15, LOWER=16, LOWEREQUAL=17, TILDE=18, COLON=19, QUESTIONMARK=20, 
		INTEGERDIVISION=21, BITSHIFTLEFT=22, BITSHIFTRIGHT=23, NEWLINE=24, KOMMA=25, 
		TRUE=26, FALSE=27, ROUNDBRACKETOPEN=28, ROUNDBRACKETCLOSED=29, EDGEBRACKETOPEN=30, 
		EDGEBRACKETCLOSED=31, DOUBLE=32, STRING=33, VARIABLE=34, DIGIT=35, ALPHA=36, 
		INT=37, E=38, PI=39, ABS=40, ACOS=41, ACOSH=42, ASIN=43, ASINH=44, ATAN=45, 
		ATAN2=46, ATANH=47, CBRT=48, COS=49, COSH=50, CEILLING=51, CLAMP=52, EXP=53, 
		FLOOR=54, LOG=55, LOG2=56, LOG10=57, MAX=58, MIN=59, POWER=60, ROUND=61, 
		ROOT=62, SIN=63, SINH=64, SQRT=65, TAN=66, TANH=67, TRUNCATE=68, CONCAT=69, 
		UPPERCASE=70, LOWERCASE=71, CONTAINS=72, DISTINCT=73;
	public const int
		RULE_startRule = 0, RULE_expression = 1, RULE_if_else = 2, RULE_inner_if_else = 3, 
		RULE_bool_or_term = 4, RULE_bool_and_term = 5, RULE_equality = 6, RULE_check = 7, 
		RULE_bit_or_term = 8, RULE_bit_and_term = 9, RULE_line_term = 10, RULE_point_term = 11, 
		RULE_factor = 12, RULE_default_function_term = 13, RULE_math_function_term = 14, 
		RULE_expr_args = 15, RULE_array_expr = 16;
	public static readonly string[] ruleNames = {
		"startRule", "expression", "if_else", "inner_if_else", "bool_or_term", 
		"bool_and_term", "equality", "check", "bit_or_term", "bit_and_term", "line_term", 
		"point_term", "factor", "default_function_term", "math_function_term", 
		"expr_args", "array_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'=='", "'not'", "'!='", 
		"'||'", "'&&'", "'|'", "'&'", "'>'", "'>='", "'<'", "'<='", "'~'", "':'", 
		"'?'", "'//'", "'<<'", "'>>'", null, "','", "'true'", "'false'", "'('", 
		"')'", "'['", "']'", null, null, null, null, null, null, "'e'", "'pi'", 
		"'abs('", "'acos('", "'acosh('", "'asin('", "'asinh('", "'atan('", "'atan2('", 
		"'atanh('", "'cbrt('", "'cos('", "'cosh('", "'ceilling('", "'clamp('", 
		"'exp('", "'floor('", "'log('", "'log2('", "'log10('", "'max('", "'min('", 
		"'pow('", "'round('", "'root('", "'sin('", "'sinh('", "'sqrt('", "'tan('", 
		"'tanh('", "'truncate('", "'concat('", "'upper('", "'lower('", "'in'", 
		"'distinct('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "SUBTRACT", "MULITPLY", "DIVIDE", "MODULO", "POWEROPERATOR", 
		"EQUAL", "NOT", "NOTEQUAL", "BOOLOR", "BOOLAND", "BITOR", "BITAND", "GREATER", 
		"GREATEREQUAL", "LOWER", "LOWEREQUAL", "TILDE", "COLON", "QUESTIONMARK", 
		"INTEGERDIVISION", "BITSHIFTLEFT", "BITSHIFTRIGHT", "NEWLINE", "KOMMA", 
		"TRUE", "FALSE", "ROUNDBRACKETOPEN", "ROUNDBRACKETCLOSED", "EDGEBRACKETOPEN", 
		"EDGEBRACKETCLOSED", "DOUBLE", "STRING", "VARIABLE", "DIGIT", "ALPHA", 
		"INT", "E", "PI", "ABS", "ACOS", "ACOSH", "ASIN", "ASINH", "ATAN", "ATAN2", 
		"ATANH", "CBRT", "COS", "COSH", "CEILLING", "CLAMP", "EXP", "FLOOR", "LOG", 
		"LOG2", "LOG10", "MAX", "MIN", "POWER", "ROUND", "ROOT", "SIN", "SINH", 
		"SQRT", "TAN", "TANH", "TRUNCATE", "CONCAT", "UPPERCASE", "LOWERCASE", 
		"CONTAINS", "DISTINCT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EveryGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EveryGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EveryGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EveryGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(EveryGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(EveryGrammarParser.NEWLINE, i);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUBTRACT) | (1L << NOT) | (1L << TILDE) | (1L << TRUE) | (1L << FALSE) | (1L << ROUNDBRACKETOPEN) | (1L << EDGEBRACKETOPEN) | (1L << DOUBLE) | (1L << STRING) | (1L << VARIABLE) | (1L << INT) | (1L << ABS) | (1L << ACOS) | (1L << ACOSH) | (1L << ASIN) | (1L << ASINH) | (1L << ATAN) | (1L << ATAN2) | (1L << ATANH) | (1L << CBRT) | (1L << COS) | (1L << COSH) | (1L << CEILLING) | (1L << CLAMP) | (1L << EXP) | (1L << FLOOR) | (1L << LOG) | (1L << LOG2) | (1L << LOG10) | (1L << MAX) | (1L << MIN) | (1L << POWER) | (1L << ROUND) | (1L << ROOT) | (1L << SIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SINH - 64)) | (1L << (SQRT - 64)) | (1L << (TAN - 64)) | (1L << (TANH - 64)) | (1L << (TRUNCATE - 64)) | (1L << (DISTINCT - 64)))) != 0)) {
				{
				{
				State = 34;
				expression();
				State = 35;
				Match(NEWLINE);
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_elseContext if_else() {
			return GetRuleContext<If_elseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			if_else();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext[] inner_if_else() {
			return GetRuleContexts<Inner_if_elseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inner_if_elseContext inner_if_else(int i) {
			return GetRuleContext<Inner_if_elseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_or_termContext bool_or_term() {
			return GetRuleContext<Bool_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(EveryGrammarParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EveryGrammarParser.COLON, 0); }
		public If_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterIf_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitIf_else(this);
		}
	}

	[RuleVersion(0)]
	public If_elseContext if_else() {
		If_elseContext _localctx = new If_elseContext(Context, State);
		EnterRule(_localctx, 4, RULE_if_else);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				inner_if_else();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45;
				bool_or_term();
				State = 46;
				Match(QUESTIONMARK);
				State = 47;
				inner_if_else();
				State = 48;
				Match(COLON);
				State = 49;
				inner_if_else();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inner_if_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_or_termContext bool_or_term() {
			return GetRuleContext<Bool_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETOPEN() { return GetToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_elseContext if_else() {
			return GetRuleContext<If_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		public Inner_if_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inner_if_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterInner_if_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitInner_if_else(this);
		}
	}

	[RuleVersion(0)]
	public Inner_if_elseContext inner_if_else() {
		Inner_if_elseContext _localctx = new Inner_if_elseContext(Context, State);
		EnterRule(_localctx, 6, RULE_inner_if_else);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				bool_or_term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				Match(ROUNDBRACKETOPEN);
				State = 55;
				if_else();
				State = 56;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_or_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext[] bool_and_term() {
			return GetRuleContexts<Bool_and_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term(int i) {
			return GetRuleContext<Bool_and_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLOR() { return GetToken(EveryGrammarParser.BOOLOR, 0); }
		public Bool_or_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_or_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBool_or_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBool_or_term(this);
		}
	}

	[RuleVersion(0)]
	public Bool_or_termContext bool_or_term() {
		Bool_or_termContext _localctx = new Bool_or_termContext(Context, State);
		EnterRule(_localctx, 8, RULE_bool_or_term);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				bool_and_term(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				bool_and_term(0);
				State = 62;
				Match(BOOLOR);
				State = 63;
				bool_and_term(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_and_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_and_termContext bool_and_term() {
			return GetRuleContext<Bool_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLAND() { return GetToken(EveryGrammarParser.BOOLAND, 0); }
		public Bool_and_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_and_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBool_and_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBool_and_term(this);
		}
	}

	[RuleVersion(0)]
	public Bool_and_termContext bool_and_term() {
		return bool_and_term(0);
	}

	private Bool_and_termContext bool_and_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bool_and_termContext _localctx = new Bool_and_termContext(Context, _parentState);
		Bool_and_termContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_bool_and_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 68;
			equality(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 75;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bool_and_termContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bool_and_term);
					State = 70;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 71;
					Match(BOOLAND);
					State = 72;
					equality(0);
					}
					} 
				}
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(EveryGrammarParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EveryGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(EveryGrammarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(EveryGrammarParser.NOTEQUAL, 0); }
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		return equality(0);
	}

	private EqualityContext equality(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityContext _localctx = new EqualityContext(Context, _parentState);
		EqualityContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_equality, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 79;
				check(0);
				}
				break;
			case 2:
				{
				State = 80;
				factor();
				State = 81;
				Match(CONTAINS);
				State = 82;
				factor();
				}
				break;
			case 3:
				{
				State = 84;
				factor();
				State = 85;
				Match(NOT);
				State = 86;
				Match(CONTAINS);
				State = 87;
				factor();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 99;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 97;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 91;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 92;
						Match(EQUAL);
						State = 93;
						check(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 94;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 95;
						Match(NOTEQUAL);
						State = 96;
						check(0);
						}
						break;
					}
					} 
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(EveryGrammarParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(EveryGrammarParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWEREQUAL() { return GetToken(EveryGrammarParser.LOWEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(EveryGrammarParser.GREATEREQUAL, 0); }
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(Context, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 103;
			bit_or_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 117;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 105;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 106;
						Match(LOWER);
						State = 107;
						bit_or_term(0);
						}
						break;
					case 2:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 108;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 109;
						Match(GREATER);
						State = 110;
						bit_or_term(0);
						}
						break;
					case 3:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 111;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 112;
						Match(LOWEREQUAL);
						State = 113;
						bit_or_term(0);
						}
						break;
					case 4:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 114;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 115;
						Match(GREATEREQUAL);
						State = 116;
						bit_or_term(0);
						}
						break;
					}
					} 
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_or_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_or_termContext bit_or_term() {
			return GetRuleContext<Bit_or_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR() { return GetToken(EveryGrammarParser.BITOR, 0); }
		public Bit_or_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_or_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBit_or_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBit_or_term(this);
		}
	}

	[RuleVersion(0)]
	public Bit_or_termContext bit_or_term() {
		return bit_or_term(0);
	}

	private Bit_or_termContext bit_or_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_or_termContext _localctx = new Bit_or_termContext(Context, _parentState);
		Bit_or_termContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_bit_or_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 123;
			bit_and_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 130;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bit_or_termContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bit_or_term);
					State = 125;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 126;
					Match(BITOR);
					State = 127;
					bit_and_term(0);
					}
					} 
				}
				State = 132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_and_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_termContext bit_and_term() {
			return GetRuleContext<Bit_and_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND() { return GetToken(EveryGrammarParser.BITAND, 0); }
		public Bit_and_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_and_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterBit_and_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitBit_and_term(this);
		}
	}

	[RuleVersion(0)]
	public Bit_and_termContext bit_and_term() {
		return bit_and_term(0);
	}

	private Bit_and_termContext bit_and_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_and_termContext _localctx = new Bit_and_termContext(Context, _parentState);
		Bit_and_termContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_bit_and_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 134;
			line_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bit_and_termContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bit_and_term);
					State = 136;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 137;
					Match(BITAND);
					State = 138;
					line_term(0);
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Line_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_termContext line_term() {
			return GetRuleContext<Line_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(EveryGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(EveryGrammarParser.SUBTRACT, 0); }
		public Line_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterLine_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitLine_term(this);
		}
	}

	[RuleVersion(0)]
	public Line_termContext line_term() {
		return line_term(0);
	}

	private Line_termContext line_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Line_termContext _localctx = new Line_termContext(Context, _parentState);
		Line_termContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_line_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 145;
			point_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 153;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new Line_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_line_term);
						State = 147;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 148;
						Match(ADD);
						State = 149;
						point_term(0);
						}
						break;
					case 2:
						{
						_localctx = new Line_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_line_term);
						State = 150;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 151;
						Match(SUBTRACT);
						State = 152;
						point_term(0);
						}
						break;
					}
					} 
				}
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Point_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULITPLY() { return GetToken(EveryGrammarParser.MULITPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWEROPERATOR() { return GetToken(EveryGrammarParser.POWEROPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(EveryGrammarParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTLEFT() { return GetToken(EveryGrammarParser.BITSHIFTLEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTRIGHT() { return GetToken(EveryGrammarParser.BITSHIFTRIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(EveryGrammarParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERDIVISION() { return GetToken(EveryGrammarParser.INTEGERDIVISION, 0); }
		public Point_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterPoint_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitPoint_term(this);
		}
	}

	[RuleVersion(0)]
	public Point_termContext point_term() {
		return point_term(0);
	}

	private Point_termContext point_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Point_termContext _localctx = new Point_termContext(Context, _parentState);
		Point_termContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_point_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 159;
			factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 184;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 182;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 161;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 162;
						Match(MULITPLY);
						State = 163;
						factor();
						}
						break;
					case 2:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 164;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 165;
						Match(POWEROPERATOR);
						State = 166;
						factor();
						}
						break;
					case 3:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 167;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 168;
						Match(MODULO);
						State = 169;
						factor();
						}
						break;
					case 4:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 170;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 171;
						Match(BITSHIFTLEFT);
						State = 172;
						factor();
						}
						break;
					case 5:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 173;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 174;
						Match(BITSHIFTRIGHT);
						State = 175;
						factor();
						}
						break;
					case 6:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 176;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 177;
						Match(DIVIDE);
						State = 178;
						factor();
						}
						break;
					case 7:
						{
						_localctx = new Point_termContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_point_term);
						State = 179;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 180;
						Match(INTEGERDIVISION);
						State = 181;
						factor();
						}
						break;
					}
					} 
				}
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EveryGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(EveryGrammarParser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(EveryGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(EveryGrammarParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETOPEN() { return GetToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(EveryGrammarParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(EveryGrammarParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(EveryGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(EveryGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EveryGrammarParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(EveryGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_function_termContext default_function_term() {
			return GetRuleContext<Default_function_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Math_function_termContext math_function_term() {
			return GetRuleContext<Math_function_termContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 24, RULE_factor);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				Match(NOT);
				State = 188;
				factor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				Match(SUBTRACT);
				State = 190;
				factor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191;
				Match(ADD);
				State = 192;
				factor();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 193;
				Match(TILDE);
				State = 194;
				factor();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 195;
				Match(ROUNDBRACKETOPEN);
				State = 196;
				expression();
				State = 197;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 199;
				Match(TRUE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 200;
				Match(FALSE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 201;
				Match(INT);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 202;
				Match(DOUBLE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 203;
				Match(VARIABLE);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 204;
				Match(STRING);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 205;
				array_expr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 206;
				default_function_term();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 207;
				math_function_term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_function_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(EveryGrammarParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Point_termContext point_term() {
			return GetRuleContext<Point_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(EveryGrammarParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(EveryGrammarParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(EveryGrammarParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(EveryGrammarParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPERCASE() { return GetToken(EveryGrammarParser.UPPERCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWERCASE() { return GetToken(EveryGrammarParser.LOWERCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EveryGrammarParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		public Default_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_function_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterDefault_function_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitDefault_function_term(this);
		}
	}

	[RuleVersion(0)]
	public Default_function_termContext default_function_term() {
		Default_function_termContext _localctx = new Default_function_termContext(Context, State);
		EnterRule(_localctx, 26, RULE_default_function_term);
		int _la;
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 211;
				Match(CONCAT);
				State = 212;
				point_term(0);
				State = 213;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 216;
				Match(UPPERCASE);
				State = 217;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 218;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 220;
				Match(LOWERCASE);
				State = 221;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==VARIABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 222;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223;
				Match(DISTINCT);
				State = 226;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EDGEBRACKETOPEN:
					{
					State = 224;
					array_expr();
					}
					break;
				case VARIABLE:
					{
					State = 225;
					Match(VARIABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 228;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_function_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(EveryGrammarParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUNDBRACKETCLOSED() { return GetToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(EveryGrammarParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOSH() { return GetToken(EveryGrammarParser.ACOSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(EveryGrammarParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASINH() { return GetToken(EveryGrammarParser.ASINH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(EveryGrammarParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2() { return GetToken(EveryGrammarParser.ATAN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KOMMA() { return GetTokens(EveryGrammarParser.KOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA(int i) {
			return GetToken(EveryGrammarParser.KOMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATANH() { return GetToken(EveryGrammarParser.ATANH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRT() { return GetToken(EveryGrammarParser.CBRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(EveryGrammarParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COSH() { return GetToken(EveryGrammarParser.COSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILLING() { return GetToken(EveryGrammarParser.CEILLING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLAMP() { return GetToken(EveryGrammarParser.CLAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(EveryGrammarParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(EveryGrammarParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(EveryGrammarParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG2() { return GetToken(EveryGrammarParser.LOG2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(EveryGrammarParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(EveryGrammarParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(EveryGrammarParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(EveryGrammarParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(EveryGrammarParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(EveryGrammarParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(EveryGrammarParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINH() { return GetToken(EveryGrammarParser.SINH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(EveryGrammarParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(EveryGrammarParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TANH() { return GetToken(EveryGrammarParser.TANH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(EveryGrammarParser.TRUNCATE, 0); }
		public Math_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_function_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterMath_function_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitMath_function_term(this);
		}
	}

	[RuleVersion(0)]
	public Math_function_termContext math_function_term() {
		Math_function_termContext _localctx = new Math_function_termContext(Context, State);
		EnterRule(_localctx, 28, RULE_math_function_term);
		try {
			State = 375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				Match(ABS);
				State = 232;
				factor();
				State = 233;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				Match(ACOS);
				State = 236;
				factor();
				State = 237;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 239;
				Match(ACOSH);
				State = 240;
				factor();
				State = 241;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 243;
				Match(ASIN);
				State = 244;
				factor();
				State = 245;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 247;
				Match(ASINH);
				State = 248;
				factor();
				State = 249;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 251;
				Match(ATAN);
				State = 252;
				factor();
				State = 253;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 255;
				Match(ATAN2);
				State = 256;
				factor();
				State = 257;
				Match(KOMMA);
				State = 258;
				factor();
				State = 259;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 261;
				Match(ATANH);
				State = 262;
				factor();
				State = 263;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 265;
				Match(CBRT);
				State = 266;
				factor();
				State = 267;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 269;
				Match(COS);
				State = 270;
				factor();
				State = 271;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 273;
				Match(COSH);
				State = 274;
				factor();
				State = 275;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 277;
				Match(CEILLING);
				State = 278;
				factor();
				State = 279;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 281;
				Match(CLAMP);
				State = 282;
				factor();
				State = 283;
				Match(KOMMA);
				State = 284;
				factor();
				State = 285;
				Match(KOMMA);
				State = 286;
				factor();
				State = 287;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 289;
				Match(EXP);
				State = 290;
				factor();
				State = 291;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 293;
				Match(FLOOR);
				State = 294;
				factor();
				State = 295;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 297;
				Match(LOG);
				State = 298;
				factor();
				State = 299;
				Match(KOMMA);
				State = 300;
				factor();
				State = 301;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 303;
				Match(LOG2);
				State = 304;
				factor();
				State = 305;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 307;
				Match(LOG10);
				State = 308;
				factor();
				State = 309;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 311;
				Match(MAX);
				State = 312;
				factor();
				State = 313;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 315;
				Match(MAX);
				State = 316;
				factor();
				State = 317;
				Match(KOMMA);
				State = 318;
				factor();
				State = 319;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 321;
				Match(MIN);
				State = 322;
				factor();
				State = 323;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 325;
				Match(MIN);
				State = 326;
				factor();
				State = 327;
				Match(KOMMA);
				State = 328;
				factor();
				State = 329;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 331;
				Match(POWER);
				State = 332;
				factor();
				State = 333;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 335;
				Match(ROUND);
				State = 336;
				factor();
				State = 337;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 339;
				Match(ROUND);
				State = 340;
				factor();
				State = 341;
				Match(KOMMA);
				State = 342;
				factor();
				State = 343;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 345;
				Match(ROOT);
				State = 346;
				factor();
				State = 347;
				Match(KOMMA);
				State = 348;
				factor();
				State = 349;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 351;
				Match(SIN);
				State = 352;
				factor();
				State = 353;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 355;
				Match(SINH);
				State = 356;
				factor();
				State = 357;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 359;
				Match(SQRT);
				State = 360;
				factor();
				State = 361;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 363;
				Match(TAN);
				State = 364;
				factor();
				State = 365;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 367;
				Match(TANH);
				State = 368;
				factor();
				State = 369;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 371;
				Match(TRUNCATE);
				State = 372;
				factor();
				State = 373;
				Match(ROUNDBRACKETCLOSED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOMMA() { return GetToken(EveryGrammarParser.KOMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		public Expr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterExpr_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitExpr_args(this);
		}
	}

	[RuleVersion(0)]
	public Expr_argsContext expr_args() {
		Expr_argsContext _localctx = new Expr_argsContext(Context, State);
		EnterRule(_localctx, 30, RULE_expr_args);
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 377;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378;
				expression();
				State = 379;
				Match(KOMMA);
				State = 380;
				expr_args();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETOPEN() { return GetToken(EveryGrammarParser.EDGEBRACKETOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_argsContext expr_args() {
			return GetRuleContext<Expr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGEBRACKETCLOSED() { return GetToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0); }
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.EnterArray_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEveryGrammarListener typedListener = listener as IEveryGrammarListener;
			if (typedListener != null) typedListener.ExitArray_expr(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 32, RULE_array_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			Match(EDGEBRACKETOPEN);
			State = 385;
			expr_args();
			State = 386;
			Match(EDGEBRACKETCLOSED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return bool_and_term_sempred((Bool_and_termContext)_localctx, predIndex);
		case 6: return equality_sempred((EqualityContext)_localctx, predIndex);
		case 7: return check_sempred((CheckContext)_localctx, predIndex);
		case 8: return bit_or_term_sempred((Bit_or_termContext)_localctx, predIndex);
		case 9: return bit_and_term_sempred((Bit_and_termContext)_localctx, predIndex);
		case 10: return line_term_sempred((Line_termContext)_localctx, predIndex);
		case 11: return point_term_sempred((Point_termContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bool_and_term_sempred(Bool_and_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_sempred(EqualityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_or_term_sempred(Bit_or_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_and_term_sempred(Bit_and_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool line_term_sempred(Line_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool point_term_sempred(Point_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 7);
		case 12: return Precpred(Context, 6);
		case 13: return Precpred(Context, 5);
		case 14: return Precpred(Context, 4);
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'K', '\x187', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '(', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '+', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '=', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x44', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'L', '\n', '\a', '\f', 
		'\a', '\xE', '\a', 'O', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\\', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', '\x64', '\n', '\b', '\f', '\b', '\xE', '\b', 'g', '\v', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'x', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '{', '\v', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x83', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x86', '\v', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x8E', '\n', '\v', '\f', '\v', '\xE', '\v', '\x91', '\v', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x9C', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\x9F', '\v', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\xB9', '\n', '\r', '\f', '\r', '\xE', '\r', '\xBC', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xD3', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\xE5', '\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\xE8', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x17A', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x181', '\n', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x2', '\t', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x13', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', '\x3', '\x3', 
		'\x2', '#', '$', '\x2', '\x1BE', '\x2', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x4', ',', '\x3', '\x2', '\x2', '\x2', '\x6', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\b', '<', '\x3', '\x2', '\x2', '\x2', '\n', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x45', '\x3', '\x2', '\x2', '\x2', '\xE', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'h', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x14', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x92', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xD2', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x179', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x180', '\x3', '\x2', '\x2', '\x2', '\"', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '$', '%', '\x5', '\x4', '\x3', '\x2', '%', '&', '\a', 
		'\x1A', '\x2', '\x2', '&', '(', '\x3', '\x2', '\x2', '\x2', '\'', '$', 
		'\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', 
		'\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x3', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\x5', '\x6', '\x4', '\x2', '-', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x36', '\x5', '\b', '\x5', '\x2', '/', '\x30', '\x5', 
		'\n', '\x6', '\x2', '\x30', '\x31', '\a', '\x16', '\x2', '\x2', '\x31', 
		'\x32', '\x5', '\b', '\x5', '\x2', '\x32', '\x33', '\a', '\x15', '\x2', 
		'\x2', '\x33', '\x34', '\x5', '\b', '\x5', '\x2', '\x34', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '.', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x36', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '=', '\x5', '\n', '\x6', '\x2', '\x38', '\x39', '\a', '\x1E', 
		'\x2', '\x2', '\x39', ':', '\x5', '\x6', '\x4', '\x2', ':', ';', '\a', 
		'\x1F', '\x2', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', '<', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x38', '\x3', '\x2', '\x2', '\x2', '=', 
		'\t', '\x3', '\x2', '\x2', '\x2', '>', '\x44', '\x5', '\f', '\a', '\x2', 
		'?', '@', '\x5', '\f', '\a', '\x2', '@', '\x41', '\a', '\f', '\x2', '\x2', 
		'\x41', '\x42', '\x5', '\f', '\a', '\x2', '\x42', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '>', '\x3', '\x2', '\x2', '\x2', '\x43', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\v', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\b', '\a', '\x1', '\x2', '\x46', 'G', '\x5', '\xE', '\b', '\x2', 
		'G', 'M', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\f', '\x3', '\x2', '\x2', 
		'I', 'J', '\a', '\r', '\x2', '\x2', 'J', 'L', '\x5', '\xE', '\b', '\x2', 
		'K', 'H', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 
		'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', '\r', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\b', '\b', '\x1', '\x2', 'Q', '\\', '\x5', '\x10', '\t', 
		'\x2', 'R', 'S', '\x5', '\x1A', '\xE', '\x2', 'S', 'T', '\a', 'J', '\x2', 
		'\x2', 'T', 'U', '\x5', '\x1A', '\xE', '\x2', 'U', '\\', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x5', '\x1A', '\xE', '\x2', 'W', 'X', '\a', '\n', 
		'\x2', '\x2', 'X', 'Y', '\a', 'J', '\x2', '\x2', 'Y', 'Z', '\x5', '\x1A', 
		'\xE', '\x2', 'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'P', '\x3', 
		'\x2', '\x2', '\x2', '[', 'R', '\x3', '\x2', '\x2', '\x2', '[', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\\', '\x65', '\x3', '\x2', '\x2', '\x2', ']', '^', 
		'\f', '\x6', '\x2', '\x2', '^', '_', '\a', '\t', '\x2', '\x2', '_', '\x64', 
		'\x5', '\x10', '\t', '\x2', '`', '\x61', '\f', '\x5', '\x2', '\x2', '\x61', 
		'\x62', '\a', '\v', '\x2', '\x2', '\x62', '\x64', '\x5', '\x10', '\t', 
		'\x2', '\x63', ']', '\x3', '\x2', '\x2', '\x2', '\x63', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\xF', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\b', '\t', '\x1', '\x2', 'i', 'j', '\x5', '\x12', 
		'\n', '\x2', 'j', 'y', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\f', '\x6', 
		'\x2', '\x2', 'l', 'm', '\a', '\x12', '\x2', '\x2', 'm', 'x', '\x5', '\x12', 
		'\n', '\x2', 'n', 'o', '\f', '\x5', '\x2', '\x2', 'o', 'p', '\a', '\x10', 
		'\x2', '\x2', 'p', 'x', '\x5', '\x12', '\n', '\x2', 'q', 'r', '\f', '\x4', 
		'\x2', '\x2', 'r', 's', '\a', '\x13', '\x2', '\x2', 's', 'x', '\x5', '\x12', 
		'\n', '\x2', 't', 'u', '\f', '\x3', '\x2', '\x2', 'u', 'v', '\a', '\x11', 
		'\x2', '\x2', 'v', 'x', '\x5', '\x12', '\n', '\x2', 'w', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'n', '\x3', '\x2', '\x2', '\x2', 'w', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'w', 't', '\x3', '\x2', '\x2', '\x2', 'x', '{', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x11', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\b', '\n', '\x1', '\x2', '}', '~', '\x5', 
		'\x14', '\v', '\x2', '~', '\x84', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\f', '\x3', '\x2', '\x2', '\x80', '\x81', '\a', '\xE', '\x2', 
		'\x2', '\x81', '\x83', '\x5', '\x14', '\v', '\x2', '\x82', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x13', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\b', '\v', '\x1', '\x2', '\x88', 
		'\x89', '\x5', '\x16', '\f', '\x2', '\x89', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\f', '\x3', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		'\xF', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\x16', '\f', '\x2', '\x8D', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x15', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\b', '\f', '\x1', 
		'\x2', '\x93', '\x94', '\x5', '\x18', '\r', '\x2', '\x94', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x96', '\f', '\x4', '\x2', '\x2', '\x96', 
		'\x97', '\a', '\x3', '\x2', '\x2', '\x97', '\x9C', '\x5', '\x18', '\r', 
		'\x2', '\x98', '\x99', '\f', '\x3', '\x2', '\x2', '\x99', '\x9A', '\a', 
		'\x4', '\x2', '\x2', '\x9A', '\x9C', '\x5', '\x18', '\r', '\x2', '\x9B', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\b', '\r', '\x1', '\x2', '\xA1', '\xA2', '\x5', 
		'\x1A', '\xE', '\x2', '\xA2', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\f', '\t', '\x2', '\x2', '\xA4', '\xA5', '\a', '\x5', '\x2', 
		'\x2', '\xA5', '\xB9', '\x5', '\x1A', '\xE', '\x2', '\xA6', '\xA7', '\f', 
		'\b', '\x2', '\x2', '\xA7', '\xA8', '\a', '\b', '\x2', '\x2', '\xA8', 
		'\xB9', '\x5', '\x1A', '\xE', '\x2', '\xA9', '\xAA', '\f', '\a', '\x2', 
		'\x2', '\xAA', '\xAB', '\a', '\a', '\x2', '\x2', '\xAB', '\xB9', '\x5', 
		'\x1A', '\xE', '\x2', '\xAC', '\xAD', '\f', '\x6', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\x18', '\x2', '\x2', '\xAE', '\xB9', '\x5', '\x1A', '\xE', 
		'\x2', '\xAF', '\xB0', '\f', '\x5', '\x2', '\x2', '\xB0', '\xB1', '\a', 
		'\x19', '\x2', '\x2', '\xB1', '\xB9', '\x5', '\x1A', '\xE', '\x2', '\xB2', 
		'\xB3', '\f', '\x4', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x6', '\x2', 
		'\x2', '\xB4', '\xB9', '\x5', '\x1A', '\xE', '\x2', '\xB5', '\xB6', '\f', 
		'\x3', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x17', '\x2', '\x2', '\xB7', 
		'\xB9', '\x5', '\x1A', '\xE', '\x2', '\xB8', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', 
		'\n', '\x2', '\x2', '\xBE', '\xD3', '\x5', '\x1A', '\xE', '\x2', '\xBF', 
		'\xC0', '\a', '\x4', '\x2', '\x2', '\xC0', '\xD3', '\x5', '\x1A', '\xE', 
		'\x2', '\xC1', '\xC2', '\a', '\x3', '\x2', '\x2', '\xC2', '\xD3', '\x5', 
		'\x1A', '\xE', '\x2', '\xC3', '\xC4', '\a', '\x14', '\x2', '\x2', '\xC4', 
		'\xD3', '\x5', '\x1A', '\xE', '\x2', '\xC5', '\xC6', '\a', '\x1E', '\x2', 
		'\x2', '\xC6', '\xC7', '\x5', '\x4', '\x3', '\x2', '\xC7', '\xC8', '\a', 
		'\x1F', '\x2', '\x2', '\xC8', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xD3', '\a', '\x1C', '\x2', '\x2', '\xCA', '\xD3', '\a', '\x1D', '\x2', 
		'\x2', '\xCB', '\xD3', '\a', '\'', '\x2', '\x2', '\xCC', '\xD3', '\a', 
		'\"', '\x2', '\x2', '\xCD', '\xD3', '\a', '$', '\x2', '\x2', '\xCE', '\xD3', 
		'\a', '#', '\x2', '\x2', '\xCF', '\xD3', '\x5', '\"', '\x12', '\x2', '\xD0', 
		'\xD3', '\x5', '\x1C', '\xF', '\x2', '\xD1', '\xD3', '\x5', '\x1E', '\x10', 
		'\x2', '\xD2', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\t', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', 
		'G', '\x2', '\x2', '\xD6', '\xD7', '\x5', '\x18', '\r', '\x2', '\xD7', 
		'\xD8', '\a', '\x1F', '\x2', '\x2', '\xD8', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\t', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', 
		'H', '\x2', '\x2', '\xDB', '\xDC', '\t', '\x2', '\x2', '\x2', '\xDC', 
		'\xE8', '\a', '\x1F', '\x2', '\x2', '\xDD', '\xDE', '\t', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', 'I', '\x2', '\x2', '\xDF', '\xE0', '\t', 
		'\x2', '\x2', '\x2', '\xE0', '\xE8', '\a', '\x1F', '\x2', '\x2', '\xE1', 
		'\xE4', '\a', 'K', '\x2', '\x2', '\xE2', '\xE5', '\x5', '\"', '\x12', 
		'\x2', '\xE3', '\xE5', '\a', '$', '\x2', '\x2', '\xE4', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', '\a', '\x1F', '\x2', 
		'\x2', '\xE7', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEA', '\a', '*', '\x2', '\x2', '\xEA', '\xEB', '\x5', 
		'\x1A', '\xE', '\x2', '\xEB', '\xEC', '\a', '\x1F', '\x2', '\x2', '\xEC', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '+', '\x2', 
		'\x2', '\xEE', '\xEF', '\x5', '\x1A', '\xE', '\x2', '\xEF', '\xF0', '\a', 
		'\x1F', '\x2', '\x2', '\xF0', '\x17A', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF2', '\a', ',', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\x1A', '\xE', 
		'\x2', '\xF3', '\xF4', '\a', '\x1F', '\x2', '\x2', '\xF4', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF6', '\a', '-', '\x2', '\x2', '\xF6', 
		'\xF7', '\x5', '\x1A', '\xE', '\x2', '\xF7', '\xF8', '\a', '\x1F', '\x2', 
		'\x2', '\xF8', '\x17A', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', 
		'.', '\x2', '\x2', '\xFA', '\xFB', '\x5', '\x1A', '\xE', '\x2', '\xFB', 
		'\xFC', '\a', '\x1F', '\x2', '\x2', '\xFC', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\a', '/', '\x2', '\x2', '\xFE', '\xFF', '\x5', 
		'\x1A', '\xE', '\x2', '\xFF', '\x100', '\a', '\x1F', '\x2', '\x2', '\x100', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\a', '\x30', '\x2', 
		'\x2', '\x102', '\x103', '\x5', '\x1A', '\xE', '\x2', '\x103', '\x104', 
		'\a', '\x1B', '\x2', '\x2', '\x104', '\x105', '\x5', '\x1A', '\xE', '\x2', 
		'\x105', '\x106', '\a', '\x1F', '\x2', '\x2', '\x106', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x108', '\a', '\x31', '\x2', '\x2', '\x108', 
		'\x109', '\x5', '\x1A', '\xE', '\x2', '\x109', '\x10A', '\a', '\x1F', 
		'\x2', '\x2', '\x10A', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', 
		'\a', '\x32', '\x2', '\x2', '\x10C', '\x10D', '\x5', '\x1A', '\xE', '\x2', 
		'\x10D', '\x10E', '\a', '\x1F', '\x2', '\x2', '\x10E', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\x33', '\x2', '\x2', '\x110', 
		'\x111', '\x5', '\x1A', '\xE', '\x2', '\x111', '\x112', '\a', '\x1F', 
		'\x2', '\x2', '\x112', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\a', '\x34', '\x2', '\x2', '\x114', '\x115', '\x5', '\x1A', '\xE', '\x2', 
		'\x115', '\x116', '\a', '\x1F', '\x2', '\x2', '\x116', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\a', '\x35', '\x2', '\x2', '\x118', 
		'\x119', '\x5', '\x1A', '\xE', '\x2', '\x119', '\x11A', '\a', '\x1F', 
		'\x2', '\x2', '\x11A', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
		'\a', '\x36', '\x2', '\x2', '\x11C', '\x11D', '\x5', '\x1A', '\xE', '\x2', 
		'\x11D', '\x11E', '\a', '\x1B', '\x2', '\x2', '\x11E', '\x11F', '\x5', 
		'\x1A', '\xE', '\x2', '\x11F', '\x120', '\a', '\x1B', '\x2', '\x2', '\x120', 
		'\x121', '\x5', '\x1A', '\xE', '\x2', '\x121', '\x122', '\a', '\x1F', 
		'\x2', '\x2', '\x122', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', 
		'\a', '\x37', '\x2', '\x2', '\x124', '\x125', '\x5', '\x1A', '\xE', '\x2', 
		'\x125', '\x126', '\a', '\x1F', '\x2', '\x2', '\x126', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x128', '\a', '\x38', '\x2', '\x2', '\x128', 
		'\x129', '\x5', '\x1A', '\xE', '\x2', '\x129', '\x12A', '\a', '\x1F', 
		'\x2', '\x2', '\x12A', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', 
		'\a', '\x39', '\x2', '\x2', '\x12C', '\x12D', '\x5', '\x1A', '\xE', '\x2', 
		'\x12D', '\x12E', '\a', '\x1B', '\x2', '\x2', '\x12E', '\x12F', '\x5', 
		'\x1A', '\xE', '\x2', '\x12F', '\x130', '\a', '\x1F', '\x2', '\x2', '\x130', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\a', ':', '\x2', 
		'\x2', '\x132', '\x133', '\x5', '\x1A', '\xE', '\x2', '\x133', '\x134', 
		'\a', '\x1F', '\x2', '\x2', '\x134', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x136', '\a', ';', '\x2', '\x2', '\x136', '\x137', '\x5', '\x1A', 
		'\xE', '\x2', '\x137', '\x138', '\a', '\x1F', '\x2', '\x2', '\x138', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\a', '<', '\x2', '\x2', 
		'\x13A', '\x13B', '\x5', '\x1A', '\xE', '\x2', '\x13B', '\x13C', '\a', 
		'\x1F', '\x2', '\x2', '\x13C', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x13E', '\a', '<', '\x2', '\x2', '\x13E', '\x13F', '\x5', '\x1A', '\xE', 
		'\x2', '\x13F', '\x140', '\a', '\x1B', '\x2', '\x2', '\x140', '\x141', 
		'\x5', '\x1A', '\xE', '\x2', '\x141', '\x142', '\a', '\x1F', '\x2', '\x2', 
		'\x142', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\a', 
		'=', '\x2', '\x2', '\x144', '\x145', '\x5', '\x1A', '\xE', '\x2', '\x145', 
		'\x146', '\a', '\x1F', '\x2', '\x2', '\x146', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\a', '=', '\x2', '\x2', '\x148', '\x149', '\x5', 
		'\x1A', '\xE', '\x2', '\x149', '\x14A', '\a', '\x1B', '\x2', '\x2', '\x14A', 
		'\x14B', '\x5', '\x1A', '\xE', '\x2', '\x14B', '\x14C', '\a', '\x1F', 
		'\x2', '\x2', '\x14C', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', 
		'\a', '>', '\x2', '\x2', '\x14E', '\x14F', '\x5', '\x1A', '\xE', '\x2', 
		'\x14F', '\x150', '\a', '\x1F', '\x2', '\x2', '\x150', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\a', '?', '\x2', '\x2', '\x152', 
		'\x153', '\x5', '\x1A', '\xE', '\x2', '\x153', '\x154', '\a', '\x1F', 
		'\x2', '\x2', '\x154', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', 
		'\a', '?', '\x2', '\x2', '\x156', '\x157', '\x5', '\x1A', '\xE', '\x2', 
		'\x157', '\x158', '\a', '\x1B', '\x2', '\x2', '\x158', '\x159', '\x5', 
		'\x1A', '\xE', '\x2', '\x159', '\x15A', '\a', '\x1F', '\x2', '\x2', '\x15A', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\a', '@', '\x2', 
		'\x2', '\x15C', '\x15D', '\x5', '\x1A', '\xE', '\x2', '\x15D', '\x15E', 
		'\a', '\x1B', '\x2', '\x2', '\x15E', '\x15F', '\x5', '\x1A', '\xE', '\x2', 
		'\x15F', '\x160', '\a', '\x1F', '\x2', '\x2', '\x160', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x162', '\a', '\x41', '\x2', '\x2', '\x162', 
		'\x163', '\x5', '\x1A', '\xE', '\x2', '\x163', '\x164', '\a', '\x1F', 
		'\x2', '\x2', '\x164', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', 
		'\a', '\x42', '\x2', '\x2', '\x166', '\x167', '\x5', '\x1A', '\xE', '\x2', 
		'\x167', '\x168', '\a', '\x1F', '\x2', '\x2', '\x168', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x16A', '\a', '\x43', '\x2', '\x2', '\x16A', 
		'\x16B', '\x5', '\x1A', '\xE', '\x2', '\x16B', '\x16C', '\a', '\x1F', 
		'\x2', '\x2', '\x16C', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', 
		'\a', '\x44', '\x2', '\x2', '\x16E', '\x16F', '\x5', '\x1A', '\xE', '\x2', 
		'\x16F', '\x170', '\a', '\x1F', '\x2', '\x2', '\x170', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x172', '\a', '\x45', '\x2', '\x2', '\x172', 
		'\x173', '\x5', '\x1A', '\xE', '\x2', '\x173', '\x174', '\a', '\x1F', 
		'\x2', '\x2', '\x174', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', 
		'\a', '\x46', '\x2', '\x2', '\x176', '\x177', '\x5', '\x1A', '\xE', '\x2', 
		'\x177', '\x178', '\a', '\x1F', '\x2', '\x2', '\x178', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\x179', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x179', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x179', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x179', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x117', '\x3', '\x2', '\x2', '\x2', '\x179', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x123', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x179', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x131', '\x3', '\x2', '\x2', '\x2', '\x179', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x179', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x147', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x179', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x155', '\x3', '\x2', '\x2', '\x2', '\x179', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x165', '\x3', '\x2', '\x2', '\x2', '\x179', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x179', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x181', 
		'\x5', '\x4', '\x3', '\x2', '\x17C', '\x17D', '\x5', '\x4', '\x3', '\x2', 
		'\x17D', '\x17E', '\a', '\x1B', '\x2', '\x2', '\x17E', '\x17F', '\x5', 
		' ', '\x11', '\x2', '\x17F', '\x181', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17C', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '!', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\a', 
		' ', '\x2', '\x2', '\x183', '\x184', '\x5', ' ', '\x11', '\x2', '\x184', 
		'\x185', '\a', '!', '\x2', '\x2', '\x185', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x17', ')', '\x35', '<', '\x43', 'M', '[', '\x63', '\x65', 'w', 'y', 
		'\x84', '\x8F', '\x9B', '\x9D', '\xB8', '\xBA', '\xD2', '\xE4', '\xE7', 
		'\x179', '\x180',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
